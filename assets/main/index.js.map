{"version":3,"sources":["assets/scripts/core/common/AudioCommon.ts","assets/scripts/core/common/ConfigCommon.ts","assets/scripts/config/GameConfig.ts","assets/scripts/core/common/ImageCommon.ts","assets/scripts/Interface.ts","assets/scripts/core/system/ItemSystem.ts","assets/scripts/core/structure/LinkedList.ts","assets/scripts/core/common/LoadCommon.ts","assets/scripts/scene/Loading.ts","assets/scripts/core/common/LocalStorageCommon.ts","assets/scripts/scene/Main.ts","assets/scripts/core/structure/Stack.ts","assets/scripts/core/tools/TAction.ts","assets/scripts/core/tools/TMath.ts","assets/scripts/core/tools/TNode.ts","assets/scripts/config/TableConfig.ts","assets/scripts/prefab/TempBtn.ts","assets/scripts/prefab/TempGrid.ts","assets/scripts/prefab/Tip.ts","assets/scripts/ui/UIEditor.ts","assets/scripts/ui/UIFail.ts","assets/scripts/ui/UIMain.ts","assets/scripts/core/ui/UIMgr.ts","assets/scripts/ui/UITemp.ts","assets/scripts/ui/UIVictory.ts"],"names":["ConfigCommon_1","require","LoadCommon_1","LocalStorageCommon_1","AudioCommon","init","default","loadBundle","_a","sent","this","audios","getTable","play","audioName","loop","type","_playMusic","_playEffect","isMusicPlaying","lastAudioName","isMusicOpen","audio","loadAsset","path","bundleName","cc","AudioClip","then","clip","audioEngine","playMusic","_this","isEffectOpen","effectPlayingIds","playEffect","effectLastTime","Date","getTime","lastTime","interval","stop","stopMusic","audioId","undefined","stopEffect","openMusic","_setAudioState","setInt","closeMusic","openEffect","closeEffect","stage","getInt","isCanPlayMusic","isCanPlayEffect","isMusic","isPlay","stopAllEffects","Object","create","exports","ConfigCommon","_loadConfig","Promise","resolve","resources","load","JsonAsset","error","assets","console","log","key","json","configs","isExistTable","tableName","getRow","rowName","table","getCol","colName","row","GameConfig","isEditor","Props","201","202","203","LocalKeys","CurLevel","ResetTime","CurCoin","CoinNum","window","ImageCommon","images","setImageToTarget","target","imgId","sprite","Node","getComponent","Sprite","addComponent","loadImageToSprite","loadSuccess","isValid","bean","getById","bundle","SpriteFrame","res","spriteFrame","loadImg","img","loadImgToTarget","spf","UISort","ItemSystem","defineProperty","get","localData","getObject","localStorageKey","items","initItems","TableConfig","Item","TName","isUpdate","localStorage","id","saveData","setObject","addItemByList","list","isShowGet","length","item","_i","list_1","info","addItem","count","push","itemId","isPassMaxLimit","Math","min","getMaxCountById","reduceItem","isNotEnoughTip","isNotEnough","isTip","getCountById","max","maxCount","getItems","LoadCommon","caches","bundles","assetManager","getBundle","err","loadBundles","success","index","option","asset","loadRemote","object","url","AudioCommon_1","ImageCommon_1","ItemSystem_1","_decorator","ccclass","Loading","property","_super","__extends","prototype","onLoad","time","Number","props","i","today","setHours","setMinutes","setSeconds","setMilliseconds","director","loadScene","__decorate","Component","LocalStorageCommon","getString","defaultVal","sys","getItem","setString","val","setItem","warn","obj","str","JSON","parse","stringify","num","isNaN","toString","UIEditor_1","UIMain_1","Main","start","instance","open","initTelegram","loadTelegramSdk","reject","WebApp","ready","script","document","createElement","src","onload","onerror","head","appendChild","processInitData","initData","_b","WebAppData","_c","URLSearchParams","entries","_d","value","user","initDataUnsafe","onEvent","tgInitData","Error","Stack","_stacks","_index","data","pop","TAction","shake","node","shakeRatio","offset","tween","by","x","y","fadeIn","callback","oldOpacity","opacity","to","call","fadeOut","scaleIn","easing","oldScale","scale","scaleOut","TMath","random","round","objectValToArray","objs","array","shuffleArray","j","floor","randomArray","randomCount","results","arrayCopy","__spreadArrays","randomVal","splice","randomStr","result","strLength","charAt","removeItem","temp","concat","weightRandomIdx","weights","tw","rw","sw","ew","angleTowards","current","speed","dAngle","dir","abs","sign","createQueueCircle","r","total","quarter","arr","sin","PI","sqrt","createQueueHeart","unit","radian","pow","cos","TNode","bindNodeTreeAndButton","tclass","name","children","startsWith","Button","Toggle","on","childrenCount","setLabelValue","lbl","Label","RichText","string","setImgToTarget","Audio","Bgm","Selected","Eliminate","Image","101","102","Level","Level1","Level2","Level3","Level4","Level5","Level6","TNode_1","UIMgr_1","TempBtn","apply","arguments","config","SpIcon","LblName","LblCount","curCount","use","icon","showTip","setCoinView","isCan","revoke","help","refreshChange","TempGrid","SpShadow","col","order","isLock","isSelected","setShadow","isShow","active","selected","Tip","bg","lblContent","content","height","delay","destroy","displayName","Interface_1","UIEditor","sort","NORMAL","dependencies","Root","SpDot","EditBoxOrder","EditBoxLevel","curCards","curNodes","isCreate","isDelete","editBoxOrder","editBoxLevel","isCanCreate","tempPrefab","_instance","EditBox","parent","contentSize","getContentSize","size","width","instantiate","zIndex","macro","MAX_ZINDEX","checkCardOrder","Prefab","prefab","EventType","TOUCH_START","createCard","TOUCH_MOVE","event","_loop_1","point","this_1","getBoundingBoxToWorld","contains","getLocation","card_1","node_1","setPosition","getPosition","indexOf","update","dt","isUnlock","getChildByName","onClick_ToggleCreate","onClick_ToggleDelete","close","UIFail","onClick_BtnConfirm","reset","TMath_1","TempBtn_1","TempGrid_1","UIFail_1","UIVictory_1","UIMain","cards","selectedCards","isEliminate","steps","LayoutContent","isRevoke","LayoutProp","isRefresh","LblLevel","BackGround","CoinNode","repeatForever","scaleY","destroyAllChildren","initCard","initProp","cardIds","card","pos","v2","position","v3","i_1","step","originPos","convertToWorldSpaceAR","convertToNodeSpaceAR","delIndex","level","_loop_2","this_2","addChild","comp","onSelectCard","bind","doEliminate","selectCard","Layout","enabled","findEqualCard","halfWidth","Tween","stopAllByTarget","worldPos","index_1","_loop_3","this_3","uuid","insertAction","last","__awaiter","checkEqual","a","b","_loop_4","cards_1","Tip_1","TempWindow","UIMgr","_layers","_windows","layers","keys","widget","Widget","isAlignBottom","isAlignTop","isAlignLeft","isAlignRight","top","bottom","left","right","winName","__open","bundleName_1","_open","root","winNode","setParent","TOP","UITemp","UIVictory","curLevel"],"mappings":"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","sourcesContent":["import { IDictSimple } from \"../../Interface\";\nimport ConfigCommon from \"./ConfigCommon\";\nimport LoadCommon from \"./LoadCommon\";\nimport LocalStorageCommon from \"./LocalStorageCommon\";\n\n/** 音乐管理 */\nexport default class AudioCommon {\n\n    /** 是否能播放音乐 */\n    protected static isCanPlayMusic: boolean = null;\n    /** 是否能播放音效 */\n    protected static isCanPlayEffect: boolean = null;\n    /** 最后一次播放的音乐 */\n    protected static lastAudioName: string = \"\";\n    /** 时间记录 */\n    protected static effectLastTime: IDictSimple<number> = Object.create(null);\n    /** 播放中的音效id */\n    protected static effectPlayingIds: IDictSimple<number> = Object.create(null);\n    /** 音乐是否播放中 */\n    protected static isMusicPlaying: boolean = null;\n    /** 配置表缓存 */\n    protected static audios: IDictSimple<table.IAudio> = null;\n\n    /** 初始化 */\n    public static async init() {\n        await LoadCommon.loadBundle(\"audio\");\n        this.audios = ConfigCommon.getTable(\"audio\");\n        return true;\n    }\n\n    /**\n     * 播放根据配置表的music判断是音乐还是音效\n     * @param audioName \n     * @param loop \n     */\n    public static play(audioName: string, loop: boolean = false) {\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        if (audio.type == 1) {\n            this._playMusic(audioName, loop);\n        } else {\n            this._playEffect(audioName, loop);\n        }\n    }\n\n    /**\n     * 播放音乐\n     * @param audioName 音乐资源名\n     * @param loop 是否循环\n     */\n    private static _playMusic(audioName: string, loop: boolean = true) {\n        if (this.isMusicPlaying && this.lastAudioName == audioName) {\n            return;\n        }\n        this.lastAudioName = audioName;\n        /** 不能播放 */\n        if (!this.isMusicOpen()) {\n            return;\n        }\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        LoadCommon.loadAsset({ path: audio.path, bundleName: \"audio\", type: cc.AudioClip }).then((clip: cc.AudioClip) => {\n            cc.audioEngine.playMusic(clip, loop);\n        });\n        this.isMusicPlaying = true;\n    }\n\n    /**\n     * 播放音乐\n     * @param audioName 音乐资源名\n     * @param loop 是否循环\n     */\n    private static _playEffect(audioName: string, loop: boolean = false) {\n        /** 不能播放 */\n        if (!this.isEffectOpen()) {\n            return;\n        }\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        const play = () => {\n            LoadCommon.loadAsset({ path: audio.path, bundleName: \"audio\", type: cc.AudioClip }).then((clip: cc.AudioClip) => {\n                this.effectPlayingIds[audioName] = cc.audioEngine.playEffect(clip, loop);\n                this.effectLastTime[audioName] = new Date().getTime();\n            });\n        };\n        let lastTime = this.effectLastTime[audioName];\n        if (lastTime) {\n            if (new Date().getTime() - lastTime >= audio.interval * 1000) {\n                play();\n            }\n            return;\n        }\n        play();\n    }\n\n    /**\n     * 停止\n     * @param audioName \n     */\n    public static stop(audioName: string) {\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        if (audio.type == 1) {\n            cc.audioEngine.stopMusic();\n            this.lastAudioName = \"\";\n            this.isMusicPlaying = false;\n        } else {\n            let audioId = this.effectPlayingIds[audioName];\n            if (audioId == undefined) {\n                return;\n            }\n            cc.audioEngine.stopEffect(audioId);\n        }\n    }\n\n    /** 打开音乐 */\n    public static openMusic() {\n        this._setAudioState(true, true);\n        LocalStorageCommon.setInt(\"AudioCommon_Music_State\", 1);\n    }\n\n    /** 关闭音乐 */\n    public static closeMusic() {\n        this.isMusicPlaying = false;\n        this._setAudioState(true, false);\n        LocalStorageCommon.setInt(\"AudioCommon_Music_State\", 0);\n    }\n\n    /** 打开音效 */\n    public static openEffect() {\n        this._setAudioState(false, true);\n        LocalStorageCommon.setInt(\"AudioCommon_Effect_State\", 1);\n    }\n\n    /** 关闭音效 */\n    public static closeEffect() {\n        this._setAudioState(false, false);\n        LocalStorageCommon.setInt(\"AudioCommon_Effect_State\", 0);\n    }\n\n    /** 音乐是否开启状态 */\n    public static isMusicOpen() {\n        let stage = LocalStorageCommon.getInt(\"AudioCommon_Music_State\", -1);\n        if (stage == -1) {\n            LocalStorageCommon.setInt(\"AudioCommon_Music_State\", 1);\n            stage = 1;\n        }\n        if (this.isCanPlayMusic == null) {\n            this.isCanPlayMusic = stage == 1;\n        }\n        return this.isCanPlayMusic;\n    }\n\n    /** 音效是否开启状态 */\n    public static isEffectOpen() {\n        let stage = LocalStorageCommon.getInt(\"AudioCommon_Effect_State\", -1);\n        if (stage == -1) {\n            LocalStorageCommon.setInt(\"AudioCommon_Effect_State\", 1);\n            stage = 1;\n        }\n        if (this.isCanPlayEffect == null) {\n            this.isCanPlayEffect = stage == 1;\n        }\n        return this.isCanPlayEffect;\n    }\n\n    /**\n     * 设置音乐状态\n     * @param isMusic 音乐还是音效\n     * @param isPlay 是否能播放\n     */\n    private static _setAudioState(isMusic: boolean, isPlay: boolean) {\n        if (isMusic) {\n            this.isCanPlayMusic = isPlay;\n        } else {\n            this.isCanPlayEffect = isPlay;\n        }\n        if (!isPlay) {\n            if (isMusic) {\n                cc.audioEngine.stopMusic();\n            } else {\n                cc.audioEngine.stopAllEffects();\n            }\n            return;\n        }\n        if (isMusic && this.lastAudioName) {\n            this._playMusic(this.lastAudioName);\n        }\n    }\n\n}\n","import { IDictSimple } from \"../../Interface\";\n\n/** 配置管理 */\nexport default class ConfigCommon {\n\n    protected static configs: IDictSimple<any> = Object.create(null);\n\n    /** 初始化 */\n    public static async init() {\n        /** 加载json */\n        await this._loadConfig();\n        return true;\n    }\n\n    /** 加载json */\n    private static _loadConfig(): Promise<any> {\n        return new Promise((resolve: (value) => void, reject: (error?: Error) => void) => {\n            cc.resources.load(\"config/config\", cc.JsonAsset, (error: Error, assets: cc.JsonAsset) => {\n                if (error) {\n                    console.log(\"[ConfigCommon][_loadConfig] load error = \", error);\n                    return;\n                }\n                for (let key in assets.json) {\n                    this.configs[key] = assets.json[key];\n                }\n                resolve(this.configs);\n            });\n        });\n    }\n\n    /**\n     * 是否存在表\n     * @param tableName \n     * @returns \n     */\n    public static isExistTable(tableName: string): boolean {\n        return !!this.configs[tableName];\n    }\n\n    /**\n     * 获取整个表数据\n     * @param tableName \n     * @returns \n     */\n    public static getTable<T>(tableName: string): T {\n        const table: T = this.configs[tableName];\n        if (!table) {\n            console.log(`[ConfigCommon][getTable] Table:[${tableName}] is not exist`);\n            return null;\n        }\n        return table;\n    }\n\n    /**\n     * 获取一条行数据\n     * @param tableName \n     * @param rowName \n     * @returns \n     */\n    public static getRow<T>(tableName: string, rowName: string): T {\n        const table = this.getTable(tableName);\n        if (!table) return null;\n        const row = table[rowName];\n        if (!row) {\n            console.log(`[ConfigCommon][getRow] Table:[${tableName}],Row:[${rowName}] is not exist`);\n            return null;\n        }\n        return row;\n    }\n\n    /**\n     * 获取一条列数据\n     * @param tableName \n     * @param rowName \n     * @param colName \n     */\n    public static getCol<T>(tableName: string, rowName: string, colName: string): T {\n        const row = this.getRow(tableName, rowName);\n        if (!row) return null;\n        const col = row[colName];\n        if (!col) {\n            console.log(`[ConfigCommon][getCol] Table:[${tableName}],Row:[${rowName}],Col:[${colName}] is not exist`);\n            return null;\n        }\n        return col;\n    }\n\n}","\n/** 游戏常规配置 */\nlet GameConfig = new class {\n\n    /** 是否进入关卡编辑模式 0：游戏界面 1：关卡编辑界面 */\n    isEditor = 0;\n\n    /** 道具每日增加次数 */\n    Props = {\n        /** 撤销上一步 */\n        201: 3,\n        /** 完成一组 */\n        202: 3,\n        /** 刷新卡牌 */\n        203: 3,\n    };\n\n    LocalKeys = {\n        /** 当前关卡 */\n        CurLevel: \"CurLevel\",\n        /** 重置时间 */\n        ResetTime: \"ResetTime\",\n        /**/\n        CurCoin:\"CurCoin\"\n    };\n    CoinNum = 100;\n\n};\n\nwindow[\"GameConfig\"] = GameConfig;\n","import { IDictSimple } from \"../../Interface\";\nimport ConfigCommon from \"./ConfigCommon\";\nimport LoadCommon from \"./LoadCommon\";\n\n/** img管理 */\nexport default class ImageCommon {\n\n    protected static images: IDictSimple<table.IImage> = null;\n\n    /** 初始化 */\n    public static async init() {\n        this.images = ConfigCommon.getTable(\"image\");\n        return true;\n    }\n\n    /**\n     * 设置图片到目标\n     * @param target cc.Node不存在cc.Sprite则会添加一个\n     * @param imgId \n     */\n    public static setImageToTarget(target: cc.Node | cc.Sprite, imgId: string): void {\n        if (!target || !imgId) return;\n        let sprite: cc.Sprite = null;\n        if (target instanceof cc.Node) {\n            sprite = target.getComponent(cc.Sprite);\n            if (!sprite) {\n                sprite = target.addComponent(cc.Sprite);\n            }\n        } else if (target instanceof cc.Sprite) {\n            sprite = target;\n        }\n        if (!sprite) return;\n        this.loadImageToSprite(sprite, imgId);\n    }\n\n    /**\n     * 加载图片到精灵\n     * @param sprite \n     * @param imgId \n     * @param loadSuccess \n     * @returns 是否成功\n     */\n    public static loadImageToSprite(sprite: cc.Sprite, imgId: string, loadSuccess?: (sprite: cc.Sprite) => void): boolean {\n        if (!imgId || !cc.isValid(sprite)) {\n            return false;\n        }\n        const bean: table.IImage = this.getById(imgId);\n        if (!bean) {\n            return false;\n        }\n        LoadCommon.loadAsset({ path: bean.path, bundleName: bean.bundle, type: cc.SpriteFrame }).then((res: cc.SpriteFrame) => {\n            sprite.spriteFrame = res;\n            loadSuccess && loadSuccess(sprite);\n        });\n        return true;\n    }\n\n    /**\n     * 加载图片\n     * @param imgId 对应img.json的id\n     * @param loadSuccess \n     */\n    public static loadImg(imgId: string, loadSuccess: (res: cc.SpriteFrame) => void) {\n        const img: table.IImage = this.getById(imgId);\n        LoadCommon.loadAsset({ path: img.path, bundleName: img.bundle, type: cc.SpriteFrame }).then((res: cc.SpriteFrame) => {\n            loadSuccess && loadSuccess(res);\n        });\n    }\n\n    /**\n     * 加载图片并设置到目标\n     * @param imgId \n     * @param target 节点 | 精灵\n     */\n    public static loadImgToTarget(imgId: string, target: cc.Node | cc.Sprite, loadSuccess?: () => void) {\n        if (!imgId) {\n            return;\n        }\n        this.loadImg(imgId, (spf: cc.SpriteFrame) => {\n            if (target instanceof cc.Sprite) {\n                target.spriteFrame = spf;\n            } else if (target instanceof cc.Node) {\n                target = target.getComponent(cc.Sprite);\n                target.spriteFrame = spf;\n            }\n            loadSuccess && loadSuccess();\n        });\n    }\n\n    /**\n     * 获取数据\n     * @param imgId \n     * @returns \n     */\n    public static getById(imgId: string): table.IImage {\n        return this.images[imgId];\n    }\n\n}","\n/** 界面排序 */\nexport enum UISort {\n    /** 背景 */\n    BACKGROUND,\n    /** 常用ui层 */\n    NORMAL,\n    /** 顶层 */\n    TOP,\n    /** 对话框 */\n    DIALOG,\n    /** 引导 */\n    GUIDE,\n}\n\n/** ui初始化回调 */\nexport interface UIInitFunc {\n    (ui: cc.Node, success: boolean): boolean;\n};\n\n/** 成功回调 */\nexport interface SuccessFunc {\n    (success: boolean): void;\n}\n\n/** 界面声明 */\nexport interface IWindow {\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node;\n\n    /**\n     * ui名\n     */\n    name: string;\n\n    /**\n     * 显示状态\n     */\n    active: boolean;\n\n    /**\n     * ui层级\n     */\n    sort: UISort;\n\n    /**\n     * 主分包\n     */\n    bundle: string;\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call: () => void): void;\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void;\n\n    /**\n     * 初始化\n     * @param ui ui节点\n     * @param success 是否成功\n     * @return true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean;\n\n    /**\n     * 帧循环\n     * @param dt \n     */\n    update?(dt: number): void;\n\n}\n\n/** 词典 */\nexport interface IDictSimple<V> {\n    [key: string]: V;\n}\n\n/** 奖励信息 */\nexport interface IRewardInfo {\n    /** 物品id */\n    id: string;\n    /** 物品数量 */\n    count: number;\n}\n\n","import { IDictSimple, IRewardInfo } from \"../../Interface\";\nimport ConfigCommon from \"../common/ConfigCommon\";\nimport LocalStorageCommon from \"../common/LocalStorageCommon\";\n\nexport default class ItemSystem {\n\n    /** 本地存储key */\n    protected static localStorageKey: string = \"ItemSystemDataKey\";\n    /** 本地数据 */\n    protected static localData: {\n        /** 物品数据 */\n        items: IDictSimple<number>;\n    } = null;\n    /** 本地数据 */\n    protected static get localStorage() {\n        if (!this.localData) {\n            this.localData = LocalStorageCommon.getObject(this.localStorageKey, Object.create(null));\n            /** 数据初始化 */\n            if (!this.localData.items) {\n                this.localData.items = Object.create(null);\n            }\n        }\n        return this.localData;\n    }\n\n    /** 配置表 */\n    protected static configs: IDictSimple<table.IItem> = null;\n\n    public static init(): Promise<boolean> {\n        /** 初始化本地配置 */\n        this.initItems();\n        return Promise.resolve(true);\n    }\n\n    /** 初始化本地配置 */\n    protected static initItems(): void {\n        this.configs = ConfigCommon.getTable(TableConfig.Item.TName);\n        let isUpdate: boolean = false;\n        for (let key in this.configs) {\n            /** 已经存在数据 */\n            if (this.localStorage.items[this.configs[key].id]) {\n                continue;\n            }\n            this.localStorage.items[this.configs[key].id] = 0;\n            isUpdate = true;\n        }\n        if (isUpdate) {\n            this.saveData();\n        }\n    }\n\n    /** 保存数据 */\n    protected static saveData() {\n        LocalStorageCommon.setObject(this.localStorageKey, this.localStorage);\n    }\n\n    /**\n     * 添加一组物品\n     * @param list \n     * @param isShowGet 是否显示获得弹窗 \n     */\n    public static addItemByList(list: IRewardInfo[], isShowGet: boolean = true): void {\n        if (!list && list.length <= 0) {\n            return;\n        }\n        let items: IRewardInfo[] = [];\n        let item: IRewardInfo = null;\n        for (let info of list) {\n            item = this.addItem(info.id, info.count);\n            if (!item) {\n                continue;\n            }\n            items.push(item);\n        }\n        /** 保存数据 */\n        this.saveData();\n        /** 显示弹窗 */\n        if (isShowGet) {\n\n        }\n    }\n\n    /**\n     * 添加物品\n     * @param itemId \n     * @param count \n     * @param isShowGet \n     */\n    public static addItem(itemId: string, count: number): IRewardInfo {\n        if (this.isPassMaxLimit(itemId, count) || count <= 0) {\n            return null;\n        }\n        count = Math.min(this.getMaxCountById(itemId) || count, count);\n        this.localStorage.items[itemId] += count;\n        return { id: itemId, count: count };\n    }\n\n    /**\n     * 减少物品\n     * @param itemId \n     * @param count \n     * @param isNotEnoughTip 不足提示 \n     */\n    public static reduceItem(itemId: string, count: number, isNotEnoughTip: boolean = true): void {\n        if (this.isNotEnough(itemId, count, isNotEnoughTip) || count <= 0) {\n            return;\n        }\n        this.localStorage.items[itemId] -= count;\n        this.saveData();\n    }\n\n    /**\n     * 物品是否不足\n     * @param itemId \n     * @param count \n     * @param isTip \n     * @returns \n     */\n    public static isNotEnough(itemId: string, count: number, isTip: boolean = true) {\n        if ((this.getCountById(itemId) - count) < 0) {\n            if (isTip) {\n\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 达到最大数量\n     * @param itemId \n     * @param count \n     * @returns \n     */\n    public static isPassMaxLimit(itemId: string, count: number): boolean {\n        let max: number = this.getMaxCountById(itemId);\n        return max == 0 ? false : max >= count;\n    }\n\n    /**\n     * 获取物品最大数量\n     * @param itemId \n     * @returns \n     */\n    public static getMaxCountById(itemId: string): number {\n        let item: table.IItem = this.getById(itemId);\n        if (!item) {\n            return;\n        }\n        return item.maxCount;\n    }\n\n    /** 获取物品数据 */\n    public static getItems(): IDictSimple<number> {\n        return this.localStorage.items;\n    }\n\n    /**\n     * 获取物品数量\n     * @param itemId \n     * @returns \n     */\n    public static getCountById(itemId: string): number {\n        return this.localStorage.items[itemId] || 0;\n    }\n\n    /**\n     * 获取配置\n     * @param itemId \n     * @returns \n     */\n    public static getById(itemId: string): table.IItem {\n        return this.configs[itemId];\n    }\n\n}\n","\n/** 链表 */\nexport default class LinkedList {\n\n\n\n}\n","import { IDictSimple } from \"../../Interface\";\n\n/** 加载资源 */\nexport default class LoadCommon {\n\n    protected static bundles: IDictSimple<Promise<cc.AssetManager.Bundle>> = Object.create(null);\n\n    /**\n     * 加载分包\n     * @param bundleName \n     * @returns \n     */\n    public static loadBundle(bundleName: string): Promise<cc.AssetManager.Bundle> {\n        let caches = this.bundles;\n        let bundle = cc.assetManager.getBundle(bundleName);\n        if (bundle != null) {\n            return Promise.resolve(bundle);\n        }\n        if (!caches[bundleName]) {\n            caches[bundleName] = new Promise((resolve: (value: any) => void, reject: (reason?: any) => void) => {\n                cc.assetManager.loadBundle(bundleName, (err: Error, bundle: cc.AssetManager.Bundle) => {\n                    delete caches[bundleName];\n                    resolve && resolve(bundle);\n                });\n            });\n        }\n        return caches[bundleName];\n    }\n\n    /**\n     * 加载一组分包\n     * @param bundles \n     * @returns \n     */\n    public static loadBundles(bundles: string[]): Promise<boolean> {\n        return new Promise((resolve: (value: boolean) => void, reject: (reason?: any) => void) => {\n            let count = bundles.length;\n            let success = true;\n            for (let index = 0; index < bundles.length; index++) {\n                const bundleName = bundles[index];\n                if (bundleName != null) {\n                    let bundle = cc.assetManager.getBundle(bundleName);\n                    if (!bundle) {\n                        this.loadBundle(bundleName).then((bundle: cc.AssetManager.Bundle) => {\n                            count--;\n                            if (!bundle) success = false;\n                            if (count == 0 && resolve) resolve(success);\n                        });\n                        continue;\n                    }\n                }\n                count--;\n                if (count == 0 && resolve) resolve(success);\n            }\n        });\n    }\n\n    /**\n     * 根据分包名获取分包，不传则是cc.resources\n     * @param bundleName \n     * @returns \n     */\n    public static getBundle(bundleName?: string) {\n        let bundle: cc.AssetManager.Bundle = null;\n        if (!bundle) {\n            if (!bundleName || \"resources\" == bundleName) {\n                bundle = cc.resources;\n            } else {\n                bundle = cc.assetManager.getBundle(bundleName);\n            }\n        }\n        return bundle;\n    }\n\n    /**\n     * 加载资源\n     * @param option \n     * @returns \n     */\n    public static loadAsset<T extends cc.Asset>(option: { path: string, bundleName?: string, type?: { prototype: cc.Asset; }; }) {\n        const bundle = this.getBundle(option.bundleName);\n        const asset = bundle.get(option.path, option.type);\n        if (asset) {\n            return Promise.resolve(asset);\n        }\n        return new Promise((resolve: (value: any) => void, reject: (reason?: any) => void) => {\n            bundle.load(option.path, option.type, (err: Error, asset: T) => {\n                resolve(asset);\n            });\n        });\n    }\n\n    /**\n     * @description 原生加载资源\n     * @param object {url: 远程地址 option: 参数类型}\n     * @returns \n     */\n    public static loadRemote<T extends cc.Asset>(object: { url: string, option?: any; }) {\n        if (null == object.option) {\n            object.option = {};\n        }\n        const { url, option } = object;\n        return new Promise((resolve: (value: any) => void, reject: (reason?: any) => void) => {\n            cc.assetManager.loadRemote(url, option, (err: Error | null, asset: T) => {\n                resolve && resolve(asset);\n            });\n        });\n    }\n\n}\n","import AudioCommon from \"../core/common/AudioCommon\";\nimport ConfigCommon from \"../core/common/ConfigCommon\";\nimport ImageCommon from \"../core/common/ImageCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport ItemSystem from \"../core/system/ItemSystem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Loading extends cc.Component {\n\n    protected async onLoad() {\n        await ConfigCommon.init();\n        await ImageCommon.init();\n        await AudioCommon.init();\n        await ItemSystem.init();\n        /** 每日重置道具次数 */\n        let time: number = Number(LocalStorageCommon.getInt(GameConfig.LocalKeys.ResetTime)) || 0;\n        if (new Date().getTime() >= time) {\n\n        // if(1 == 1)\n            let props = [\n                TableConfig.Item[201],\n                TableConfig.Item[202],\n                TableConfig.Item[203],\n            ];\n\n            /** 道具 */\n            for (let i = 0; i < props.length; i++) {\n                console.log(\"i==\" + props[i]);\n                ItemSystem.addItem(props[i], GameConfig.Props[props[i]]);\n            }\n            /** 设置下一天时间 */\n            let today = new Date();\n            today.setHours(0);\n            today.setMinutes(0);\n            today.setSeconds(0);\n            today.setMilliseconds(0);\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.ResetTime, today.getTime() + 86400000);\n        }\n        console.log(\"111111111111111111111111\");\n        \n        cc.director.loadScene(\"Main\");\n    }\n\n}\n","\n/** 本地存储管理 */\nexport default class LocalStorageCommon {\n\n    /**\n     * 获取字符串\n     * @param key \n     * @returns \n     */\n    public static getString(key: string, defaultVal: string = \"\"): string {\n        return cc.sys.localStorage.getItem(key) || (defaultVal || null);\n    }\n\n    /**\n     * 设置字符串\n     * @param key \n     * @param val \n     */\n    public static setString(key: string, val: string) {\n        if (!key) {\n            console.warn(`[LocalStorageCommon][setString] Key：[${key}] is null,please check`);\n            return;\n        }\n        cc.sys.localStorage.setItem(key, val);\n    }\n\n    /**\n     * 获取一个对象\n     * @param key \n     */\n    public static getObject<T>(key: string, defaultVal: any = null): T {\n        let obj = null;\n        let str = this.getString(key);\n        if (!str) return defaultVal || null;\n        try {\n            obj = JSON.parse(str);\n        } catch (error) {\n            throw (error);\n        }\n        return obj;\n    }\n\n    /**\n     * 设置对象\n     * @param key \n     * @param obj \n     */\n    public static setObject<T>(key: string, obj: T) {\n        let str = \"\";\n        try {\n            str = JSON.stringify(obj);\n        } catch (error) {\n            throw (error);\n        }\n        this.setString(key, str);\n    }\n\n    /**\n     * 获取一个数字\n     * @param key \n     */\n    public static getInt(key: string, defaultVal: number = 0): number {\n        let str = this.getString(key);\n        if (!str) return defaultVal || 0;\n        let num = Number(str);\n        if (isNaN(num)) {\n            console.error(`[LocalStorageCommon][setString] Key：[${key}],value = [${str}] isNaN`);\n        }\n        return num;\n    }\n\n    /**\n     * 设置一个数字\n     * @param key \n     * @param num \n     */\n    public static setInt(key: string, num: number) {\n        this.setString(key, num.toString());\n    }\n\n}","import LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport UIEditor from \"../ui/UIEditor\";\nimport UIMain from \"../ui/UIMain\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Main extends cc.Component {\n\n    protected onLoad(): void {\n\n    }\n\n    protected start() {\n        let level = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurLevel, -1);\n        if (level == -1) {\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.CurLevel, 1);\n        }\n        console.log(\"localkeys ==\"+ GameConfig.LocalKeys.CurLevel);\n        \n        GameConfig.CoinNum = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurCoin,-1);\n        if(GameConfig.CoinNum == -1){\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.CurCoin,100);\n            GameConfig.CoinNum = 100;\n        }\n        console.log(\"coinNum ===\" + GameConfig.CoinNum);\n        GameConfig.isEditor\n            ?\n            UIEditor.instance.open():\n            UIMain.instance.open();\n\n        this.initTelegram();\n    }\n\n\n    loadTelegramSdk(){\n        return new Promise<void>((resolve,reject)=>{\n            if(window[\"Telegram\"]&&window[\"Telegram\"].WebApp){\n                console.log('Telegram Sdk 已经加载：',window['Telegram']);\n                window['Telegram'].WebApp.ready();\n                resolve();\n                return;\n            }\n            const script = document.createElement('script');\n            script.src = 'https://telegram.org/js/telegram-web-app.js';\n            script.onload = ()=>{\n                console.log(\"SDK加载成功：\",window['Telegram']);\n                window['Telegram'].WebApp.ready();\n\n                resolve();\n            };\n            script.onerror = error=>{\n                console.log('SDK 加载失败:',error);\n                reject(error);\n            };\n            document.head.appendChild(script);\n        })\n    }\n\n    processInitData(){\n        const initData = window['Telegram']?.WebApp?.initData;\n        if(initData){\n            const searchParams = new URLSearchParams(initData);\n            const WebAppData =  {};\n            for(const[key,value] of searchParams.entries()){\n                WebAppData[key] = value;\n            }\n            console.log('WebAppData:',WebAppData);\n            const user = window['Telegram'].WebApp.initDataUnsafe;\n            console.log('User:',user);\n            window['Telegram'].WebApp.onEvent('resize',function(){\n                console.log('更新UI:');\n            });\n            this.tgInitData = initData;\n        }\n        else{\n            console.warn('Telegram WebApp initData is not available.');\n        }\n    }\n\n\n    async initTelegram(){\n        try{\n            await this.loadTelegramSdk();\n            this.processInitData();\n        }\n        catch(error){\n            console.error('Failed to load Telegram SDK:',Error);\n        }\n    }\n\n}\n","import { IDictSimple } from \"../../Interface\";\n\n/** 栈(后进先出) */\nexport default class Stack {\n\n    private _stacks: IDictSimple<any> = Object.create(null);\n    private _index: number = 0;\n\n    get length(): number {\n        return this._index;\n    }\n\n    push(data: any) {\n        this._stacks[this._index++] = data;\n        return this;\n    }\n\n    pop() {\n        if (this._index <= 0) {\n            throw \"stack length illegal\";\n        }\n        this._index--;\n        let data = this._stacks[this._index];\n        delete this._stacks[this._index];\n        return data;\n    }\n\n}\n","\nexport default class TAction {\n\n    /**\n     * 震动\n     * @param node 震动节点\n     * @param shakeRatio x,y的震动比率\n     */\n    public shake(node: cc.Node, shakeRatio: number = 0.5) {\n        const offset = 10 * shakeRatio;\n        cc.tween(node)\n            .by(0.15, { x: offset, y: offset })\n            .by(0.15, { x: -offset, y: -offset })\n            .by(0.15, { x: offset, y: offset })\n            .by(0.15, { x: -offset, y: -offset })\n            .start();\n    }\n\n    /**\n     * 淡入节点\n     * @param node \n     * @param time \n     * @param callback \n     */\n    public fadeIn(node: cc.Node, time: number = 1, callback?: () => void) {\n        let oldOpacity = node.opacity;\n        node.opacity = 0;\n        cc.tween(node)\n            .to(time, { opacity: oldOpacity })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n    /**\n     * 淡出节点\n     * @param node \n     * @param time \n     */\n    public fadeOut(node: cc.Node, time: number = 1, callback?: () => void) {\n        cc.tween(node)\n            .to(time, { opacity: 0 })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n    /**\n     * 从无到有\n     * @param node \n     * @param time \n     * @param callback \n     * @param easing 缓动\n     */\n    public scaleIn(node: cc.Node, time: number = 0.5, callback?: () => void, easing: string = \"bounceOut\") {\n        let oldScale = node.scale;\n        node.scale = 0;\n        cc.tween(node)\n            .to(time, { scale: oldScale }, { easing: easing })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n    /**\n     * 从有到无\n     * @param node \n     * @param time \n     * @param callback \n     * @param easing 缓动\n     */\n    public scaleOut(node: cc.Node, time: number = 0.5, callback?: () => void, easing: string = \"bounceIn\") {\n        cc.tween(node)\n            .to(time, { scale: 0 }, { easing: easing })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n}\n","\nexport default class TMath {\n\n    /**\n       * 随机数\n       * @param min \n       * @param max \n       * @param round \n       * @returns \n       */\n    public static random(min: number, max: number, round: boolean = false): number {\n        const random = Math.random() * (max - min);\n        return round ? (Math.round(random) + min) : (random + min);\n    }\n\n    /** 对象转换成数组 */\n    public static objectValToArray(objs: any, array?: any[]): any[] {\n        array = array || [];\n        for (let key in objs) {\n            array.push(objs[key]);\n        }\n        return array;\n    }\n\n    /**\n     * 打乱数组\n     * @param array \n     * @returns \n     */\n    public static shuffleArray<T>(array: T[]): T[] {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    /**\n     * 将一个数组随机打乱并只保留n个\n     * @param array \n     * @param randomCount 随机次数\n     * @returns \n     */\n    public static randomArray<T>(array: T[], randomCount: number): T[] {\n        if (array.length < randomCount) {\n            return array;\n        }\n        const results = [];\n        const arrayCopy = [...array];\n        for (let i = 0; i < randomCount; i++) {\n            const random = this.random(0, arrayCopy.length - 1, true);\n            const randomVal = arrayCopy.splice(random, 1)[0];\n            results.push(randomVal);\n        }\n        return results;\n    }\n\n    /**\n     * 随机生成字符串\n     * @param length 随机n个\n     * @param str 传入字符串\n     * @returns \n     */\n    public static randomStr(length: number, str: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"): string {\n        let result = '';\n        const strLength = str.length;\n        for (let i = 0; i < length; i++) {\n            result += str.charAt(Math.floor(Math.random() * strLength));\n        }\n        return result;\n    }\n\n    /**\n     * 删除数组中指定项\n     * @param array \n     * @param item \n     */\n    public static removeItem(array: any[], item: any): void {\n        const temp = array.concat();\n        for (let i = 0; i < temp.length; i++) {\n            const value = temp[i];\n            if (item == value) {\n                array.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * 权重随机\n     * @param weights 权重数组 \n     * @returns 索引\n     */\n    public static weightRandomIdx(weights: number[]): number {\n        if (weights.length <= 1) {\n            return 0;\n        }\n        let tw: number = 0;\n        for (let i = 0; i < weights.length; i++) {\n            tw += weights[i];\n        }\n        let rw = Math.random() * tw;\n        let sw: number = 0, ew: number = 0;\n        for (let i = 0; i < weights.length; i++) {\n            ew = sw + weights[i];\n            if (sw < rw && rw <= ew) {\n                return i;\n            }\n            sw = ew;\n        }\n        return 0;\n    }\n\n    /**\n     * 按一定的速度从一个角度转向另一个角度\n     * @param current \n     * @param target \n     * @param speed \n     */\n    public static angleTowards(current: number, target: number, speed: number): number {\n        current %= 360;\n        target %= 360;\n        const dAngle: number = target - current;\n        if (dAngle > 180) {\n            target = current - (360 - dAngle);\n        } else if (dAngle < -180) {\n            target = current + (360 + dAngle);\n        }\n        const dir = target - current;\n        if (speed > Math.abs(dir)) {\n            return target;\n        }\n        return ((current + speed * Math.sign(dir)) % 360 + 360) % 360;\n    }\n\n    /**\n     * 创建圆形队伍\n     * @param r 圆形方程半径\n     * @param total 生成的在圆上的点的总数\n     */\n    protected static createQueueCircle(r: number, total: number) {\n        if (total % 4 !== 0) throw \"生成的在圆上的点的总数错误，不是4的倍数\" + total;\n        let quarter = total / 4;\n        let arr: number[][] = [];\n        for (let i = 1; i < quarter; i++) {//第一象限\n            let y = r * Math.sin(Math.PI / 180 * i / quarter * 90);\n            let x = Math.sqrt(r * r - y * y);\n            arr.push([x, y], [x, -y], [-x, y], [-x, -y]);\n        };\n        arr.push([0, r], [0, -r], [r, 0], [-r, 0]);\n        return arr;\n    }\n\n    /**\n     * 创建心形队伍\n     * @param r 心形方程 半径\n     * @param total 生成的在心形上的点的总数\n     * 公式 X=16(sinθ)³  Y=13cosθ-5cos2θ-2cos3θ-cos4θ (0≤θ≤2π)\n     */\n    public static createQueueHeart(r: number, total: number) {\n        if (total < 20) throw \"total过小，无法生成心形方程\";\n        let unit = 2 * Math.PI / total;\n        r /= 16;// X=16(sinθ)³ 推断 x 最大为16；所以对y缩放\n        let arr: number[][] = [];\n        while (total) {\n            let radian = unit * total;\n            let x = 16 * (Math.sin(radian) ** 3);\n            let y = 13 * Math.cos(radian) - 5 * Math.cos(2 * radian) - 2 * Math.cos(3 * radian) - Math.cos(4 * radian);\n            x *= r;\n            y *= r;\n            arr.push([x, y]);\n            total--;\n        }\n        return arr;\n    }\n\n}\n","import ImageCommon from \"../common/ImageCommon\";\n\nexport default class TNode {\n\n    /**\n     * 绑定节点到类下\n     * @param tclass \n     * @param node \n     * @returns \n     */\n    public static bindNodeTreeAndButton(tclass: any, node: cc.Node): void {\n        if (!tclass || !node) {\n            return;\n        }\n        let name: string = \"\";\n        for (let temp of node.children) {\n            name = temp.name;\n            /** 节点名首字不为 \"_\" */\n            if (!name.startsWith(\"_\")) {\n                tclass[name] = temp;\n                /** 按钮组件存在 */\n                if ((temp.getComponent(cc.Button) || temp.getComponent(cc.Toggle)) && tclass[`onClick_${name}`]) {\n                    temp.on(\"click\", tclass[`onClick_${name}`], tclass);\n                }\n            }\n            if (!temp.childrenCount) {\n                continue;\n            }\n            this.bindNodeTreeAndButton(tclass, temp);\n        }\n    }\n\n    /**\n     * 设置图片到目标\n     * @param target \n     * @param imgId \n     */\n    public static setImageToTarget(target: cc.Node | cc.Sprite, imgId: string): void {\n        ImageCommon.setImageToTarget(target, imgId);\n    }\n\n    /**\n     * 设置文本内容\n     * @param target \n     * @param str \n     */\n    public static setLabelValue(target: cc.Node | cc.Label | cc.RichText, str: string) {\n        let lbl: any = null;\n        if (target instanceof cc.Node) {\n            lbl = target.getComponent(cc.Label);\n            if (!lbl) {\n                lbl = target.getComponent(cc.RichText);\n            }\n        } else {\n            lbl = target;\n        }\n        lbl.string = str;\n    }\n\n    /**\n     * 设置图片到目标\n     * @param target \n     * @param imgId \n     */\n    public static setImgToTarget(target: cc.Node | cc.Sprite, imgId: string, loadSuccess?: () => void) {\n        ImageCommon.loadImgToTarget(imgId, target as any, loadSuccess);\n    }\n\n}\n","/** 配置表相关数据 */\nlet TableConfig = new class {\n\n    /** 音乐表.xlsx */\n    Audio = {\n        /** 表名 */\n        \"TName\": \"audio\",\n        /** 背景音乐 */\n        \"Bgm\": \"Bgm\",\n        /** 选中 */\n        \"Selected\": \"Selected\",\n        /** 消除 */\n        \"Eliminate\": \"Eliminate\",\n    };\n\n    /** 图片表.xlsx */\n    Image = {\n        /** 表名 */\n        \"TName\": \"image\",\n    };\n\n    /** 物品表.xlsx */\n    Item = {\n        /** 表名 */\n        \"TName\": \"item\",\n        /** 金币 */\n        \"101\": \"101\",\n        /** 钻石 */\n        \"102\": \"102\",\n        /** 撤销道具 */\n        \"201\": \"201\",\n        /** 完成一组 */\n        \"202\": \"202\",\n        /** 刷新卡牌 */\n        \"203\": \"203\",\n    };\n\n    /** 关卡表.xlsx */\n    Level = {\n        /** 表名 */\n        \"TName\": \"level\",\n        \"Level1\": \"Level1\",\n        \"Level2\": \"Level2\",\n        \"Level3\": \"Level3\",\n        \"Level4\": \"Level4\",\n        \"Level5\": \"Level5\",\n        \"Level6\": \"Level6\",\n    };\n\n};\nwindow[\"TableConfig\"] = TableConfig;","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport LoadCommon from \"../core/common/LoadCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport ItemSystem from \"../core/system/ItemSystem\";\nimport TNode from \"../core/tools/TNode\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport UIMain from \"../ui/UIMain\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TempBtn extends cc.Component {\n\n    private config: table.IItem = null;\n    private SpIcon: cc.Node = null;\n    private LblName: cc.Node = null;\n    private LblCount: cc.Node = null;\n    private curCount: number = 0;\n\n    protected onLoad(): void {\n        TNode.bindNodeTreeAndButton(this, this.node);\n        this.node.on(\"click\", this.use, this);\n    }\n\n    public init(id: string) {\n        // console.log(\"id ====\" + id);\n        this.config = ItemSystem.getById(id);\n        // this.curCount = ItemSystem.getCountById(id);\n        this.curCount = 50;\n        TNode.setLabelValue(this.LblName, this.config.name);\n        TNode.setLabelValue(this.LblCount, `${this.curCount}`);\n        LoadCommon.loadAsset({\n            path: `res/${this.config.icon}`,\n            bundleName: \"ui\",\n            type: cc.SpriteFrame\n        }).then((spf: cc.SpriteFrame) => {\n            this.SpIcon.getComponent(cc.Sprite).spriteFrame = spf;\n        });\n    }\n\n    protected use() {\n        console.log(\"11111111111111111111122222222222222222222\");\n        \n        console.log(\"coin ===\"+GameConfig.CoinNum);\n\n        if (this.curCount > GameConfig.CoinNum) {\n            UIMgr.showTip(\"金币不足\");\n            return;\n        }\n        GameConfig.CoinNum -= this.curCount; \n\n        UIMain.instance.setCoinView(GameConfig.CoinNum);\n        console.log(\"num ====\" + GameConfig.CoinNum);\n        let isCan = false;\n        switch (this.config.id) {\n            case TableConfig.Item[201]:\n                /** 撤销 */\n                isCan = UIMain.instance.revoke();\n                break;\n            case TableConfig.Item[202]:\n                /** 完成一组 */\n                isCan = UIMain.instance.help();\n                break;\n            case TableConfig.Item[203]:\n                /** 刷新卡牌 */\n                isCan = UIMain.instance.refreshChange();\n                break;\n        }\n        if (isCan) {\n            this.curCount--;\n            ItemSystem.reduceItem(this.config.id, 1);\n            // TNode.setLabelValue(this.LblCount, `${this.curCount}`);\n        }\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport LoadCommon from \"../core/common/LoadCommon\";\nimport TNode from \"../core/tools/TNode\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TempGrid extends cc.Component {\n\n    private SpShadow: cc.Node = null;\n    private SpIcon: cc.Node = null;\n    public id: number = 0;\n    public row: number = 0;\n    public col: number = 0;\n    public order: number = 0;\n    public isLock: boolean = false;\n    public isSelected: boolean = false;\n\n    protected onLoad(): void {\n        TNode.bindNodeTreeAndButton(this, this.node);\n    }\n\n    public init(id: number, row: number, col: number, order: number) {\n        this.id = id;\n        this.row = row;\n        this.col = col;\n        this.order = order;\n        LoadCommon.loadAsset({\n            path: `res/imgs/img${id}`,\n            bundleName: \"prefabs\",\n            type: cc.SpriteFrame\n        }).then((spf: cc.SpriteFrame) => {\n            this.SpIcon.getComponent(cc.Sprite).spriteFrame = spf;\n        });\n    }\n\n    public setShadow(isShow: boolean) {\n        this.isLock = isShow;\n        this.SpShadow.active = isShow;\n    }\n\n    public selected(isSelected: boolean) {\n        this.isSelected = isSelected;\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n/** 提示框 */\n@ccclass\nexport default class Tip extends cc.Component {\n\n    @property({\n        type: cc.Node,\n        displayName: \"背景\"\n    })\n    protected bg: cc.Node = null;\n\n    @property({\n        type: cc.Label,\n        displayName: \"内容\"\n    })\n    protected lblContent: cc.Label = null;\n\n    /**\n     * 显示内容\n     * @param content \n     */\n    public init(content: string) {\n        this.lblContent.string = content;\n        if (this.lblContent[\"_forceUpdateRenderData\"]) {\n            this.lblContent[\"_forceUpdateRenderData\"]();\n        }\n        this.bg.height = this.lblContent.node.height + 20;\n        for (let node of this.bg.children) {\n            node.height = this.bg.height;\n        }\n        this.node.scale = 0;\n        cc.tween(this.node)\n            .to(0.3, { scale: 1 })\n            .delay(0.2)\n            .by(0.8, { opacity: -100, y: 120 })\n            .call(() => {\n                this.node.destroy();\n            })\n            .start();\n    }\n\n}\n","import LoadCommon from \"../core/common/LoadCommon\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\n\nexport default class UIEditor implements IWindow {\n\n    private static _instance: UIEditor = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIEditor();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIEditor\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    private Root: cc.Node = null;\n    private SpDot: cc.Node = null;\n    private EditBoxOrder: cc.Node = null;\n    private EditBoxLevel: cc.Node = null;\n    /** 当前写入数据 */\n    private curCards: any[] = [];\n    /** 当前写入数据 */\n    private curNodes: cc.Node[] = [];\n    /** 是否创建模式 */\n    private isCreate: boolean = false;\n    /** 是否删除模式 */\n    private isDelete: boolean = false;\n    private editBoxOrder: cc.EditBox = null;\n    private editBoxLevel: cc.EditBox = null;\n    private isCanCreate: boolean = false;\n    private interval: number = 0;\n    private tempPrefab: cc.Prefab = null;\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n        this.isCreate = true;\n        this.isCanCreate = true;\n        this.editBoxLevel = this.EditBoxLevel.getComponent(cc.EditBox);\n        this.editBoxOrder = this.EditBoxOrder.getComponent(cc.EditBox);\n        this.SpDot.parent = null;\n        const contentSize = this.Root.getContentSize();\n        const size = cc.size((100 / 4), (125 / 4));\n        /** 行 */\n        let row = Math.floor(contentSize.width / size.width) - 1;\n        /** 列 */\n        let col = Math.floor(contentSize.height / size.height) - 1;\n        /** 根据行列创建点 */\n        for (let i = 1; i <= row; i++) {\n            for (let j = 1; j <= col; j++) {\n                let node = cc.instantiate(this.SpDot);\n                node.parent = this.Root;\n                node.x = i * size.width;\n                node.y = -(j * size.height);\n                node[\"row\"] = i;\n                node[\"col\"] = j;\n                node.zIndex = cc.macro.MAX_ZINDEX;\n            }\n        }\n        this.checkCardOrder();\n        LoadCommon.loadBundle(\"prefabs\").then(() => {\n            LoadCommon.loadAsset({\n                path: \"res/Grid\",\n                bundleName: \"prefabs\",\n                type: cc.Prefab\n            }).then((prefab: cc.Prefab) => {\n                this.tempPrefab = prefab;\n                this.Root.on(cc.Node.EventType.TOUCH_START, this.createCard, this);\n                this.Root.on(cc.Node.EventType.TOUCH_MOVE, this.createCard, this);\n            });\n        });\n        return true;\n    }\n\n    /** 创建卡牌 */\n    protected createCard(event: cc.Event.EventTouch) {\n        if (this.isDelete || !this.isCreate || !this.isCanCreate) {\n            return;\n        }\n        this.isCanCreate = false;\n        let list = [...this.Root.children];\n        for (let i = 0; i < list.length; i++) {\n            const point = list[i];\n            if (point.name != this.SpDot.name) {\n                continue;\n            }\n            /** 当前点是否包含触摸坐标  可以修改Point的size让包围盒更大 */\n            if (point.getBoundingBoxToWorld().contains(event.getLocation())) {\n                /** 卡牌信息 */\n                const card = {\n                    row: point[\"row\"],\n                    col: point[\"col\"],\n                    order: Number(this.editBoxOrder.string)\n                };\n                const node = cc.instantiate(this.tempPrefab);\n                node.parent = this.Root;\n                node.setPosition(point.getPosition());\n                /** 点击后删除 */\n                node.on(cc.Node.EventType.TOUCH_START, () => {\n                    if (!node.isValid || !cc.isValid(node, true) || !this.isDelete) {\n                        return;\n                    }\n                    this.curCards.splice(this.curCards.indexOf(card), 1);\n                    this.curNodes.splice(this.curNodes.indexOf(node), 1);\n                    node.destroy();\n                    this.checkCardOrder();\n                }, this);\n                node.zIndex = Number(this.editBoxOrder.string);\n                this.curCards.push(card);\n                this.curNodes.push(node);\n                this.checkCardOrder();\n            }\n        }\n    };\n\n    update(dt: number): void {\n        if (!this.isCanCreate) {\n            this.interval += dt;\n            if (this.interval >= 0.2) {\n                this.interval = 0;\n                this.isCanCreate = true;\n            }\n        }\n    }\n\n    /** 检测卡牌排序 */\n    protected checkCardOrder() {\n        for (let i = 0; i < this.curCards.length; i++) {\n            let isUnlock: boolean = true;\n            for (let j = 0; j < this.curCards.length; j++) {\n                if (i == j) {\n                    continue;\n                }\n                /** 判断卡片间层级关系,并判断卡片距离 */\n                if (this.curCards[i].order < this.curCards[j].order) {\n                    // console.log(\"row:\", this.curCards[i].row, this.curCards[j].row);\n                    // console.log(\"col:\", this.curCards[i].col, this.curCards[j].col);\n                    if (Math.abs(this.curCards[i].row - this.curCards[j].row) <= 2\n                        && Math.abs(this.curCards[i].col - this.curCards[j].col) <= 2) {\n                        isUnlock = false;\n                    }\n                }\n            }\n            if (isUnlock) {\n                this.curNodes[i].getChildByName(\"SpShadow\").active = false;\n            } else {\n                this.curNodes[i].getChildByName(\"SpShadow\").active = true;\n            }\n        }\n        let str = JSON.stringify(this.curCards);\n        if (this.curCards.length == 0) {\n            str = \"快来编辑关卡吧！\";\n        }\n        if (this.curCards.length % 3 != 0) {\n            str = `卡牌不足三的倍数！目前数量：${this.curCards.length}`;\n        }\n        this.editBoxLevel.string = str;\n    }\n\n    protected onClick_ToggleCreate() {\n        this.isCreate = true;\n        this.isDelete = false;\n    }\n\n    protected onClick_ToggleDelete() {\n        this.isCreate = false;\n        this.isDelete = true;\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","import UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\nimport UIMain from \"./UIMain\";\n\nexport default class UIFail implements IWindow {\n\n    private static _instance: UIFail = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIFail();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIFail\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n\n        return true;\n    }\n\n    protected onClick_BtnConfirm() {\n        UIMain.instance.reset();\n        this.close();\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","import AudioCommon from \"../core/common/AudioCommon\";\nimport ConfigCommon from \"../core/common/ConfigCommon\";\nimport LoadCommon from \"../core/common/LoadCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport TMath from \"../core/tools/TMath\";\nimport TNode from \"../core/tools/TNode\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport { IDictSimple, IWindow, SuccessFunc, UISort } from \"../Interface\";\nimport TempBtn from \"../prefab/TempBtn\";\nimport TempGrid from \"../prefab/TempGrid\";\nimport UIFail from \"./UIFail\";\nimport UIVictory from \"./UIVictory\";\n\nexport default class UIMain implements IWindow {\n\n    private static _instance: UIMain = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIMain();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIMain\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    private Root: cc.Node = null;\n    private cards: TempGrid[] = [];\n    private selectedCards: TempGrid[] = [];\n    private isEliminate: boolean = false;\n    private steps: TempGrid[] = [];\n    private LayoutContent: cc.Node = null;\n    private tempPrefab: cc.Prefab = null;\n    private isRevoke: boolean = false;\n    private props: string[] = null;\n    private TempBtn: cc.Node = null;\n    private LayoutProp: cc.Node = null;\n    private isRefresh: boolean = false;\n    private LblLevel: cc.Node = null;\n    private BackGround: cc.Node = null;\n    public CoinNode:cc.Node = null;\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n        AudioCommon.play(TableConfig.Audio.Bgm, true);\n        this.props = [\n            TableConfig.Item[201],\n            TableConfig.Item[202],\n            TableConfig.Item[203],\n        ];\n        this.TempBtn.parent = null;\n        LoadCommon.loadBundle(\"prefabs\").then(() => {\n            LoadCommon.loadAsset({\n                path: \"res/Grid\",\n                bundleName: \"prefabs\",\n                type: cc.Prefab\n            }).then((prefab: cc.Prefab) => {\n                this.tempPrefab = prefab;\n                this.reset();\n            });\n        });\n        for (let node of this.BackGround.children) {\n            cc.tween(node)\n                .repeatForever(\n                    cc.tween(node)\n                        .to(0.2, { scaleY: 0.8 })\n                        .to(0.2, { scaleY: 1 })\n                ).start();\n        }\n        TNode.setLabelValue(this.CoinNode, `${GameConfig.CoinNum}`);\n        return true;\n    }\n\n\n    public setCoinView(num:number):void{\n        TNode.setLabelValue(this.CoinNode, `${num}`);\n        LocalStorageCommon.setInt(GameConfig.LocalKeys.CurCoin, GameConfig.CoinNum);\n    }\n\n    public reset() {\n        this.LayoutProp.destroyAllChildren();\n        this.Root.destroyAllChildren();\n        this.selectedCards.length = 0;\n        this.isEliminate = false;\n        this.cards.length = 0;\n        this.steps.length = 0;\n        this.LayoutContent.destroyAllChildren();\n        /** 初始化卡牌 */\n        this.initCard(this.tempPrefab);\n        this.initProp();\n    }\n\n    protected initProp() {\n        for (let i = 0; i < this.props.length; i++) {\n            let node = cc.instantiate(this.TempBtn);\n            node.parent = this.LayoutProp;\n            node.getComponent(TempBtn).init(this.props[i]);\n        }\n    }\n\n    /** 刷新所有卡牌 */\n    public refreshChange() {\n        if (this.isRevoke || this.isRefresh) {\n            return false;\n        }\n        this.isRefresh = true;\n        let cardIds: number[] = [];\n        for (let i = 0; i < this.cards.length; i++) {\n            cardIds.push(this.cards[i].id);\n        }\n        /** 打乱卡牌排序 */\n        TMath.shuffleArray(cardIds);\n        for (let i = 0; i < this.cards.length; i++) {\n            let card = this.cards[i];\n            let node = card.node;\n            const size = cc.size((100 / 4), (125 / 4));\n            const pos = cc.v2(card.row * size.width, -(card.col * size.height));\n            /** 动画效果 */\n            cc.tween(node)\n                .to(0.5, { position: cc.v3(this.Root.width / 2, -this.Root.height / 2, 0) })\n                .call(() => {\n                    for (let i = 0; i < cardIds.length; i++) {\n                        let card = this.cards[i];\n                        card.init(cardIds[i], card.row, card.col, card.order);\n                    }\n                })\n                .delay(0.2)\n                .to(0.5, { x: pos.x, y: pos.y })\n                .call(() => {\n                    if (i == this.cards.length - 1) {\n                        this.isRefresh = false;\n                    }\n                })\n                .start();\n        }\n        return true;\n    }\n\n    /** 撤销上一步 */\n    public revoke() {\n        if (this.isRevoke || this.isRefresh) {\n            return false;\n        }\n        if (this.steps.length <= 0) {\n            return false;\n        }\n        this.isRevoke = true;\n        let step = this.steps.pop();\n        let originPos = step.node.convertToWorldSpaceAR(cc.v2(0, 0));\n        step.node.setPosition(this.Root.convertToNodeSpaceAR(originPos));\n        step.node.parent = this.Root;\n        const size = cc.size((100 / 4), (125 / 4));\n        let pos = cc.v2(step.row * size.width, -(step.col * size.height));\n        cc.tween(step.node)\n            .to(0.2, { x: pos.x, y: pos.y })\n            .call(() => {\n                step.selected(false);\n                /** 加入全部卡牌库中 */\n                this.cards.push(step);\n                /** 从选择库中删除 */\n                this.selectedCards.splice(this.selectedCards.indexOf(step), 1);\n                /** 检测卡牌排序 */\n                this.checkCardOrder();\n                this.isRevoke = false;\n            })\n            .start();\n        return true;\n    }\n\n    /** 完成一组 */\n    public help() {\n        if (this.isRevoke || this.isRefresh) {\n            return false;\n        }\n        const index: number = TMath.random(0, this.cards.length - 1, true);\n        const id: number = this.cards[index].id;\n        let card: TempGrid = null;\n        let delIndex: number = 0;\n        for (let i = 0; i < this.cards.length; i++) {\n            card = this.cards[i];\n            if (card.id != id) {\n                continue;\n            }\n            this.cards.splice(i, 1);\n            i--;\n            /** 消除特效... */\n            card.node.destroy();\n            delIndex++;\n            if (delIndex >= 3) {\n                /** 检测卡牌排序 */\n                this.checkCardOrder();\n                break;\n            }\n        }\n        if (delIndex < 3) {\n            for (let i = 0; i < this.selectedCards.length; i++) {\n                card = this.selectedCards[i];\n                if (card.id != id) {\n                    continue;\n                }\n                this.selectedCards.splice(i, 1);\n                i--;\n                /** 消除特效... */\n                card.node.destroy();\n                delIndex++;\n                if (delIndex >= 3) {\n                    break;\n                }\n            }\n        }\n        AudioCommon.play(TableConfig.Audio.Eliminate);\n        if (this.cards.length == 0) {\n            UIVictory.instance.open();\n        }\n        return true;\n    }\n\n    /** 初始化卡牌 */\n    protected async initCard(prefab: cc.Prefab) {\n        let level: number = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurLevel);\n        let config: table.ILevel = ConfigCommon.getRow(TableConfig.Level.TName, `Level${level}`);\n        TNode.setLabelValue(this.LblLevel, config.id);\n        const cards = config.data;\n        /** 随机图标个数 */\n        const randomCount = cards.length / 3;\n        /** 卡牌id */\n        const cardIds: number[] = [];\n        for (let i = 0; i < randomCount; i++) {\n            let id = TMath.random(1, 29, true);\n            cardIds.push(id, id, id);\n        }\n        /** 打乱卡牌排序 */\n        TMath.shuffleArray(cardIds);\n        const size = cc.size((100 / 4), (125 / 4));\n        /** 创建卡牌 */\n        for (let i = 0; i < cards.length; i++) {\n            const card = cards[i];\n            const node = cc.instantiate(prefab);\n            this.Root.addChild(node, card.order);\n            const comp = node.getComponent(TempGrid);\n            /** 计算坐标 */\n            const pos = cc.v2(card.row * size.width, -(card.col * size.height));\n            node.setPosition(pos);\n            comp.init(cardIds[i], card.row, card.col, card.order);\n            this.cards.push(comp);\n            /** 动画效果 */\n            cc.tween(node)\n                .to(0.5, { position: cc.v3(this.Root.width / 2, -this.Root.height / 2, 0) })\n                .delay(0.2)\n                .to(0.5, { x: pos.x, y: pos.y })\n                .call(() => {\n                    node.on(cc.Node.EventType.TOUCH_START, this.onSelectCard.bind(this, comp), this);\n                    if (i == cards.length - 1) {\n                        /** 检测卡牌排序 */\n                        this.checkCardOrder();\n                    }\n                })\n                .start();\n        }\n    }\n\n    /**\n     * 选择卡牌\n     * @param card 选择的卡牌\n     */\n    protected onSelectCard(card: TempGrid) {\n        /** 锁住 */\n        if (card.isLock || card.isSelected || this.selectedCards.length == 7 || this.isEliminate) {\n            return;\n        }\n        /** 从全部卡牌库中删除 */\n        this.cards.splice(this.cards.indexOf(card), 1);\n        /** 加入选择库中 */\n        this.selectedCards.push(card);\n        /** 设置选中 */\n        card.selected(true);\n        /** 执行消除 */\n        this.doEliminate(card);\n        this.steps.push(card);\n        AudioCommon.play(TableConfig.Audio.Selected);\n    }\n\n    /** 检测卡牌排序 */\n    protected checkCardOrder() {\n        for (let i = 0; i < this.cards.length; i++) {\n            let isUnlock: boolean = true;\n            for (let j = 0; j < this.cards.length; j++) {\n                if (i == j) {\n                    continue;\n                }\n                /** 判断卡片间层级关系,并判断卡片距离 */\n                if (this.cards[i].order < this.cards[j].order) {\n                    if (Math.abs(this.cards[i].row - this.cards[j].row) <= 2\n                        && Math.abs(this.cards[i].col - this.cards[j].col) <= 2) {\n                        isUnlock = false;\n                    }\n                }\n            }\n            this.cards[i].setShadow(!isUnlock);\n        }\n    }\n\n    /**\n     * 执行消除\n     * @param selectCard \n     * @returns \n     */\n    protected doEliminate(selectCard: TempGrid) {\n        this.isEliminate = true;\n        this.LayoutContent.getComponent(cc.Layout).enabled = false;\n        /** 相同的最近的卡牌 */\n        let card: TempGrid = this.findEqualCard(selectCard);\n        const halfWidth = selectCard.node.width / 2;\n        cc.Tween.stopAllByTarget(selectCard.node);\n        /** 世界坐标 */\n        let worldPos: cc.Vec2 = null;\n        /** 有相同的卡牌 */\n        if (card) {\n            worldPos = card.node.convertToWorldSpaceAR(cc.v2());\n            /** 当前最后一个相同的所在索引 */\n            const index: number = this.selectedCards.indexOf(card);\n            for (let i = 0; i < this.selectedCards.length; i++) {\n                const temp: TempGrid = this.selectedCards[i];\n                temp.node.zIndex = i;\n                /** 前置位不判断 */\n                if (i <= index) {\n                    continue;\n                }\n                temp.node.zIndex = i + 1;\n                /** 将卡牌向后移动 */\n                cc.tween(temp.node)\n                    /** 相同则不偏移 */\n                    .by(0.1, { x: (selectCard.uuid == temp.uuid) ? 0 : halfWidth * 2 + 5 })\n                    .call(() => {\n                        /** 最后一个 */\n                        if (i == this.selectedCards.length - 1) {\n                            /** 将选中卡牌插入 */\n                            this.insertAction(selectCard, cc.v2(worldPos.x + (halfWidth * 2) + 5, worldPos.y), index + 1);\n                        }\n                    })\n                    .start();\n            }\n        } else {\n            let last = this.LayoutContent.children[this.LayoutContent.childrenCount - 1];\n            let x = -this.LayoutContent.width / 2 + halfWidth;\n            let y = 5;\n            if (last) {\n                x = last.x + 5 + halfWidth;\n            }\n            /** 没有卡牌按计算的坐标点插入 */\n            worldPos = this.LayoutContent.convertToWorldSpaceAR(cc.v2(x, y));\n            /** 执行动作 */\n            this.insertAction(selectCard, cc.v2(worldPos.x, worldPos.y));\n        }\n    }\n\n    /**\n     * 执行插入卡牌动作\n     * @param selectCard 选中的卡牌\n     * @param pos 插入坐标\n     * @param zIndex \n     */\n    protected insertAction(selectCard: TempGrid, pos: cc.Vec2, zIndex: number = null) {\n        let worldPos = selectCard.node.convertToWorldSpaceAR(cc.v2());\n        selectCard.node.parent = this.node;\n        selectCard.node.setPosition(selectCard.node.parent.convertToNodeSpaceAR(worldPos));\n        selectCard.node.zIndex = cc.macro.MAX_ZINDEX;\n        pos = selectCard.node.parent.convertToNodeSpaceAR(pos);\n        cc.tween(selectCard.node)\n            .to(0.2, { position: cc.v3(pos.x, pos.y, 0), })\n            .call(async () => {\n                (zIndex != null) && (selectCard.node.zIndex = zIndex);\n                selectCard.node.parent = this.LayoutContent;\n                selectCard.node.y = 5;\n                if (zIndex != null) {\n                    /** 检测是否能消除 */\n                    await this.checkEqual(selectCard.id);\n                    /** 从小到大排序 */\n                    this.selectedCards.sort((a, b) => {\n                        return a.node.zIndex - b.node.zIndex;\n                    });\n                }\n                this.LayoutContent.getComponent(cc.Layout).enabled = true;\n                /** 检测卡牌排序 */\n                this.checkCardOrder();\n                /** 消除结束 */\n                this.isEliminate = false;\n                /** 失败了 */\n                if (this.selectedCards.length == 7) {\n                    UIFail.instance.open();\n                    return;\n                }\n                /** 胜利 */\n                if (this.cards.length == 0) {\n                    UIVictory.instance.open();\n                }\n            })\n            .start();\n    };\n\n    /**\n     * 查找相同的\n     * @param selectCard 选中卡牌\n     * @returns \n     */\n    protected findEqualCard(selectCard: TempGrid) {\n        let card: TempGrid = null;\n        /** 逆序遍历 找到最近的一个相同卡牌 */\n        for (let i = this.selectedCards.length - 1; i >= 0; i--) {\n            card = this.selectedCards[i];\n            if (card.uuid != selectCard.uuid && card.id == selectCard.id) {\n                break;\n            }\n            card = null;\n        }\n        return card;\n    }\n\n    /**\n     * 检测相同\n     * @param id \n     * @returns \n     */\n    protected checkEqual(id: number): Promise<unknown> {\n        return new Promise((resolve, rejects) => {\n            let cards: TempGrid[] = [];\n            /** id相同则放入数组 */\n            for (let card of this.selectedCards) {\n                if (card.id == id) {\n                    cards.push(card);\n                }\n            }\n            /** 足够消除了 */\n            if (cards.length == 3) {\n                for (let card of cards) {\n                    let node: cc.Node = card.node;\n                    cc.Tween.stopAllByTarget(node);\n                    cc.tween(node)\n                        .to(0.1, { scale: 0 })\n                        .call(() => {\n                            const index = this.selectedCards.indexOf(card);\n                            /** 从选择库中删除 */\n                            this.selectedCards.splice(index, 1);\n                            /** 合成后的步骤删掉 */\n                            this.steps.splice(this.steps.indexOf(card), 1);\n                            node.destroy();\n                            cards.pop();\n                            if (cards.length == 0) {\n                                resolve(true);\n                            }\n                        })\n                        .start();\n                }\n                AudioCommon.play(TableConfig.Audio.Eliminate);\n            } else {\n                resolve(false);\n            }\n        });\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport { IDictSimple, IWindow, SuccessFunc, UIInitFunc, UISort } from \"../../Interface\";\nimport Tip from \"../../prefab/Tip\";\nimport LoadCommon from \"../common/LoadCommon\";\nimport TNode from \"../tools/TNode\";\n\nconst { ccclass, property } = cc._decorator;\n\nlet TempWindow: IWindow = null;\n@ccclass\nexport default class UIMgr extends cc.Component {\n\n    private _layers: cc.Node[] = null;\n    private static _windows: IDictSimple<IWindow> = null;\n    private static _instance: UIMgr = null;\n    public static get instance() {\n        return UIMgr._instance;\n    }\n\n    public static Root(sort: UISort): cc.Node {\n        return UIMgr.instance._layers[sort];\n    }\n\n    protected onLoad(): void {\n        this._layers = [];\n        UIMgr._instance = this;\n        UIMgr._windows = Object.create(null);\n\n        let layers = Object.keys(UISort);\n        for (let i = layers.length >> 1; i < layers.length; i++) {\n            const node = new cc.Node(layers[i]);\n            node.parent = this.node;\n            let widget = node.addComponent(cc.Widget);\n            widget.isAlignBottom = true;\n            widget.isAlignTop = true;\n            widget.isAlignLeft = true;\n            widget.isAlignRight = true;\n            widget.top = 0;\n            widget.bottom = 0;\n            widget.left = 0;\n            widget.right = 0;\n            this._layers.push(node);\n        }\n    }\n\n    protected update(dt: number): void {\n        for (let key in UIMgr._windows) {\n            TempWindow = UIMgr._windows[key];\n            if (!TempWindow || !TempWindow.active || !TempWindow.update) {\n                continue;\n            }\n            TempWindow.update(dt);\n        }\n    }\n\n    /**\n     * 打开界面\n     * @param window \n     * @param init \n     * @param call \n     */\n    public static async open(window: IWindow, init: UIInitFunc, call?: SuccessFunc) {\n        let winName = window.name;\n        if (this._windows[winName]) {\n            this.__open(this._windows[winName], init, call);\n        } else {\n            this._windows[winName] = window;\n            /** 加载依赖分包资源 */\n            let dependencies = window.dependencies;\n            let bundleName = window.bundle || 'ui';\n            if (dependencies) {\n                LoadCommon.loadBundles(dependencies).then((success: boolean) => {\n                    LoadCommon.loadAsset({ path: `prefabs/${winName}`, bundleName: bundleName, type: cc.Prefab }).then((prefab: cc.Prefab) => {\n                        if (!prefab) {\n                            console.log(`[UIMgr][open] window：[${winName}]，load filed`);\n                            return;\n                        }\n                        this._open(window, prefab, init, call);\n                    });\n                });\n            }\n        }\n    }\n\n    /**\n     * 创建ui并打开\n     * @param window \n     * @param prefab \n     * @param init \n     * @param call \n     * @returns \n     */\n    private static _open(window: IWindow, prefab: cc.Prefab, init: UIInitFunc, call?: SuccessFunc) {\n        if (prefab == null) {\n            if (call != null) call(false);\n            return;\n        }\n        let root = this.Root(window.sort);\n        let winNode = cc.instantiate(prefab);\n        window.node = winNode;\n        root.addChild(winNode);\n        winNode.setParent(root);\n        TNode.bindNodeTreeAndButton(window, winNode);\n        this.__open(window, init, call);\n    }\n\n    /**\n     * 打开界面\n     * @param window \n     * @param winNode \n     * @param init \n     * @param call \n     */\n    private static __open(window: IWindow, init: UIInitFunc, call?: SuccessFunc) {\n        let success: boolean = window.node != null;\n        if (success) {\n            success = init.call(window, window.node, true);\n        }\n        if (success) {\n            window.node && (window.node.active = true);\n            window.active = true;\n        } else {\n            window.node && window.node.destroy();\n            window.active = false;\n        }\n        call && call(success);\n    }\n\n    /**\n     * 关闭界面\n     * @param winName \n     * @param destroy \n     * @param call \n     */\n    static close(winName: string, destroy: boolean, call?: () => void): void {\n        let window: IWindow = this._windows[winName];\n        if (destroy) {\n            window.node && window.node.destroy();\n            window.active = false;\n            delete this._windows[winName];\n        } else {\n            window.node && (window.node.active = false);\n            window.active = false;\n        }\n        call && call();\n    }\n\n    /**\n     * 提示\n     * @param content 内容\n     */\n    static showTip(content: string): void {\n        LoadCommon.loadBundle(\"prefabs\").then(() => {\n            LoadCommon.loadAsset({\n                path: \"res/Tip\",\n                bundleName: \"prefabs\",\n                type: cc.Prefab\n            }).then((prefab: cc.Prefab) => {\n                const node = cc.instantiate(prefab);\n                node.parent = this.Root(UISort.TOP);\n                node.setPosition(0, 0);\n                node.getComponent(Tip).init(content);\n            });\n        });\n    }\n\n}\n","import UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\n\nexport default class UITemp implements IWindow {\n\n    private static _instance: UITemp = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UITemp();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UITemp\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n\n        return true;\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","import ConfigCommon from \"../core/common/ConfigCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\nimport UIMain from \"./UIMain\";\n\nexport default class UIVictory implements IWindow {\n\n    private static _instance: UIVictory = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIVictory();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIVictory\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n        let curLevel = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurLevel);\n        console.log(\"curlevel =====\"+curLevel);\n        let config: table.ILevel = ConfigCommon.getRow(TableConfig.Level.TName, `Level${curLevel + 1}`);\n        console.log(config);\n        if (config) {\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.CurLevel, ++curLevel);\n        }\n        return true;\n    }\n\n    protected onClick_BtnConfirm() {\n        GameConfig.CoinNum += 50;\n        UIMain.instance.setCoinView(GameConfig.CoinNum);\n        LocalStorageCommon.setInt(GameConfig.LocalKeys.CurCoin, GameConfig.CoinNum);\n        UIMain.instance.reset();\n        this.close();\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n"],"file":"index.js"}