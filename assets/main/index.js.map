{"version":3,"sources":["assets/scripts/core/common/AudioCommon.ts","assets/scripts/core/common/ConfigCommon.ts","assets/scripts/config/GameConfig.ts","assets/scripts/core/common/ImageCommon.ts","assets/scripts/Interface.ts","assets/scripts/core/system/ItemSystem.ts","assets/scripts/core/structure/LinkedList.ts","assets/scripts/core/common/LoadCommon.ts","assets/scripts/scene/Loading.ts","assets/scripts/core/common/LocalStorageCommon.ts","assets/scripts/scene/Main.ts","assets/scripts/core/structure/Stack.ts","assets/scripts/core/tools/TAction.ts","assets/scripts/core/tools/TMath.ts","assets/scripts/core/tools/TNode.ts","assets/scripts/config/TableConfig.ts","assets/scripts/prefab/TempBtn.ts","assets/scripts/prefab/TempGrid.ts","assets/scripts/prefab/Tip.ts","assets/scripts/ui/UIEditor.ts","assets/scripts/ui/UIFail.ts","assets/scripts/ui/UIMain.ts","assets/scripts/core/ui/UIMgr.ts","assets/scripts/ui/UITemp.ts","assets/scripts/ui/UIVictory.ts"],"names":["ConfigCommon_1","require","LoadCommon_1","LocalStorageCommon_1","AudioCommon","init","default","loadBundle","_a","sent","this","audios","getTable","play","audioName","loop","type","_playMusic","_playEffect","isMusicPlaying","lastAudioName","isMusicOpen","audio","loadAsset","path","bundleName","cc","AudioClip","then","clip","audioEngine","playMusic","_this","isEffectOpen","effectPlayingIds","playEffect","effectLastTime","Date","getTime","lastTime","interval","stop","stopMusic","audioId","undefined","stopEffect","openMusic","_setAudioState","setInt","closeMusic","openEffect","closeEffect","stage","getInt","isCanPlayMusic","isCanPlayEffect","isMusic","isPlay","stopAllEffects","Object","create","exports","ConfigCommon","_loadConfig","Promise","resolve","resources","load","JsonAsset","error","assets","console","log","key","json","configs","isExistTable","tableName","getRow","rowName","table","getCol","colName","row","GameConfig","isEditor","Props","201","202","203","LocalKeys","CurLevel","ResetTime","CurCoin","CurTon","CoinNum","TonNum","window","ImageCommon","images","setImageToTarget","target","imgId","sprite","Node","getComponent","Sprite","addComponent","loadImageToSprite","loadSuccess","isValid","bean","getById","bundle","SpriteFrame","res","spriteFrame","loadImg","img","loadImgToTarget","spf","UISort","ItemSystem","defineProperty","get","localData","getObject","localStorageKey","items","initItems","TableConfig","Item","TName","isUpdate","localStorage","id","saveData","setObject","addItemByList","list","isShowGet","length","item","_i","list_1","info","addItem","count","push","itemId","isPassMaxLimit","Math","min","getMaxCountById","reduceItem","isNotEnoughTip","isNotEnough","isTip","getCountById","max","maxCount","getItems","LoadCommon","caches","bundles","assetManager","getBundle","err","loadBundles","success","index","option","asset","loadRemote","object","url","AudioCommon_1","ImageCommon_1","ItemSystem_1","_decorator","ccclass","Loading","property","_super","__extends","prototype","onLoad","time","Number","props","i","today","setHours","setMinutes","setSeconds","setMilliseconds","director","loadScene","__decorate","Component","LocalStorageCommon","getString","defaultVal","sys","getItem","setString","val","setItem","warn","obj","str","JSON","parse","stringify","num","isNaN","toString","UIEditor_1","UIMain_1","Main","start","instance","open","Stack","_stacks","_index","data","pop","TAction","shake","node","shakeRatio","offset","tween","by","x","y","fadeIn","callback","oldOpacity","opacity","to","call","fadeOut","scaleIn","easing","oldScale","scale","scaleOut","TMath","random","round","objectValToArray","objs","array","shuffleArray","j","floor","randomArray","randomCount","results","arrayCopy","__spreadArrays","randomVal","splice","randomStr","result","strLength","charAt","removeItem","temp","concat","weightRandomIdx","weights","tw","rw","sw","ew","angleTowards","current","speed","dAngle","dir","abs","sign","createQueueCircle","r","total","quarter","arr","sin","PI","sqrt","createQueueHeart","unit","radian","pow","cos","TNode","bindNodeTreeAndButton","tclass","name","children","startsWith","Button","Toggle","on","childrenCount","setLabelValue","lbl","Label","RichText","string","setImgToTarget","Audio","Bgm","Selected","Eliminate","Image","101","102","Level","Level1","Level2","Level3","Level4","Level5","Level6","TNode_1","UIMgr_1","TempBtn","apply","arguments","config","SpIcon","LblName","LblCount","curCount","use","icon","showTip","setCoinView","isCan","revoke","help","refreshChange","TempGrid","SpShadow","col","order","isLock","isSelected","setShadow","isShow","active","selected","Tip","bg","lblContent","content","height","delay","destroy","displayName","Interface_1","UIEditor","sort","NORMAL","dependencies","Root","SpDot","EditBoxOrder","EditBoxLevel","curCards","curNodes","isCreate","isDelete","editBoxOrder","editBoxLevel","isCanCreate","tempPrefab","_instance","EditBox","parent","contentSize","getContentSize","size","width","instantiate","zIndex","macro","MAX_ZINDEX","checkCardOrder","Prefab","prefab","EventType","TOUCH_START","createCard","TOUCH_MOVE","event","_loop_1","point","this_1","getBoundingBoxToWorld","contains","getLocation","card_1","node_1","setPosition","getPosition","indexOf","update","dt","isUnlock","getChildByName","onClick_ToggleCreate","onClick_ToggleDelete","close","UIFail","onClick_BtnConfirm","reset","TMath_1","TempBtn_1","TempGrid_1","UIFail_1","UIVictory_1","UIMain","cards","selectedCards","isEliminate","steps","LayoutContent","isRevoke","LayoutProp","isRefresh","LblLevel","BackGround","CoinNode","tonBtn","tonNum","tonView","BuyBtn_1","BuyBtn_2","BuyBtn_3","BuyBtn_4","_bTonInit","closeTonBtn","loadTelegram","_initTonUI","isConnected","_connectUI","connected","updateConnect","account","address","openModal","disconnect","repeatForever","scaleY","self","OnTonClick","setTonNumView","destroyAllChildren","initCard","initProp","cardIds","card","pos","v2","position","v3","i_1","step","originPos","convertToWorldSpaceAR","convertToNodeSpaceAR","delIndex","level","_loop_2","this_2","addChild","comp","onSelectCard","bind","doEliminate","selectCard","Layout","enabled","findEqualCard","halfWidth","Tween","stopAllByTarget","worldPos","index_1","_loop_3","this_3","uuid","insertAction","last","__awaiter","checkEqual","a","b","_loop_4","_b","cards_1","Tip_1","TempWindow","UIMgr","_layers","_windows","layers","keys","widget","Widget","isAlignBottom","isAlignTop","isAlignLeft","isAlignRight","top","bottom","left","right","winName","__open","bundleName_1","_open","root","winNode","setParent","TOP","UITemp","UIVictory","curLevel"],"mappings":"q+DACA,IAAAA,EAAAC,EAAA,kBACAC,EAAAD,EAAA,gBACAE,EAAAF,EAAA,wBAGAG,EAAA,WAAA,SAAAA,KAwLA,OAtKwBA,EAAAC,KAAA,4FAChB,KAAA,EAAA,MAAA,CAAA,EAAAH,EAAAI,QAAAC,WAAA,iBAEA,OAFAC,EAAAC,OACAC,KAAAC,OAAAX,EAAAM,QAAAM,SAAA,SACA,CAAA,GAAA,SAQUR,EAAAS,KAAA,SAAAC,EAAAC,QAAwB,IAAAA,IAAAA,GAAA,GAGlC,GADAL,KAAAC,OAAAG,GACAE,KACIN,KAAAO,WAAAH,EAAAC,GAEAL,KAAAQ,YAAAJ,EAAAC,IASOX,EAAAa,WAAA,SAAAH,EAAAC,GACX,QADyC,IAAAA,IAAAA,GAAA,KACzCL,KAAAS,gBAAAT,KAAAU,eAAAN,KAGAJ,KAAAU,cAAAN,EAEAJ,KAAAW,eAAA,CAIA,IAAAC,EAAAZ,KAAAC,OAAAG,GACAZ,EAAAI,QAAAiB,UAAA,CAAAC,KAAAF,EAAAE,KAAAC,WAAA,QAAAT,KAAAU,GAAAC,YAAAC,KAAA,SAAAC,GACIH,GAAAI,YAAAC,UAAAF,EAAAd,KAEJL,KAAAS,gBAAA,IAQWf,EAAAc,YAAA,SAAAJ,EAAAC,GAAf,IAAAiB,EAAAtB,KAEI,QAF0C,IAAAK,IAAAA,GAAA,GAE1CL,KAAAuB,eAAA,CAIA,IAAAX,EAAAZ,KAAAC,OAAAG,GACAD,EAAA,WACIX,EAAAI,QAAAiB,UAAA,CAAAC,KAAAF,EAAAE,KAAAC,WAAA,QAAAT,KAAAU,GAAAC,YAAAC,KAAA,SAAAC,GACIG,EAAAE,iBAAApB,GAAAY,GAAAI,YAAAK,WAAAN,EAAAd,GACAiB,EAAAI,eAAAtB,IAAA,IAAAuB,MAAAC,aAGRC,EAAA7B,KAAA0B,eAAAtB,GACAyB,GACI,IAAAF,MAAAC,UAAAC,GAAA,IAAAjB,EAAAkB,UACI3B,IAIRA,MAOUT,EAAAqC,KAAA,SAAA3B,GAGV,GAAA,GADAJ,KAAAC,OAAAG,GACAE,KACIU,GAAAI,YAAAY,YACAhC,KAAAU,cAAA,GACAV,KAAAS,gBAAA,MACG,CACH,IAAAwB,EAAAjC,KAAAwB,iBAAApB,GACA,GAAA8B,MAAAD,EACI,OAEJjB,GAAAI,YAAAe,WAAAF,KAKMvC,EAAA0C,UAAA,WACVpC,KAAAqC,gBAAA,GAAA,GACA5C,EAAAG,QAAA0C,OAAA,0BAAA,IAIU5C,EAAA6C,WAAA,WACVvC,KAAAS,gBAAA,EACAT,KAAAqC,gBAAA,GAAA,GACA5C,EAAAG,QAAA0C,OAAA,0BAAA,IAIU5C,EAAA8C,WAAA,WACVxC,KAAAqC,gBAAA,GAAA,GACA5C,EAAAG,QAAA0C,OAAA,2BAAA,IAIU5C,EAAA+C,YAAA,WACVzC,KAAAqC,gBAAA,GAAA,GACA5C,EAAAG,QAAA0C,OAAA,2BAAA,IAIU5C,EAAAiB,YAAA,WACV,IAAA+B,EAAAjD,EAAAG,QAAA+C,OAAA,2BAAA,GAQA,OAPA,GAAAD,IACIjD,EAAAG,QAAA0C,OAAA,0BAAA,GACAI,EAAA,GAEJ,MAAA1C,KAAA4C,iBACI5C,KAAA4C,eAAA,GAAAF,GAEJ1C,KAAA4C,gBAIUlD,EAAA6B,aAAA,WACV,IAAAmB,EAAAjD,EAAAG,QAAA+C,OAAA,4BAAA,GAQA,OAPA,GAAAD,IACIjD,EAAAG,QAAA0C,OAAA,2BAAA,GACAI,EAAA,GAEJ,MAAA1C,KAAA6C,kBACI7C,KAAA6C,gBAAA,GAAAH,GAEJ1C,KAAA6C,iBAQWnD,EAAA2C,eAAA,SAAAS,EAAAC,GACXD,EACI9C,KAAA4C,eAAAG,EAEA/C,KAAA6C,gBAAAE,EAEJA,EAQAD,GAAA9C,KAAAU,eACIV,KAAAO,WAAAP,KAAAU,eARAoC,EACI9B,GAAAI,YAAAY,YAEAhB,GAAAI,YAAA4B,kBA5KKtD,EAAAkD,eAAA,KAEAlD,EAAAmD,gBAAA,KAEAnD,EAAAgB,cAAA,GAEAhB,EAAAgC,eAAAuB,OAAAC,OAAA,MAEAxD,EAAA8B,iBAAAyB,OAAAC,OAAA,MAEAxD,EAAAe,eAAA,KAEAf,EAAAO,OAAA,KAyKrBP,EAxLA,GAAqByD,EAAAvD,QAAAF,6oDCHrB,IAAA0D,EAAA,WAAA,SAAAA,KAoFA,OA/EwBA,EAAAzD,KAAA,mGAEhB,MAAA,CAAA,EAAAK,KAAAqD,sBACA,OADAvD,EAAAC,OACA,CAAA,GAAA,SAIWqD,EAAAC,YAAA,WAAf,IAAA/B,EAAAtB,KACI,OAAA,IAAAsD,QAAA,SAAAC,GACIvC,GAAAwC,UAAAC,KAAA,gBAAAzC,GAAA0C,UAAA,SAAAC,EAAAC,GACI,GAAAD,EACIE,QAAAC,IAAA,4CAAAH,OADJ,CAIA,IAAA,IAAAI,KAAAH,EAAAI,KACI1C,EAAA2C,QAAAF,GAAAH,EAAAI,KAAAD,GAEJR,EAAAjC,EAAA2C,eAUEb,EAAAc,aAAA,SAAAC,GACV,QAAAnE,KAAAiE,QAAAE,IAQUf,EAAAlD,SAAA,SAAAiE,GAEV,OADAnE,KAAAiE,QAAAE,KAEIN,QAAAC,IAAA,mCAAAK,EAAA,kBACA,OAWMf,EAAAgB,OAAA,SAAAD,EAAAE,GACV,IAAAC,EAAAtE,KAAAE,SAAAiE,GACA,OAAAG,EACAA,EAAAD,KAEIR,QAAAC,IAAA,iCAAAK,EAAA,UAAAE,EAAA,kBACA,MAJQ,MAeFjB,EAAAmB,OAAA,SAAAJ,EAAAE,EAAAG,GACV,IAAAC,EAAAzE,KAAAoE,OAAAD,EAAAE,GACA,OAAAI,EACAA,EAAAD,KAEIX,QAAAC,IAAA,iCAAAK,EAAA,UAAAE,EAAA,UAAAG,EAAA,kBACA,MAJM,MAzEGpB,EAAAa,QAAAhB,OAAAC,OAAA,MAkFrBE,EApFA,GAAqBD,EAAAvD,QAAAwD,iHCDrB,IAAAsB,EAAA,IAAqB,WAGjB1E,KAAA2E,SAAA,EAGA3E,KAAA4E,MAAA,CAEIC,IAAA,EAEAC,IAAA,EAEAC,IAAA,GAGJ/E,KAAAgF,UAAA,CAEIC,SAAA,WAEAC,UAAA,YAEAC,QAAA,UAEAC,OAAA,UAEJpF,KAAAqF,QAAA,IACArF,KAAAsF,OAAA,IAIJC,OAAA,WAAAb,oiDC/BA,IAAApF,EAAAC,EAAA,kBACAC,EAAAD,EAAA,gBAGAiG,EAAA,WAAA,SAAAA,KA6FA,OAxFwBA,EAAA7F,KAAA,2EAEhB,OADAK,KAAAyF,OAAAnG,EAAAM,QAAAM,SAAA,SACA,CAAA,GAAA,QAQUsF,EAAAE,iBAAA,SAAAC,EAAAC,GACV,GAAAD,GAAAC,EAAA,CACA,IAAAC,EAAA,KACAF,aAAA3E,GAAA8E,MACID,EAAAF,EAAAI,aAAA/E,GAAAgF,WAEIH,EAAAF,EAAAM,aAAAjF,GAAAgF,SAEDL,aAAA3E,GAAAgF,SACHH,EAAAF,GAEJE,GACA7F,KAAAkG,kBAAAL,EAAAD,KAUUJ,EAAAU,kBAAA,SAAAL,EAAAD,EAAAO,GACV,IAAAP,IAAA5E,GAAAoF,QAAAP,GACI,OAAA,EAEJ,IAAAQ,EAAArG,KAAAsG,QAAAV,GACA,QAAAS,IAGA7G,EAAAI,QAAAiB,UAAA,CAAAC,KAAAuF,EAAAvF,KAAAC,WAAAsF,EAAAE,OAAAjG,KAAAU,GAAAwF,cAAAtF,KAAA,SAAAuF,GACIZ,EAAAa,YAAAD,EACAN,GAAAA,EAAAN,MAEJ,IAQUL,EAAAmB,QAAA,SAAAf,EAAAO,GACV,IAAAS,EAAA5G,KAAAsG,QAAAV,GACApG,EAAAI,QAAAiB,UAAA,CAAAC,KAAA8F,EAAA9F,KAAAC,WAAA6F,EAAAL,OAAAjG,KAAAU,GAAAwF,cAAAtF,KAAA,SAAAuF,GACIN,GAAAA,EAAAM,MASMjB,EAAAqB,gBAAA,SAAAjB,EAAAD,EAAAQ,GACVP,GAGA5F,KAAA2G,QAAAf,EAAA,SAAAkB,GACInB,aAAA3E,GAAAgF,OACIL,EAAAe,YAAAI,EACGnB,aAAA3E,GAAA8E,QACHH,EAAAA,EAAAI,aAAA/E,GAAAgF,SACAU,YAAAI,GAEJX,GAAAA,OASMX,EAAAc,QAAA,SAAAV,GACV,OAAA5F,KAAAyF,OAAAG,IAxFaJ,EAAAC,OAAA,KA2FrBD,EA7FA,GAAqBrC,EAAAvD,QAAA4F,6OCHrB,SAAAuB,GAEIA,EAAAA,EAAA,WAAA,GAAA,aAEAA,EAAAA,EAAA,OAAA,GAAA,SAEAA,EAAAA,EAAA,IAAA,GAAA,MAEAA,EAAAA,EAAA,OAAA,GAAA,SAEAA,EAAAA,EAAA,MAAA,GAAA,QAVJ,CAWA5D,EAAA4D,SAAA5D,EAAA4D,OAAA,uKCZA,IAAAzH,EAAAC,EAAA,0BACAE,EAAAF,EAAA,gCAEAyH,EAAA,WAAA,SAAAA,KA2KA,OAjKI/D,OAAAgE,eAAAD,EAAA,eAAA,CAAAE,IAAA,WAQI,OAPAlH,KAAAmH,YACInH,KAAAmH,UAAA1H,EAAAG,QAAAwH,UAAApH,KAAAqH,gBAAApE,OAAAC,OAAA,OAEAlD,KAAAmH,UAAAG,QACItH,KAAAmH,UAAAG,MAAArE,OAAAC,OAAA,QAGRlD,KAAAmH,2CAMUH,EAAArH,KAAA,WAGV,OADAK,KAAAuH,YACAjE,QAAAC,SAAA,IAIayD,EAAAO,UAAA,WACbvH,KAAAiE,QAAA3E,EAAAM,QAAAM,SAAAsH,YAAAC,KAAAC,OACA,IAAAC,GAAA,EACA,IAAA,IAAA5D,KAAA/D,KAAAiE,QAEIjE,KAAA4H,aAAAN,MAAAtH,KAAAiE,QAAAF,GAAA8D,MAGA7H,KAAA4H,aAAAN,MAAAtH,KAAAiE,QAAAF,GAAA8D,IAAA,EACAF,GAAA,GAEJA,GACI3H,KAAA8H,YAKSd,EAAAc,SAAA,WACbrI,EAAAG,QAAAmI,UAAA/H,KAAAqH,gBAAArH,KAAA4H,eAQUZ,EAAAgB,cAAA,SAAAC,EAAAC,GACV,QAD6C,IAAAA,IAAAA,GAAA,GAC7CD,KAAAA,EAAAE,QAAA,GAAA,CAKA,IAFA,IAAAb,EAAA,GACAc,EAAA,KACAC,EAAA,EAAAC,EAAAL,EAAAI,EAAAC,EAAAH,OAAAE,IAAA,CAAK,IAAAE,EAAAD,EAAAD,IACDD,EAAApI,KAAAwI,QAAAD,EAAAV,GAAAU,EAAAE,SAIAnB,EAAAoB,KAAAN,GAGJpI,KAAA8H,aAaUd,EAAAwB,QAAA,SAAAG,EAAAF,GACV,OAAAzI,KAAA4I,eAAAD,EAAAF,IAAAA,GAAA,EACI,MAEJA,EAAAI,KAAAC,IAAA9I,KAAA+I,gBAAAJ,IAAAF,EAAAA,GACAzI,KAAA4H,aAAAN,MAAAqB,IAAAF,EACA,CAAAZ,GAAAc,EAAAF,MAAAA,KASUzB,EAAAgC,WAAA,SAAAL,EAAAF,EAAAQ,QAA0C,IAAAA,IAAAA,GAAA,GACpDjJ,KAAAkJ,YAAAP,EAAAF,EAAAQ,IAAAR,GAAA,IAGAzI,KAAA4H,aAAAN,MAAAqB,IAAAF,EACAzI,KAAA8H,aAUUd,EAAAkC,YAAA,SAAAP,EAAAF,EAAAU,GACV,YADqD,IAAAA,IAAAA,GAAA,GACrDnJ,KAAAoJ,aAAAT,GAAAF,EAAA,GAeUzB,EAAA4B,eAAA,SAAAD,EAAAF,GACV,IAAAY,EAAArJ,KAAA+I,gBAAAJ,GACA,OAAA,GAAAU,GAAAA,GAAAZ,GAQUzB,EAAA+B,gBAAA,SAAAJ,GACV,IAAAP,EAAApI,KAAAsG,QAAAqC,GACA,GAAAP,EAGA,OAAAA,EAAAkB,UAIUtC,EAAAuC,SAAA,WACV,OAAAvJ,KAAA4H,aAAAN,OAQUN,EAAAoC,aAAA,SAAAT,GACV,OAAA3I,KAAA4H,aAAAN,MAAAqB,IAAA,GAQU3B,EAAAV,QAAA,SAAAqC,GACV,OAAA3I,KAAAiE,QAAA0E,IArKa3B,EAAAK,gBAAA,oBAEAL,EAAAG,UAAA,KAiBAH,EAAA/C,QAAA,KAqJrB+C,EA3KA,GAAqB7D,EAAAvD,QAAAoH,yQCFrB,+KCCA,IAAAwC,EAAA,WAAA,SAAAA,KA0GA,OAjGkBA,EAAA3J,WAAA,SAAAkB,GACV,IAAA0I,EAAAzJ,KAAA0J,QACAnD,EAAAvF,GAAA2I,aAAAC,UAAA7I,GACA,OAAA,MAAAwF,EACIjD,QAAAC,QAAAgD,IAEJkD,EAAA1I,KACI0I,EAAA1I,GAAA,IAAAuC,QAAA,SAAAC,GACIvC,GAAA2I,aAAA9J,WAAAkB,EAAA,SAAA8I,EAAAtD,UACIkD,EAAA1I,GACAwC,GAAAA,EAAAgD,QAIZkD,EAAA1I,KAQUyI,EAAAM,YAAA,SAAAJ,GAAd,IAAApI,EAAAtB,KACI,OAAA,IAAAsD,QAAA,SAAAC,GAGI,IAFA,IAAAkF,EAAAiB,EAAAvB,OACA4B,GAAA,EACAC,EAAA,EAAAA,EAAAN,EAAAvB,OAAA6B,IAAA,CACI,IAAAjJ,EAAA2I,EAAAM,GACA,MAAAjJ,GACIC,GAAA2I,aAAAC,UAAA7I,GAWJ,KADA0H,GACAlF,GAA2BA,EAAAwG,GATnBzI,EAAAzB,WAAAkB,GAAAG,KAAA,SAAAqF,GAEIA,IAAawD,GAAA,GACb,KAFAtB,GAEAlF,GAA2BA,EAAAwG,SAgBrCP,EAAAI,UAAA,SAAA7I,GACV,IAAAwF,EAAA,KAQA,OAPAA,IAIQA,EAHJxF,GAAA,aAAAA,EAGIC,GAAA2I,aAAAC,UAAA7I,GAFAC,GAAAwC,WAKR+C,GAQUiD,EAAA3I,UAAA,SAAAoJ,GACV,IAAA1D,EAAAvG,KAAA4J,UAAAK,EAAAlJ,YACAmJ,EAAA3D,EAAAW,IAAA+C,EAAAnJ,KAAAmJ,EAAA3J,MACA,OAAA4J,EACI5G,QAAAC,QAAA2G,GAEJ,IAAA5G,QAAA,SAAAC,GACIgD,EAAA9C,KAAAwG,EAAAnJ,KAAAmJ,EAAA3J,KAAA,SAAAuJ,EAAAK,GACI3G,EAAA2G,QAUEV,EAAAW,WAAA,SAAAC,GACV,MAAAA,EAAAH,SACIG,EAAAH,OAAA,IAEI,IAAAI,EAAAD,EAAAC,IAAAJ,EAAAG,EAAAH,OACR,OAAA,IAAA3G,QAAA,SAAAC,GACIvC,GAAA2I,aAAAQ,WAAAE,EAAAJ,EAAA,SAAAJ,EAAAK,GACI3G,GAAAA,EAAA2G,QAnGKV,EAAAE,QAAAzG,OAAAC,OAAA,MAwGrBsG,EA1GA,GAAqBrG,EAAAvD,QAAA4J,2tECHrB,IAAAc,EAAA/K,EAAA,8BACAD,EAAAC,EAAA,+BACAgL,EAAAhL,EAAA,8BACAE,EAAAF,EAAA,qCACAiL,EAAAjL,EAAA,6BAEMO,EAAAkB,GAAAyJ,WAAAC,EAAA5K,EAAA4K,QAGNC,GAHM7K,EAAA8K,SAGN,SAAAC,GAAA,SAAAF,mDAoCA,OApCqCG,EAAAH,EAAAE,GAEjBF,EAAAI,UAAAC,OAAA,wGACZ,KAAA,EAAA,MAAA,CAAA,EAAA1L,EAAAM,QAAAD,eACA,OADAG,EAAAC,OACA,CAAA,EAAAwK,EAAA3K,QAAAD,eACA,OADAG,EAAAC,OACA,CAAA,EAAAuK,EAAA1K,QAAAD,eACA,OADAG,EAAAC,OACA,CAAA,EAAAyK,EAAA5K,QAAAD,eAGA,GAHAG,EAAAC,OAEIkL,EAAAC,OAAAzL,EAAAG,QAAA+C,OAAA+B,WAAAM,UAAAE,aAAA,GACJ,IAAAvD,MAAAC,WAAAqJ,EAAA,CAUI,IAPIE,EAAA,CACA3D,YAAAC,KAAA,KACAD,YAAAC,KAAA,KACAD,YAAAC,KAAA,MAIJ2D,EAAA,EAAAA,EAAAD,EAAAhD,OAAAiD,IACIvH,QAAAC,IAAA,MAAAqH,EAAAC,IACAZ,EAAA5K,QAAA4I,QAAA2C,EAAAC,GAAA1G,WAAAE,MAAAuG,EAAAC,MAGAC,EAAA,IAAA1J,MACJ2J,SAAA,GACAD,EAAAE,WAAA,GACAF,EAAAG,WAAA,GACAH,EAAAI,gBAAA,GACAhM,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAE,UAAAmG,EAAAzJ,UAAA,cAEJiC,QAAAC,IAAA,4BAEA9C,GAAA0K,SAAAC,UAAA,kBAjCaC,EAAA,CADpBlB,GACoBC,GAArB,CAAA3J,GAAA6K,YAAqB1I,EAAAvD,QAAA+K,wZCPrB,IAAAmB,EAAA,WAAA,SAAAA,KA8EA,OAvEkBA,EAAAC,UAAA,SAAAhI,EAAAiI,GACV,YADiC,IAAAA,IAAAA,EAAA,IACjChL,GAAAiL,IAAArE,aAAAsE,QAAAnI,IAAAiI,GAAA,MAQUF,EAAAK,UAAA,SAAApI,EAAAqI,GACVrI,EAIA/C,GAAAiL,IAAArE,aAAAyE,QAAAtI,EAAAqI,GAHIvI,QAAAyI,KAAA,6CAAAvI,EAAA,2BAUM+H,EAAA1E,UAAA,SAAArD,EAAAiI,QAA0B,IAAAA,IAAAA,EAAA,MACpC,IAAAO,EAAA,KACAC,EAAAxM,KAAA+L,UAAAhI,GACA,IAAAyI,EAAU,OAAAR,GAAA,KACV,IACIO,EAAAE,KAAAC,MAAAF,GACF,MAAA7I,GACE,MAAA,EAEJ,OAAA4I,GAQUT,EAAA/D,UAAA,SAAAhE,EAAAwI,GACV,IAAAC,EAAA,GACA,IACIA,EAAAC,KAAAE,UAAAJ,GACF,MAAA5I,GACE,MAAA,EAEJ3D,KAAAmM,UAAApI,EAAAyI,IAOUV,EAAAnJ,OAAA,SAAAoB,EAAAiI,QAAoB,IAAAA,IAAAA,EAAA,GAC9B,IAAAQ,EAAAxM,KAAA+L,UAAAhI,GACA,IAAAyI,EAAU,OAAAR,GAAA,EACV,IAAAY,EAAA1B,OAAAsB,GAIA,OAHAK,MAAAD,IACI/I,QAAAF,MAAA,6CAAAI,EAAA,cAAAyI,EAAA,WAEJI,GAQUd,EAAAxJ,OAAA,SAAAyB,EAAA6I,GACV5M,KAAAmM,UAAApI,EAAA6I,EAAAE,aAGRhB,EA9EA,w2BCDA,IAAArM,EAAAF,EAAA,qCACAwN,EAAAxN,EAAA,kBACAyN,EAAAzN,EAAA,gBAEMO,EAAAkB,GAAAyJ,WAAAC,EAAA5K,EAAA4K,QAWNuC,GAXMnN,EAAA8K,SAWN,SAAAC,GAAA,SAAAoC,mDA0GA,OA1GkCnC,EAAAmC,EAAApC,GAEpBoC,EAAAlC,UAAAC,OAAA,aAIAiC,EAAAlC,UAAAmC,MAAA,YAEN,GADAzN,EAAAG,QAAA+C,OAAA+B,WAAAM,UAAAC,UAAA,IAEIxF,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAC,SAAA,GAEJpB,QAAAC,IAAA,eAAAY,WAAAM,UAAAC,UAEAP,WAAAW,QAAA5F,EAAAG,QAAA+C,OAAA+B,WAAAM,UAAAG,SAAA,IACA,GAAAT,WAAAW,UACI5F,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAG,QAAA,KACAT,WAAAW,QAAA,KAEJxB,QAAAC,IAAA,cAAAY,WAAAW,SAEAX,WAAAY,OAAA7F,EAAAG,QAAA+C,OAAA+B,WAAAM,UAAAI,QAAA,IACA,GAAAV,WAAAY,SACI7F,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAI,OAAA,IACAV,WAAAY,OAAA,IAEJzB,QAAAC,IAAA,cAAAY,WAAAY,QAEAZ,WAAAC,SAEIoI,EAAAnN,QAAAuN,SAAAC,OACAJ,EAAApN,QAAAuN,SAAAC,QA9BSxB,EAAA,CADpBlB,GACoBuC,GAArB,CAAAjM,GAAA6K,YAAqB1I,EAAAvD,QAAAqN,sQCbrB,IAAAI,EAAA,WAAA,SAAAA,IAEYrN,KAAAsN,QAAArK,OAAAC,OAAA,MACAlD,KAAAuN,OAAA,EAqBZ,OAnBItK,OAAAgE,eAAAoG,EAAAtC,UAAA,SAAA,CAAA7D,IAAA,WACI,OAAAlH,KAAAuN,wCAGJF,EAAAtC,UAAArC,KAAA,SAAA8E,GAEI,OADAxN,KAAAsN,QAAAtN,KAAAuN,UAAAC,EACAxN,MAGJqN,EAAAtC,UAAA0C,IAAA,WACI,GAAAzN,KAAAuN,QAAA,EACI,KAAA,uBAEJvN,KAAAuN,SACA,IAAAC,EAAAxN,KAAAsN,QAAAtN,KAAAuN,QAEA,cADAvN,KAAAsN,QAAAtN,KAAAuN,QACAC,GAGRH,EAxBA,2KCFA,IAAAK,EAAA,WAAA,SAAAA,KAkFA,OA3EWA,EAAA3C,UAAA4C,MAAA,SAAAC,EAAAC,QAAqB,IAAAA,IAAAA,EAAA,IACxB,IAAAC,EAAA,GAAAD,EACA7M,GAAA+M,MAAAH,GACKI,GAAA,IAAA,CAAAC,EAAAH,EAAAI,EAAAJ,IACAE,GAAA,IAAA,CAAAC,GAAAH,EAAAI,GAAAJ,IACAE,GAAA,IAAA,CAAAC,EAAAH,EAAAI,EAAAJ,IACAE,GAAA,IAAA,CAAAC,GAAAH,EAAAI,GAAAJ,IACAZ,SASFQ,EAAA3C,UAAAoD,OAAA,SAAAP,EAAA3C,EAAAmD,QAAsB,IAAAnD,IAAAA,EAAA,GACzB,IAAAoD,EAAAT,EAAAU,QACAV,EAAAU,QAAA,EACAtN,GAAA+M,MAAAH,GACKW,GAAAtD,EAAA,CAAAqD,QAAAD,IACAG,KAAA,WACGJ,GAAAA,MAEHlB,SAQFQ,EAAA3C,UAAA0D,QAAA,SAAAb,EAAA3C,EAAAmD,QAAuB,IAAAnD,IAAAA,EAAA,GAC1BjK,GAAA+M,MAAAH,GACKW,GAAAtD,EAAA,CAAAqD,QAAA,IACAE,KAAA,WACGJ,GAAAA,MAEHlB,SAUFQ,EAAA3C,UAAA2D,QAAA,SAAAd,EAAA3C,EAAAmD,EAAAO,QAAuB,IAAA1D,IAAAA,EAAA,SAA2C,IAAA0D,IAAAA,EAAA,aACrE,IAAAC,EAAAhB,EAAAiB,MACAjB,EAAAiB,MAAA,EACA7N,GAAA+M,MAAAH,GACKW,GAAAtD,EAAA,CAAA4D,MAAAD,GAAA,CAAAD,OAAAA,IACAH,KAAA,WACGJ,GAAAA,MAEHlB,SAUFQ,EAAA3C,UAAA+D,SAAA,SAAAlB,EAAA3C,EAAAmD,EAAAO,QAAwB,IAAA1D,IAAAA,EAAA,SAA2C,IAAA0D,IAAAA,EAAA,YACtE3N,GAAA+M,MAAAH,GACKW,GAAAtD,EAAA,CAAA4D,MAAA,GAAA,CAAAF,OAAAA,IACAH,KAAA,WACGJ,GAAAA,MAEHlB,SAGbQ,EAlFA,8XCAA,IAAAqB,EAAA,WAAA,SAAAA,KA+KA,OAtKkBA,EAAAC,OAAA,SAAAlG,EAAAO,EAAA4F,QAAiC,IAAAA,IAAAA,GAAA,GAC3C,IAAAD,EAAAnG,KAAAmG,UAAA3F,EAAAP,GACA,OAAAmG,EAAApG,KAAAoG,MAAAD,GAAAlG,EAAAkG,EAAAlG,GAIUiG,EAAAG,iBAAA,SAAAC,EAAAC,GAEV,IAAA,IAAArL,KADAqL,EAAAA,GAAA,GACAD,EACIC,EAAA1G,KAAAyG,EAAApL,IAEJ,OAAAqL,GAQUL,EAAAM,aAAA,SAAAD,GACV,UAAAhE,EAAAgE,EAAAjH,OAAA,EAAAiD,EAAA,EAAAA,IAAA,CACI,IAAAkE,EAAAzG,KAAA0G,MAAA1G,KAAAmG,UAAA5D,EAAA,IACAtL,EAAA,CAAAsP,EAAAE,GAAAF,EAAAhE,IAAAgE,EAAAhE,GAAAtL,EAAA,GAAAsP,EAAAE,GAAAxP,EAAA,GAEJ,OAAAsP,GASUL,EAAAS,YAAA,SAAAJ,EAAAK,GACV,GAAAL,EAAAjH,OAAAsH,EACI,OAAAL,EAIJ,IAFA,IAAAM,EAAA,GACAC,EAAAC,EAAAR,GACAhE,EAAA,EAAAA,EAAAqE,EAAArE,IAAA,CACI,IAAA4D,EAAAhP,KAAAgP,OAAA,EAAAW,EAAAxH,OAAA,GAAA,GACA0H,EAAAF,EAAAG,OAAAd,EAAA,GAAA,GACAU,EAAAhH,KAAAmH,GAEJ,OAAAH,GASUX,EAAAgB,UAAA,SAAA5H,EAAAqE,QAA0B,IAAAA,IAAAA,EAAA,kEAGpC,IAFA,IAAAwD,EAAA,GACAC,EAAAzD,EAAArE,OACAiD,EAAA,EAAAA,EAAAjD,EAAAiD,IACI4E,GAAAxD,EAAA0D,OAAArH,KAAA0G,MAAA1G,KAAAmG,SAAAiB,IAEJ,OAAAD,GAQUjB,EAAAoB,WAAA,SAAAf,EAAAhH,GAEV,IADA,IAAAgI,EAAAhB,EAAAiB,SACAjF,EAAA,EAAAA,EAAAgF,EAAAjI,OAAAiD,IAEI,GAAAhD,GADAgI,EAAAhF,GACA,CACIgE,EAAAU,OAAA1E,EAAA,GACA,QAUE2D,EAAAuB,gBAAA,SAAAC,GACV,GAAAA,EAAApI,QAAA,EACI,OAAA,EAGJ,IADA,IAAAqI,EAAA,EACApF,EAAA,EAAAA,EAAAmF,EAAApI,OAAAiD,IACIoF,GAAAD,EAAAnF,GAEJ,IAAAqF,EAAA5H,KAAAmG,SAAAwB,EACAE,EAAA,EAAAC,EAAA,EACA,IAAAvF,EAAA,EAAAA,EAAAmF,EAAApI,OAAAiD,IAAA,CAEI,GADAuF,EAAAD,EAAAH,EAAAnF,GACAsF,EAAAD,GAAAA,GAAAE,EACI,OAAAvF,EAEJsF,EAAAC,EAEJ,OAAA,GASU5B,EAAA6B,aAAA,SAAAC,EAAAlL,EAAAmL,GAGV,IAAAC,GADApL,GAAA,MADAkL,GAAA,KAGAE,EAAA,IACIpL,EAAAkL,GAAA,IAAAE,GACGA,GAAA,MACHpL,EAAAkL,GAAA,IAAAE,IAEJ,IAAAC,EAAArL,EAAAkL,EACA,OAAAC,EAAAjI,KAAAoI,IAAAD,GACIrL,IAEJkL,EAAAC,EAAAjI,KAAAqI,KAAAF,IAAA,IAAA,KAAA,KAQajC,EAAAoC,kBAAA,SAAAC,EAAAC,GACb,GAAAA,EAAA,GAAA,EAAqB,KAAA,sHAAAA,EAGrB,IAFA,IAAAC,EAAAD,EAAA,EACAE,EAAA,GACAnG,EAAA,EAAAA,EAAAkG,EAAAlG,IAAA,CACI,IAAA8C,EAAAkD,EAAAvI,KAAA2I,IAAA3I,KAAA4I,GAAA,IAAArG,EAAAkG,EAAA,IACArD,EAAApF,KAAA6I,KAAAN,EAAAA,EAAAlD,EAAAA,GACAqD,EAAA7I,KAAA,CAAAuF,EAAAC,GAAA,CAAAD,GAAAC,GAAA,EAAAD,EAAAC,GAAA,EAAAD,GAAAC,IAGJ,OADAqD,EAAA7I,KAAA,CAAA,EAAA0I,GAAA,CAAA,GAAAA,GAAA,CAAAA,EAAA,GAAA,EAAAA,EAAA,IACAG,GASUxC,EAAA4C,iBAAA,SAAAP,EAAAC,GACV,GAAAA,EAAA,GAAgB,KAAA,0EAChB,IAAAO,EAAA,EAAA/I,KAAA4I,GAAAJ,EACAD,GAAA,GAEA,IADA,IAAAG,EAAA,GACAF,GAAA,CACI,IAAAQ,EAAAD,EAAAP,EACApD,EAAA,GAAApF,KAAAiJ,IAAAjJ,KAAA2I,IAAAK,GAAA,GACA3D,EAAA,GAAArF,KAAAkJ,IAAAF,GAAA,EAAAhJ,KAAAkJ,IAAA,EAAAF,GAAA,EAAAhJ,KAAAkJ,IAAA,EAAAF,GAAAhJ,KAAAkJ,IAAA,EAAAF,GACA5D,GAAAmD,EACAlD,GAAAkD,EACAG,EAAA7I,KAAA,CAAAuF,EAAAC,IACAmD,IAEJ,OAAAE,GAGRxC,EA/KA,uKCDA,IAAAxE,EAAAhL,EAAA,yBAEAyS,EAAA,WAAA,SAAAA,KAkEA,OA1DkBA,EAAAC,sBAAA,SAAAC,EAAAtE,GACV,GAAAsE,GAAAtE,EAIA,IADA,IAAAuE,EAAA,GACA9J,EAAA,EAAAvI,EAAA8N,EAAAwE,SAAA/J,EAAAvI,EAAAqI,OAAAE,IAAA,CAAK,IAAA+H,EAAAtQ,EAAAuI,IACD8J,EAAA/B,EAAA+B,MAEAE,WAAA,OACIH,EAAAC,GAAA/B,GAEAA,EAAArK,aAAA/E,GAAAsR,SAAAlC,EAAArK,aAAA/E,GAAAuR,UAAAL,EAAA,WAAAC,IACI/B,EAAAoC,GAAA,QAAAN,EAAA,WAAAC,GAAAD,IAGR9B,EAAAqC,eAGAzS,KAAAiS,sBAAAC,EAAA9B,KASM4B,EAAAtM,iBAAA,SAAAC,EAAAC,GACV2E,EAAA3K,QAAA8F,iBAAAC,EAAAC,IAQUoM,EAAAU,cAAA,SAAA/M,EAAA6G,GACV,IAAAmG,EAAA,KACAhN,aAAA3E,GAAA8E,MACI6M,EAAAhN,EAAAI,aAAA/E,GAAA4R,UAEID,EAAAhN,EAAAI,aAAA/E,GAAA6R,WAGJF,EAAAhN,EAEJgN,EAAAG,OAAAtG,GAQUwF,EAAAe,eAAA,SAAApN,EAAAC,EAAAO,GACVoE,EAAA3K,QAAAiH,gBAAAjB,EAAAD,EAAAQ,IAGR6L,EAlEA,qKCDA,IAAAxK,EAAA,IAAsB,WAGlBxH,KAAAgT,MAAA,CAEItL,MAAA,QAEAuL,IAAA,MAEAC,SAAA,WAEAC,UAAA,aAIJnT,KAAAoT,MAAA,CAEI1L,MAAA,SAIJ1H,KAAAyH,KAAA,CAEIC,MAAA,OAEA2L,IAAA,MAEAC,IAAA,MAEAzO,IAAA,MAEAC,IAAA,MAEAC,IAAA,OAIJ/E,KAAAuT,MAAA,CAEI7L,MAAA,QACA8L,OAAA,SACAC,OAAA,SACAC,OAAA,SACAC,OAAA,SACAC,OAAA,SACAC,OAAA,WAIRtO,OAAA,YAAAiC,i2BC3CA,IAAAhI,EAAAD,EAAA,6BAEAiL,EAAAjL,EAAA,6BACAuU,EAAAvU,EAAA,uBACAwU,EAAAxU,EAAA,oBACAyN,EAAAzN,EAAA,gBAEMO,EAAAkB,GAAAyJ,WAAAC,EAAA5K,EAAA4K,QAGNsJ,GAHMlU,EAAA8K,SAGN,SAAAC,GAAA,SAAAmJ,IAAA,IAAA1S,EAAA,OAAAuJ,GAAAA,EAAAoJ,MAAAjU,KAAAkU,YAAAlU,YAEYsB,EAAA6S,OAAA,KACA7S,EAAA8S,OAAA,KACA9S,EAAA+S,QAAA,KACA/S,EAAAgT,SAAA,KACAhT,EAAAiT,SAAA,IA0DZ,OAhEqCzJ,EAAAkJ,EAAAnJ,GAQvBmJ,EAAAjJ,UAAAC,OAAA,WACN8I,EAAAlU,QAAAqS,sBAAAjS,KAAAA,KAAA4N,MACA5N,KAAA4N,KAAA4E,GAAA,QAAAxS,KAAAwU,IAAAxU,OAGGgU,EAAAjJ,UAAApL,KAAA,SAAAkI,GAAP,IAAAvG,EAAAtB,KAEIA,KAAAmU,OAAA3J,EAAA5K,QAAA0G,QAAAuB,GAEA7H,KAAAuU,SAAA,GACAT,EAAAlU,QAAA8S,cAAA1S,KAAAqU,QAAArU,KAAAmU,OAAAhC,MACA2B,EAAAlU,QAAA8S,cAAA1S,KAAAsU,SAAA,GAAAtU,KAAAuU,UACA/U,EAAAI,QAAAiB,UAAA,CACIC,KAAA,OAAAd,KAAAmU,OAAAM,KACA1T,WAAA,KACAT,KAAAU,GAAAwF,cACHtF,KAAA,SAAA4F,GACGxF,EAAA8S,OAAArO,aAAA/E,GAAAgF,QAAAU,YAAAI,KAIEkN,EAAAjJ,UAAAyJ,IAAA,WAKN,GAJA3Q,QAAAC,IAAA,6CAEAD,QAAAC,IAAA,WAAAY,WAAAW,SAEArF,KAAAuU,SAAA7P,WAAAW,QACI0O,EAAAnU,QAAA8U,QAAA,gCADJ,CAIAhQ,WAAAW,SAAArF,KAAAuU,SAEAvH,EAAApN,QAAAuN,SAAAwH,YAAAjQ,WAAAW,SACAxB,QAAAC,IAAA,WAAAY,WAAAW,SACA,IAAAuP,GAAA,EACA,OAAA5U,KAAAmU,OAAAtM,IACI,KAAAL,YAAAC,KAAA,KAEImN,EAAA5H,EAAApN,QAAAuN,SAAA0H,SACA,MACJ,KAAArN,YAAAC,KAAA,KAEImN,EAAA5H,EAAApN,QAAAuN,SAAA2H,OACA,MACJ,KAAAtN,YAAAC,KAAA,KAEImN,EAAA5H,EAAApN,QAAAuN,SAAA4H,gBAGRH,IACI5U,KAAAuU,WACA/J,EAAA5K,QAAAoJ,WAAAhJ,KAAAmU,OAAAtM,GAAA,MA3DS+D,EAAA,CADpBlB,GACoBsJ,GAArB,CAAAhT,GAAA6K,YAAqB1I,EAAAvD,QAAAoU,qgCCVrB,IAAAxU,EAAAD,EAAA,6BACAuU,EAAAvU,EAAA,uBAGMO,EAAAkB,GAAAyJ,WAAAC,EAAA5K,EAAA4K,QAGNsK,GAHMlV,EAAA8K,SAGN,SAAAC,GAAA,SAAAmK,IAAA,IAAA1T,EAAA,OAAAuJ,GAAAA,EAAAoJ,MAAAjU,KAAAkU,YAAAlU,YAEYsB,EAAA2T,SAAA,KACA3T,EAAA8S,OAAA,KACD9S,EAAAuG,GAAA,EACAvG,EAAAmD,IAAA,EACAnD,EAAA4T,IAAA,EACA5T,EAAA6T,MAAA,EACA7T,EAAA8T,QAAA,EACA9T,EAAA+T,YAAA,IA6BX,OAtCsCvK,EAAAkK,EAAAnK,GAWxBmK,EAAAjK,UAAAC,OAAA,WACN8I,EAAAlU,QAAAqS,sBAAAjS,KAAAA,KAAA4N,OAGGoH,EAAAjK,UAAApL,KAAA,SAAAkI,EAAApD,EAAAyQ,EAAAC,GAAP,IAAA7T,EAAAtB,KACIA,KAAA6H,GAAAA,EACA7H,KAAAyE,IAAAA,EACAzE,KAAAkV,IAAAA,EACAlV,KAAAmV,MAAAA,EACA3V,EAAAI,QAAAiB,UAAA,CACIC,KAAA,eAAA+G,EACA9G,WAAA,UACAT,KAAAU,GAAAwF,cACHtF,KAAA,SAAA4F,GACGxF,EAAA8S,OAAArO,aAAA/E,GAAAgF,QAAAU,YAAAI,KAIDkO,EAAAjK,UAAAuK,UAAA,SAAAC,GACHvV,KAAAoV,OAAAG,EACAvV,KAAAiV,SAAAO,OAAAD,GAGGP,EAAAjK,UAAA0K,SAAA,SAAAJ,GACHrV,KAAAqV,WAAAA,GAnCazJ,EAAA,CADpBlB,GACoBsK,GAArB,CAAAhU,GAAA6K,YAAqB1I,EAAAvD,QAAAoV,+5BCPf,IAAAlV,EAAAkB,GAAAyJ,WAAAC,EAAA5K,EAAA4K,QAAAE,EAAA9K,EAAA8K,SAGN8K,EAAA,SAAA7K,GAAA,SAAA6K,IAAA,IAAApU,EAAA,OAAAuJ,GAAAA,EAAAoJ,MAAAjU,KAAAkU,YAAAlU,YAMcsB,EAAAqU,GAAA,KAMArU,EAAAsU,WAAA,OA0Bd,OAtCiC9K,EAAA4K,EAAA7K,GAkBtB6K,EAAA3K,UAAApL,KAAA,SAAAkW,GAAP,IAAAvU,EAAAtB,KACIA,KAAA4V,WAAA9C,OAAA+C,EACA7V,KAAA4V,WAAA,wBACI5V,KAAA4V,WAAA,yBAEJ5V,KAAA2V,GAAAG,OAAA9V,KAAA4V,WAAAhI,KAAAkI,OAAA,GACA,IAAA,IAAAzN,EAAA,EAAAvI,EAAAE,KAAA2V,GAAAvD,SAAA/J,EAAAvI,EAAAqI,OAAAE,IAAKvI,EAAAuI,GACDyN,OAAA9V,KAAA2V,GAAAG,OAEJ9V,KAAA4N,KAAAiB,MAAA,EACA7N,GAAA+M,MAAA/N,KAAA4N,MACKW,GAAA,GAAA,CAAAM,MAAA,IACAkH,MAAA,IACA/H,GAAA,GAAA,CAAAM,SAAA,IAAAJ,EAAA,MACAM,KAAA,WACGlN,EAAAsM,KAAAoI,YAEH9I,SA7BTtB,EAAA,CAJChB,EAAA,CACGtK,KAAAU,GAAA8E,KACAmQ,YAAA,kBAEyBP,EAAA3K,UAAA,UAAA,GAM7Ba,EAAA,CAJChB,EAAA,CACGtK,KAAAU,GAAA4R,MACAqD,YAAA,kBAEkCP,EAAA3K,UAAA,kBAAA,GAZrBa,EAAA,CADpBlB,GACoBgL,GAArB,CAAA1U,GAAA6K,WAAqB1I,EAAAvD,QAAA8V,uXCVrB,IAAAlW,EAAAD,EAAA,6BACAwU,EAAAxU,EAAA,oBACA2W,EAAA3W,EAAA,gBAEA4W,EAAA,WAAA,SAAAA,IAaInW,KAAA4N,KAAA,KAKA5N,KAAAmS,KAAA,WAKAnS,KAAAwV,QAAA,EAKAxV,KAAAoW,KAAAF,EAAAnP,OAAAsP,OAKArW,KAAAuG,OAAA,KAKAvG,KAAAsW,aAAA,CAAAtW,KAAAuG,QAEQvG,KAAAuW,KAAA,KACAvW,KAAAwW,MAAA,KACAxW,KAAAyW,aAAA,KACAzW,KAAA0W,aAAA,KAEA1W,KAAA2W,SAAA,GAEA3W,KAAA4W,SAAA,GAEA5W,KAAA6W,UAAA,EAEA7W,KAAA8W,UAAA,EACA9W,KAAA+W,aAAA,KACA/W,KAAAgX,aAAA,KACAhX,KAAAiX,aAAA,EACAjX,KAAA8B,SAAA,EACA9B,KAAAkX,WAAA,KA8JZ,OAnNIjU,OAAAgE,eAAAkP,EAAA,WAAA,CAAAjP,IAAA,WAII,OAHAlH,KAAAmX,YACInX,KAAAmX,UAAA,IAAAhB,GAEJnW,KAAAmX,2CAuDJhB,EAAApL,UAAAqC,KAAA,SAAAoB,GACIuF,EAAAnU,QAAAwN,KAAApN,KAAAA,KAAAL,KAAA6O,IASJ2H,EAAApL,UAAApL,KAAA,WAAA,IAAA2B,EAAAtB,KACIA,KAAA6W,UAAA,EACA7W,KAAAiX,aAAA,EACAjX,KAAAgX,aAAAhX,KAAA0W,aAAA3Q,aAAA/E,GAAAoW,SACApX,KAAA+W,aAAA/W,KAAAyW,aAAA1Q,aAAA/E,GAAAoW,SACApX,KAAAwW,MAAAa,OAAA,KAQA,IAPA,IAAAC,EAAAtX,KAAAuW,KAAAgB,iBACAC,EAAAxW,GAAAwW,KAAA,GAAA,OAEA/S,EAAAoE,KAAA0G,MAAA+H,EAAAG,MAAAD,EAAAC,OAAA,EAEAvC,EAAArM,KAAA0G,MAAA+H,EAAAxB,OAAA0B,EAAA1B,QAAA,EAEA1K,EAAA,EAAAA,GAAA3G,EAAA2G,IACI,IAAA,IAAAkE,EAAA,EAAAA,GAAA4F,EAAA5F,IAAA,CACI,IAAA1B,EAAA5M,GAAA0W,YAAA1X,KAAAwW,OACA5I,EAAAyJ,OAAArX,KAAAuW,KACA3I,EAAAK,EAAA7C,EAAAoM,EAAAC,MACA7J,EAAAM,GAAAoB,EAAAkI,EAAA1B,OACAlI,EAAA,IAAAxC,EACAwC,EAAA,IAAA0B,EACA1B,EAAA+J,OAAA3W,GAAA4W,MAAAC,WAeR,OAZA7X,KAAA8X,iBACAtY,EAAAI,QAAAC,WAAA,WAAAqB,KAAA,WACI1B,EAAAI,QAAAiB,UAAA,CACIC,KAAA,WACAC,WAAA,UACAT,KAAAU,GAAA+W,SACH7W,KAAA,SAAA8W,GACG1W,EAAA4V,WAAAc,EACA1W,EAAAiV,KAAA/D,GAAAxR,GAAA8E,KAAAmS,UAAAC,YAAA5W,EAAA6W,WAAA7W,GACAA,EAAAiV,KAAA/D,GAAAxR,GAAA8E,KAAAmS,UAAAG,WAAA9W,EAAA6W,WAAA7W,QAGR,GAIM6U,EAAApL,UAAAoN,WAAA,SAAAE,GAAV,IAAA/W,EAAAtB,KACI,IAAAA,KAAA8W,UAAA9W,KAAA6W,UAAA7W,KAAAiX,YAAA,CAGAjX,KAAAiX,aAAA,EAEA,IADA,IAAAhP,EAAA2H,EAAA5P,KAAAuW,KAAAnE,UACSkG,EAAA,SAAAlN,GACL,IAAAmN,EAAAtQ,EAAAmD,GACA,GAAAmN,EAAApG,MAAAqG,EAAAhC,MAAArE,sBAIA,GAAAoG,EAAAE,wBAAAC,SAAAL,EAAAM,eAAA,CAEI,IAAAC,EAAA,CACInU,IAAA8T,EAAA,IACArD,IAAAqD,EAAA,IACApD,MAAAjK,OAAAsN,EAAAzB,aAAAjE,SAEJ+F,EAAA7X,GAAA0W,YAAAc,EAAAtB,YACA2B,EAAAxB,OAAAmB,EAAAjC,KACAsC,EAAAC,YAAAP,EAAAQ,eAEAF,EAAArG,GAAAxR,GAAA8E,KAAAmS,UAAAC,YAAA,WACIW,EAAAzS,SAAApF,GAAAoF,QAAAyS,GAAA,IAAAvX,EAAAwV,WAGAxV,EAAAqV,SAAA7G,OAAAxO,EAAAqV,SAAAqC,QAAAJ,GAAA,GACAtX,EAAAsV,SAAA9G,OAAAxO,EAAAsV,SAAAoC,QAAAH,GAAA,GACAA,EAAA7C,UACA1U,EAAAwW,mBACJU,GACAK,EAAAlB,OAAAzM,OAAAsN,EAAAzB,aAAAjE,QACA0F,EAAA7B,SAAAjO,KAAAkQ,GACAJ,EAAA5B,SAAAlO,KAAAmQ,GACAL,EAAAV,0BA7BR1M,EAAA,EAAAA,EAAAnD,EAAAE,OAAAiD,IAASkN,EAAAlN,KAkCb+K,EAAApL,UAAAkO,OAAA,SAAAC,GACIlZ,KAAAiX,cACIjX,KAAA8B,UAAAoX,EACAlZ,KAAA8B,UAAA,KACI9B,KAAA8B,SAAA,EACA9B,KAAAiX,aAAA,KAMFd,EAAApL,UAAA+M,eAAA,WACN,IAAA,IAAA1M,EAAA,EAAAA,EAAApL,KAAA2W,SAAAxO,OAAAiD,IAAA,CAEI,IADA,IAAA+N,GAAA,EACA7J,EAAA,EAAAA,EAAAtP,KAAA2W,SAAAxO,OAAAmH,IACIlE,GAAAkE,GAIAtP,KAAA2W,SAAAvL,GAAA+J,MAAAnV,KAAA2W,SAAArH,GAAA6F,OAGItM,KAAAoI,IAAAjR,KAAA2W,SAAAvL,GAAA3G,IAAAzE,KAAA2W,SAAArH,GAAA7K,MAAA,GACOoE,KAAAoI,IAAAjR,KAAA2W,SAAAvL,GAAA8J,IAAAlV,KAAA2W,SAAArH,GAAA4F,MAAA,IACHiE,GAAA,GAKRnZ,KAAA4W,SAAAxL,GAAAgO,eAAA,YAAA5D,QADJ2D,EAMJ,IAAA3M,EAAAC,KAAAE,UAAA3M,KAAA2W,UACA,GAAA3W,KAAA2W,SAAAxO,SACIqE,EAAA,oDAEJxM,KAAA2W,SAAAxO,OAAA,GAAA,IACIqE,EAAA,uFAAAxM,KAAA2W,SAAAxO,QAEJnI,KAAAgX,aAAAlE,OAAAtG,GAGM2J,EAAApL,UAAAsO,qBAAA,WACNrZ,KAAA6W,UAAA,EACA7W,KAAA8W,UAAA,GAGMX,EAAApL,UAAAuO,qBAAA,WACNtZ,KAAA6W,UAAA,EACA7W,KAAA8W,UAAA,GAOJX,EAAApL,UAAAwO,MAAA,SAAAvD,GACIjC,EAAAnU,QAAA2Z,MAAAvZ,KAAAmS,KAAA6D,IAjNWG,EAAAgB,UAAA,KAoNnBhB,EAtNA,GAAqBhT,EAAAvD,QAAAuW,0PCJrB,IAAApC,EAAAxU,EAAA,oBACA2W,EAAA3W,EAAA,gBACAyN,EAAAzN,EAAA,YAEAia,EAAA,WAAA,SAAAA,IAaIxZ,KAAA4N,KAAA,KAKA5N,KAAAmS,KAAA,SAKAnS,KAAAwV,QAAA,EAKAxV,KAAAoW,KAAAF,EAAAnP,OAAAsP,OAKArW,KAAAuG,OAAA,KAKAvG,KAAAsW,aAAA,CAAAtW,KAAAuG,QAkCJ,OArEItD,OAAAgE,eAAAuS,EAAA,WAAA,CAAAtS,IAAA,WAII,OAHAlH,KAAAmX,YACInX,KAAAmX,UAAA,IAAAqC,GAEJxZ,KAAAmX,2CAqCJqC,EAAAzO,UAAAqC,KAAA,SAAAoB,GACIuF,EAAAnU,QAAAwN,KAAApN,KAAAA,KAAAL,KAAA6O,IASJgL,EAAAzO,UAAApL,KAAA,WAEI,OAAA,GAGM6Z,EAAAzO,UAAA0O,mBAAA,WACNzM,EAAApN,QAAAuN,SAAAuM,QACA1Z,KAAAuZ,SAOJC,EAAAzO,UAAAwO,MAAA,SAAAvD,GACIjC,EAAAnU,QAAA2Z,MAAAvZ,KAAAmS,KAAA6D,IAnEWwD,EAAArC,UAAA,KAsEnBqC,EAxEA,GAAqBrW,EAAAvD,QAAA4Z,mmDCJrB,IAAAlP,EAAA/K,EAAA,8BACAD,EAAAC,EAAA,+BACAC,EAAAD,EAAA,6BACAE,EAAAF,EAAA,qCACAoa,EAAApa,EAAA,uBACAuU,EAAAvU,EAAA,uBACAwU,EAAAxU,EAAA,oBACA2W,EAAA3W,EAAA,gBACAqa,EAAAra,EAAA,qBACAsa,EAAAta,EAAA,sBACAua,EAAAva,EAAA,YACAwa,EAAAxa,EAAA,eAOAya,EAAA,WAAA,SAAAA,IAaIha,KAAA4N,KAAA,KAKA5N,KAAAmS,KAAA,SAKAnS,KAAAwV,QAAA,EAKAxV,KAAAoW,KAAAF,EAAAnP,OAAAsP,OAKArW,KAAAuG,OAAA,KAKAvG,KAAAsW,aAAA,CAAAtW,KAAAuG,QAEQvG,KAAAuW,KAAA,KACAvW,KAAAia,MAAA,GACAja,KAAAka,cAAA,GACAla,KAAAma,aAAA,EACAna,KAAAoa,MAAA,GACApa,KAAAqa,cAAA,KACAra,KAAAkX,WAAA,KACAlX,KAAAsa,UAAA,EACAta,KAAAmL,MAAA,KACAnL,KAAAgU,QAAA,KACAhU,KAAAua,WAAA,KACAva,KAAAwa,WAAA,EACAxa,KAAAya,SAAA,KACAza,KAAA0a,WAAA,KACD1a,KAAA2a,SAAA,KAGC3a,KAAA4a,OAAA,KACA5a,KAAA6a,OAAA,KACA7a,KAAA8a,QAAA,KAGA9a,KAAA+a,SAAA,KACA/a,KAAAgb,SAAA,KACAhb,KAAAib,SAAA,KACAjb,KAAAkb,SAAA,KAMAlb,KAAAmb,WAAA,EAMAnb,KAAAob,YAAA,KA8kBZ,OAxpBInY,OAAAgE,eAAA+S,EAAA,WAAA,CAAA9S,IAAA,WAII,OAHAlH,KAAAmX,YACInX,KAAAmX,UAAA,IAAA6C,GAEJha,KAAAmX,2CAyEM6C,EAAAjP,UAAAsQ,aAAA,aAwBJrB,EAAAjP,UAAAuQ,WAAA,0FA6BCtB,EAAAjP,UAAAwQ,YAAA,WACH,OAAAvb,KAAAwb,WAIAxb,KAAAwb,WAAAC,WAHI5X,QAAAF,MAAA,uBACA,IAKAqW,EAAAjP,UAAA2Q,cAAA,WACJ1b,KAAAub,eACIvb,KAAAwb,WAAAG,QAAAC,SAOK5B,EAAAjP,UAAA8Q,UAAA,2EACT,OAAA7b,KAAAmb,WAEAnb,KAAAub,cACIvb,KAAAwb,WAAAM,aAEA9b,KAAAwb,WAAAK,iBALiB,CAAA,QAgBzB7B,EAAAjP,UAAAqC,KAAA,SAAAoB,GACIuF,EAAAnU,QAAAwN,KAAApN,KAAAA,KAAAL,KAAA6O,IASJwL,EAAAjP,UAAApL,KAAA,WAAA,IAAA2B,EAAAtB,KACIsK,EAAA1K,QAAAO,KAAAqH,YAAAwL,MAAAC,KAAA,GACAjT,KAAAmL,MAAA,CACI3D,YAAAC,KAAA,KACAD,YAAAC,KAAA,KACAD,YAAAC,KAAA,MAEJzH,KAAAgU,QAAAqD,OAAA,KACA7X,EAAAI,QAAAC,WAAA,WAAAqB,KAAA,WACI1B,EAAAI,QAAAiB,UAAA,CACIC,KAAA,WACAC,WAAA,UACAT,KAAAU,GAAA+W,SACH7W,KAAA,SAAA8W,GACG1W,EAAA4V,WAAAc,EACA1W,EAAAoY,YAGR,IAAA,IAAArR,EAAA,EAAAvI,EAAAE,KAAA0a,WAAAtI,SAAA/J,EAAAvI,EAAAqI,OAAAE,IAAA,CAAK,IAAAuF,EAAA9N,EAAAuI,GACDrH,GAAA+M,MAAAH,GACKmO,cAAA/a,GAAA+M,MAAAH,GAEQW,GAAA,GAAA,CAAAyN,OAAA,KACAzN,GAAA,GAAA,CAAAyN,OAAA,KAAA9O,QAGjB4G,EAAAlU,QAAA8S,cAAA1S,KAAA2a,SAAA,GAAAjW,WAAAW,SACAyO,EAAAlU,QAAA8S,cAAA1S,KAAA6a,OAAA,GAAAnW,WAAAY,QACA,IAAA2W,EAAAjc,KAiDA,OAhDAA,KAAA4a,OAAApI,GAAA,QAAA,WACIyJ,EAAAC,eAIJlc,KAAA+a,SAAAvI,GAAA,QAAA,WACI3O,QAAAC,IAAA,eACA9D,KAAA8a,QAAAtF,QAAA,EACAzB,EAAAnU,QAAA8U,QAAA,4BACAhQ,WAAAW,SAAA,GACAX,WAAAY,QAAA,GACA2W,EAAAtH,YAAAjQ,WAAAW,SACA4W,EAAAE,cAAAzX,WAAAY,SACJtF,MAEAA,KAAAgb,SAAAxI,GAAA,QAAA,WACI3O,QAAAC,IAAA,eACA9D,KAAA8a,QAAAtF,QAAA,EACAzB,EAAAnU,QAAA8U,QAAA,4BACAhQ,WAAAW,SAAA,IACAX,WAAAY,QAAA,GACA2W,EAAAtH,YAAAjQ,WAAAW,SACA4W,EAAAE,cAAAzX,WAAAY,SACJtF,MAEAA,KAAAib,SAAAzI,GAAA,QAAA,WACI3O,QAAAC,IAAA,eACA9D,KAAA8a,QAAAtF,QAAA,EACAzB,EAAAnU,QAAA8U,QAAA,4BACAhQ,WAAAW,SAAA,IACAX,WAAAY,QAAA,IACA2W,EAAAtH,YAAAjQ,WAAAW,SACA4W,EAAAE,cAAAzX,WAAAY,SACJtF,MAEAA,KAAAkb,SAAA1I,GAAA,QAAA,WACI3O,QAAAC,IAAA,eACA9D,KAAA8a,QAAAtF,QAAA,EACAzB,EAAAnU,QAAA8U,QAAA,4BACAhQ,WAAAW,SAAA,IACAX,WAAAY,QAAA,GACA2W,EAAAtH,YAAAjQ,WAAAW,SACA4W,EAAAE,cAAAzX,WAAAY,SACJtF,MAEAA,KAAAob,YAAA5I,GAAA,QAAA,WACIxS,KAAA8a,QAAAtF,QAAA,GACJxV,OACA,GAMMga,EAAAjP,UAAAmR,WAAA,WACNrY,QAAAC,IAAA,kBACA9D,KAAA8a,QAAAtF,QAAA,GAIGwE,EAAAjP,UAAA4J,YAAA,SAAA/H,GACHkH,EAAAlU,QAAA8S,cAAA1S,KAAA2a,SAAA,GAAA/N,GACAnN,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAG,QAAAT,WAAAW,UAIG2U,EAAAjP,UAAAoR,cAAA,SAAAvP,GACHkH,EAAAlU,QAAA8S,cAAA1S,KAAA6a,OAAA,GAAAjO,GACAnN,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAI,OAAAV,WAAAY,SAIG0U,EAAAjP,UAAA2O,MAAA,WACH1Z,KAAAua,WAAA6B,qBACApc,KAAAuW,KAAA6F,qBACApc,KAAAka,cAAA/R,OAAA,EACAnI,KAAAma,aAAA,EACAna,KAAAia,MAAA9R,OAAA,EACAnI,KAAAoa,MAAAjS,OAAA,EACAnI,KAAAqa,cAAA+B,qBAEApc,KAAAqc,SAAArc,KAAAkX,YACAlX,KAAAsc,YAGMtC,EAAAjP,UAAAuR,SAAA,WACN,IAAA,IAAAlR,EAAA,EAAAA,EAAApL,KAAAmL,MAAAhD,OAAAiD,IAAA,CACI,IAAAwC,EAAA5M,GAAA0W,YAAA1X,KAAAgU,SACApG,EAAAyJ,OAAArX,KAAAua,WACA3M,EAAA7H,aAAA6T,EAAAha,SAAAD,KAAAK,KAAAmL,MAAAC,MAKD4O,EAAAjP,UAAAgK,cAAA,WAAP,IAAAzT,EAAAtB,KACI,GAAAA,KAAAsa,UAAAta,KAAAwa,UACI,OAAA,EAEJxa,KAAAwa,WAAA,EAEA,IADA,IAAA+B,EAAA,GACAnR,EAAA,EAAAA,EAAApL,KAAAia,MAAA9R,OAAAiD,IACImR,EAAA7T,KAAA1I,KAAAia,MAAA7O,GAAAvD,IAGJ8R,EAAA/Z,QAAAyP,aAAAkN,GACS,IAAAjE,EAAA,SAAAlN,GACL,IAAAoR,EAAAhE,EAAAyB,MAAA7O,GACAwC,EAAA4O,EAAA5O,KACA4J,EAAAxW,GAAAwW,KAAA,GAAA,OACAiF,EAAAzb,GAAA0b,GAAAF,EAAA/X,IAAA+S,EAAAC,OAAA+E,EAAAtH,IAAAsC,EAAA1B,QAEA9U,GAAA+M,MAAAH,GACKW,GAAA,GAAA,CAAAoO,SAAA3b,GAAA4b,GAAApE,EAAAjC,KAAAkB,MAAA,GAAAe,EAAAjC,KAAAT,OAAA,EAAA,KACAtH,KAAA,WACG,IAAA,IAAAqO,EAAA,EAAAA,EAAAN,EAAApU,OAAA0U,IAAA,CACI,IAAAjE,EAAAtX,EAAA2Y,MAAA4C,GACAjE,EAAAjZ,KAAA4c,EAAAM,GAAAjE,EAAAnU,IAAAmU,EAAA1D,IAAA0D,EAAAzD,UAGPY,MAAA,IACAxH,GAAA,GAAA,CAAAN,EAAAwO,EAAAxO,EAAAC,EAAAuO,EAAAvO,IACAM,KAAA,WACGpD,GAAA9J,EAAA2Y,MAAA9R,OAAA,IACI7G,EAAAkZ,WAAA,KAGPtN,gBArBT,IAAA9B,EAAA,EAAAA,EAAApL,KAAAia,MAAA9R,OAAAiD,IAASkN,EAAAlN,GAuBT,OAAA,GAIG4O,EAAAjP,UAAA8J,OAAA,WAAP,IAAAvT,EAAAtB,KACI,GAAAA,KAAAsa,UAAAta,KAAAwa,UACI,OAAA,EAEJ,GAAAxa,KAAAoa,MAAAjS,QAAA,EACI,OAAA,EAEJnI,KAAAsa,UAAA,EACA,IAAAwC,EAAA9c,KAAAoa,MAAA3M,MACAsP,EAAAD,EAAAlP,KAAAoP,sBAAAhc,GAAA0b,GAAA,EAAA,IACAI,EAAAlP,KAAAkL,YAAA9Y,KAAAuW,KAAA0G,qBAAAF,IACAD,EAAAlP,KAAAyJ,OAAArX,KAAAuW,KACA,IAAAiB,EAAAxW,GAAAwW,KAAA,GAAA,OACAiF,EAAAzb,GAAA0b,GAAAI,EAAArY,IAAA+S,EAAAC,OAAAqF,EAAA5H,IAAAsC,EAAA1B,QAcA,OAbA9U,GAAA+M,MAAA+O,EAAAlP,MACKW,GAAA,GAAA,CAAAN,EAAAwO,EAAAxO,EAAAC,EAAAuO,EAAAvO,IACAM,KAAA,WACGsO,EAAArH,UAAA,GAEAnU,EAAA2Y,MAAAvR,KAAAoU,GAEAxb,EAAA4Y,cAAApK,OAAAxO,EAAA4Y,cAAAlB,QAAA8D,GAAA,GAEAxb,EAAAwW,iBACAxW,EAAAgZ,UAAA,IAEHpN,SACL,GAIG8M,EAAAjP,UAAA+J,KAAA,WACH,GAAA9U,KAAAsa,UAAAta,KAAAwa,UACI,OAAA,EAMJ,IAJA,IAAAxQ,EAAA2P,EAAA/Z,QAAAoP,OAAA,EAAAhP,KAAAia,MAAA9R,OAAA,GAAA,GACAN,EAAA7H,KAAAia,MAAAjQ,GAAAnC,GACA2U,EAAA,KACAU,EAAA,EACA9R,EAAA,EAAAA,EAAApL,KAAAia,MAAA9R,OAAAiD,IAEI,IADAoR,EAAAxc,KAAAia,MAAA7O,IACAvD,IAAAA,IAGA7H,KAAAia,MAAAnK,OAAA1E,EAAA,GACAA,IAEAoR,EAAA5O,KAAAoI,YACAkH,GACA,GAAA,CAEIld,KAAA8X,iBACA,MAGR,GAAAoF,EAAA,EACI,IAAA9R,EAAA,EAAAA,EAAApL,KAAAka,cAAA/R,WACIqU,EAAAxc,KAAAka,cAAA9O,IACAvD,IAAAA,IAGA7H,KAAAka,cAAApK,OAAA1E,EAAA,GACAA,IAEAoR,EAAA5O,KAAAoI,YACAkH,GACA,IAVJ9R,KAmBJ,OAJAd,EAAA1K,QAAAO,KAAAqH,YAAAwL,MAAAG,WACA,GAAAnT,KAAAia,MAAA9R,QACI4R,EAAAna,QAAAuN,SAAAC,QAEJ,GAIY4M,EAAAjP,UAAAsR,SAAA,SAAArE,kGASZ,IARImF,EAAA1d,EAAAG,QAAA+C,OAAA+B,WAAAM,UAAAC,UACAkP,EAAA7U,EAAAM,QAAAwE,OAAAoD,YAAA+L,MAAA7L,MAAA,QAAAyV,GACJrJ,EAAAlU,QAAA8S,cAAA1S,KAAAya,SAAAtG,EAAAtM,IACMoS,EAAA9F,EAAA3G,KAEAiC,EAAAwK,EAAA9R,OAAA,EAEAoU,EAAA,GACNnR,EAAA,EAAAA,EAAAqE,EAAArE,IACQvD,EAAA8R,EAAA/Z,QAAAoP,OAAA,EAAA,IAAA,GACJuN,EAAA7T,KAAAb,EAAAA,EAAAA,GAMJ,IAHA8R,EAAA/Z,QAAAyP,aAAAkN,GACM/E,EAAAxW,GAAAwW,KAAA,GAAA,OAEG4F,EAAA,SAAAhS,GACL,IAAAoR,EAAAvC,EAAA7O,GACAwC,EAAA5M,GAAA0W,YAAAM,GACAqF,EAAA9G,KAAA+G,SAAA1P,EAAA4O,EAAArH,OACA,IAAAoI,EAAA3P,EAAA7H,aAAA8T,EAAAja,SAEA6c,EAAAzb,GAAA0b,GAAAF,EAAA/X,IAAA+S,EAAAC,OAAA+E,EAAAtH,IAAAsC,EAAA1B,QACAlI,EAAAkL,YAAA2D,GACAc,EAAA5d,KAAA4c,EAAAnR,GAAAoR,EAAA/X,IAAA+X,EAAAtH,IAAAsH,EAAArH,OACAkI,EAAApD,MAAAvR,KAAA6U,GAEAvc,GAAA+M,MAAAH,GACKW,GAAA,GAAA,CAAAoO,SAAA3b,GAAA4b,GAAAS,EAAA9G,KAAAkB,MAAA,GAAA4F,EAAA9G,KAAAT,OAAA,EAAA,KACAC,MAAA,IACAxH,GAAA,GAAA,CAAAN,EAAAwO,EAAAxO,EAAAC,EAAAuO,EAAAvO,IACAM,KAAA,WACGZ,EAAA4E,GAAAxR,GAAA8E,KAAAmS,UAAAC,YAAA5W,EAAAkc,aAAAC,KAAAnc,EAAAic,GAAAjc,GACA8J,GAAA6O,EAAA9R,OAAA,GAEI7G,EAAAwW,mBAGP5K,gBAtBT9B,EAAA,EAAAA,EAAA6O,EAAA9R,OAAAiD,IAASgS,EAAAhS,kBA8BH4O,EAAAjP,UAAAyS,aAAA,SAAAhB,GAENA,EAAApH,QAAAoH,EAAAnH,YAAA,GAAArV,KAAAka,cAAA/R,QAAAnI,KAAAma,cAIAna,KAAAia,MAAAnK,OAAA9P,KAAAia,MAAAjB,QAAAwD,GAAA,GAEAxc,KAAAka,cAAAxR,KAAA8T,GAEAA,EAAA/G,UAAA,GAEAzV,KAAA0d,YAAAlB,GACAxc,KAAAoa,MAAA1R,KAAA8T,GACAlS,EAAA1K,QAAAO,KAAAqH,YAAAwL,MAAAE,YAIM8G,EAAAjP,UAAA+M,eAAA,WACN,IAAA,IAAA1M,EAAA,EAAAA,EAAApL,KAAAia,MAAA9R,OAAAiD,IAAA,CAEI,IADA,IAAA+N,GAAA,EACA7J,EAAA,EAAAA,EAAAtP,KAAAia,MAAA9R,OAAAmH,IACIlE,GAAAkE,GAIAtP,KAAAia,MAAA7O,GAAA+J,MAAAnV,KAAAia,MAAA3K,GAAA6F,OACItM,KAAAoI,IAAAjR,KAAAia,MAAA7O,GAAA3G,IAAAzE,KAAAia,MAAA3K,GAAA7K,MAAA,GACOoE,KAAAoI,IAAAjR,KAAAia,MAAA7O,GAAA8J,IAAAlV,KAAAia,MAAA3K,GAAA4F,MAAA,IACHiE,GAAA,GAIZnZ,KAAAia,MAAA7O,GAAAkK,WAAA6D,KASEa,EAAAjP,UAAA2S,YAAA,SAAAC,GAAV,IAAArc,EAAAtB,KACIA,KAAAma,aAAA,EACAna,KAAAqa,cAAAtU,aAAA/E,GAAA4c,QAAAC,SAAA,EAEA,IAAArB,EAAAxc,KAAA8d,cAAAH,GACAI,EAAAJ,EAAA/P,KAAA6J,MAAA,EACAzW,GAAAgd,MAAAC,gBAAAN,EAAA/P,MAEA,IAAAsQ,EAAA,KAEA,GAAA1B,EAAA,CACI0B,EAAA1B,EAAA5O,KAAAoP,sBAAAhc,GAAA0b,MAGA,IADA,IAAAyB,EAAAne,KAAAka,cAAAlB,QAAAwD,GACS4B,EAAA,SAAAhT,GACL,IAAAgF,EAAAiO,EAAAnE,cAAA9O,GAGA,GAFAgF,EAAAxC,KAAA+J,OAAAvM,EAEAA,GAAA+S,mBAGA/N,EAAAxC,KAAA+J,OAAAvM,EAAA,EAEApK,GAAA+M,MAAAqC,EAAAxC,MAEKI,GAAA,GAAA,CAAAC,EAAA0P,EAAAW,MAAAlO,EAAAkO,KAAA,EAAA,EAAAP,EAAA,IACAvP,KAAA,WAEGpD,GAAA9J,EAAA4Y,cAAA/R,OAAA,GAEI7G,EAAAid,aAAAZ,EAAA3c,GAAA0b,GAAAwB,EAAAjQ,EAAA,EAAA8P,EAAA,EAAAG,EAAAhQ,GAAAiQ,EAAA,KAGPjR,gBAnBT9B,EAAA,EAAAA,EAAApL,KAAAka,cAAA/R,OAAAiD,IAASgT,EAAAhT,OAqBN,CACH,IAAAoT,EAAAxe,KAAAqa,cAAAjI,SAAApS,KAAAqa,cAAA5H,cAAA,GACAxE,GAAAjO,KAAAqa,cAAA5C,MAAA,EAAAsG,EAEAS,IACIvQ,EAAAuQ,EAAAvQ,EAAA,EAAA8P,GAGJG,EAAAle,KAAAqa,cAAA2C,sBAAAhc,GAAA0b,GAAAzO,EALA,IAOAjO,KAAAue,aAAAZ,EAAA3c,GAAA0b,GAAAwB,EAAAjQ,EAAAiQ,EAAAhQ,MAUE8L,EAAAjP,UAAAwT,aAAA,SAAAZ,EAAAlB,EAAA9E,GAAV,IAAArW,EAAAtB,UAA2D,IAAA2X,IAAAA,EAAA,MACvD,IAAAuG,EAAAP,EAAA/P,KAAAoP,sBAAAhc,GAAA0b,MACAiB,EAAA/P,KAAAyJ,OAAArX,KAAA4N,KACA+P,EAAA/P,KAAAkL,YAAA6E,EAAA/P,KAAAyJ,OAAA4F,qBAAAiB,IACAP,EAAA/P,KAAA+J,OAAA3W,GAAA4W,MAAAC,WACA4E,EAAAkB,EAAA/P,KAAAyJ,OAAA4F,qBAAAR,GACAzb,GAAA+M,MAAA4P,EAAA/P,MACKW,GAAA,GAAA,CAAAoO,SAAA3b,GAAA4b,GAAAH,EAAAxO,EAAAwO,EAAAvO,EAAA,KACAM,KAAA,WAAA,OAAAiQ,EAAAnd,OAAA,OAAA,EAAA,4DAIO,OAHJ,MAAAqW,IAAAgG,EAAA/P,KAAA+J,OAAAA,GACAgG,EAAA/P,KAAAyJ,OAAArX,KAAAqa,cACAsD,EAAA/P,KAAAM,EAAA,EACI,MAAAyJ,EAAA,CAAA,EAAA,GAEA,CAAA,EAAA3X,KAAA0e,WAAAf,EAAA9V,YAAA/H,EAAAC,OAEAC,KAAAka,cAAA9D,KAAA,SAAAuI,EAAAC,GACI,OAAAD,EAAA/Q,KAAA+J,OAAAiH,EAAAhR,KAAA+J,0BASR,OANA3X,KAAAqa,cAAAtU,aAAA/E,GAAA4c,QAAAC,SAAA,EAEA7d,KAAA8X,iBAEA9X,KAAAma,aAAA,EAEA,GAAAna,KAAAka,cAAA/R,QACI2R,EAAAla,QAAAuN,SAAAC,OACA,CAAA,KAGJ,GAAApN,KAAAia,MAAA9R,QACI4R,EAAAna,QAAAuN,SAAAC,mBAGPF,SAQC8M,EAAAjP,UAAA+S,cAAA,SAAAH,GAGN,IAFA,IAAAnB,EAAA,KAEApR,EAAApL,KAAAka,cAAA/R,OAAA,EAAAiD,GAAA,KACIoR,EAAAxc,KAAAka,cAAA9O,IACAkT,MAAAX,EAAAW,MAAA9B,EAAA3U,IAAA8V,EAAA9V,IAFJuD,IAKIoR,EAAA,KAEJ,OAAAA,GAQMxC,EAAAjP,UAAA2T,WAAA,SAAA7W,GAAV,IAAAvG,EAAAtB,KACI,OAAA,IAAAsD,QAAA,SAAAC,GAGI,IAFA,IAAA0W,EAAA,GAEA5R,EAAA,EAAAvI,EAAAwB,EAAA4Y,cAAA7R,EAAAvI,EAAAqI,OAAAE,KAAKmU,EAAA1c,EAAAuI,IACDR,IAAAA,GACIoS,EAAAvR,KAAA8T,GAIR,GAAA,GAAAvC,EAAA9R,OAAA,CACI,IAAS,IAAA0W,EAAA,SAAArC,GACL,IAAA5O,EAAA4O,EAAA5O,KACA5M,GAAAgd,MAAAC,gBAAArQ,GACA5M,GAAA+M,MAAAH,GACKW,GAAA,GAAA,CAAAM,MAAA,IACAL,KAAA,WACG,IAAAxE,EAAA1I,EAAA4Y,cAAAlB,QAAAwD,GAEAlb,EAAA4Y,cAAApK,OAAA9F,EAAA,GAEA1I,EAAA8Y,MAAAtK,OAAAxO,EAAA8Y,MAAApB,QAAAwD,GAAA,GACA5O,EAAAoI,UACAiE,EAAAxM,MACA,GAAAwM,EAAA9R,QACI5E,GAAA,KAGP2J,SAjBT4R,EAAA,EAAAC,EAAA9E,EAAA6E,EAAAC,EAAA5W,OAAA2W,IAAA,CAAK,IAAAtC,EAAIqC,EAAJrC,EAAAuC,EAAAD,IAmBLxU,EAAA1K,QAAAO,KAAAqH,YAAAwL,MAAAG,gBAEA5P,GAAA,MASZyW,EAAAjP,UAAAwO,MAAA,SAAAvD,GACIjC,EAAAnU,QAAA2Z,MAAAvZ,KAAAmS,KAAA6D,IAtpBWgE,EAAA7C,UAAA,KAypBnB6C,EA3pBA,GAAqB7W,EAAAvD,QAAAoa,8mFCXrB,IAAA9D,EAAA3W,EAAA,mBACAyf,EAAAzf,EAAA,oBACAC,EAAAD,EAAA,wBACAuU,EAAAvU,EAAA,kBAEMO,EAAAkB,GAAAyJ,WAAAC,EAAA5K,EAAA4K,QAENuU,GAFMnf,EAAA8K,SAEN,MAEAsU,EAAA,SAAArU,GAAA,SAAAqU,IAAA,IAAA5d,EAAA,OAAAuJ,GAAAA,EAAAoJ,MAAAjU,KAAAkU,YAAAlU,YAEYsB,EAAA6d,QAAA,aA0JZ,OA5JmCrU,EAAAoU,EAAArU,GAAdkJ,EAAAmL,EAKjBjc,OAAAgE,eAAAiY,EAAA,WAAA,CAAAhY,IAAA,WACI,OAAA6M,EAAAoD,2CAGU+H,EAAA3I,KAAA,SAAAH,GACV,OAAArC,EAAA5G,SAAAgS,QAAA/I,IAGM8I,EAAAnU,UAAAC,OAAA,WACNhL,KAAAmf,QAAA,GACApL,EAAAoD,UAAAnX,KACA+T,EAAAqL,SAAAnc,OAAAC,OAAA,MAGA,IADA,IAAAmc,EAAApc,OAAAqc,KAAApJ,EAAAnP,QACAqE,EAAAiU,EAAAlX,QAAA,EAAAiD,EAAAiU,EAAAlX,OAAAiD,IAAA,CACI,IAAAwC,EAAA,IAAA5M,GAAA8E,KAAAuZ,EAAAjU,IACAwC,EAAAyJ,OAAArX,KAAA4N,KACA,IAAA2R,EAAA3R,EAAA3H,aAAAjF,GAAAwe,QACAD,EAAAE,eAAA,EACAF,EAAAG,YAAA,EACAH,EAAAI,aAAA,EACAJ,EAAAK,cAAA,EACAL,EAAAM,IAAA,EACAN,EAAAO,OAAA,EACAP,EAAAQ,KAAA,EACAR,EAAAS,MAAA,EACAhgB,KAAAmf,QAAAzW,KAAAkF,KAIEsR,EAAAnU,UAAAkO,OAAA,SAAAC,GACN,IAAA,IAAAnV,KAAAgQ,EAAAqL,UACIH,EAAAlL,EAAAqL,SAAArb,KACAkb,EAAAzJ,QAAAyJ,EAAAhG,QAGAgG,EAAAhG,OAAAC,IAUYgG,EAAA9R,KAAA,SAAA7H,EAAA5F,EAAA6O,2FACZyR,EAAA1a,EAAA4M,KACJnS,KAAAof,SAAAa,GACIjgB,KAAAkgB,OAAAlgB,KAAAof,SAAAa,GAAAtgB,EAAA6O,IAEAxO,KAAAof,SAAAa,GAAA1a,EAEI+Q,EAAA/Q,EAAA+Q,aACA6J,EAAA5a,EAAAgB,QAAA,KACJ+P,GACI9W,EAAAI,QAAAkK,YAAAwM,GAAApV,KAAA,WACI1B,EAAAI,QAAAiB,UAAA,CAAAC,KAAA,WAAAmf,EAAAlf,WAAAof,EAAA7f,KAAAU,GAAA+W,SAAA7W,KAAA,SAAA8W,GACIA,EAIA1W,EAAA8e,MAAA7a,EAAAyS,EAAArY,EAAA6O,GAHI3K,QAAAC,IAAA,8BAAAmc,EAAA,mCAkBTf,EAAAkB,MAAA,SAAA7a,EAAAyS,EAAArY,EAAA6O,GACX,GAAA,MAAAwJ,EAAA,CAIA,IAAAqI,EAAArgB,KAAAuW,KAAAhR,EAAA6Q,MACAkK,EAAAtf,GAAA0W,YAAAM,GACAzS,EAAAqI,KAAA0S,EACAD,EAAA/C,SAAAgD,GACAA,EAAAC,UAAAF,GACAvM,EAAAlU,QAAAqS,sBAAA1M,EAAA+a,GACAtgB,KAAAkgB,OAAA3a,EAAA5F,EAAA6O,QATI,MAAAA,GAAkBA,GAAA,IAmBX0Q,EAAAgB,OAAA,SAAA3a,EAAA5F,EAAA6O,GACX,IAAAzE,EAAA,MAAAxE,EAAAqI,KACA7D,IACIA,EAAApK,EAAA6O,KAAAjJ,EAAAA,EAAAqI,MAAA,IAEJ7D,GACIxE,EAAAqI,OAAArI,EAAAqI,KAAA4H,QAAA,GACAjQ,EAAAiQ,QAAA,IAEAjQ,EAAAqI,MAAArI,EAAAqI,KAAAoI,UACAzQ,EAAAiQ,QAAA,GAEJhH,GAAAA,EAAAzE,IASGmV,EAAA3F,MAAA,SAAA0G,EAAAjK,EAAAxH,GACH,IAAAjJ,EAAAvF,KAAAof,SAAAa,GACAjK,GACIzQ,EAAAqI,MAAArI,EAAAqI,KAAAoI,UACAzQ,EAAAiQ,QAAA,SACAxV,KAAAof,SAAAa,KAEA1a,EAAAqI,OAAArI,EAAAqI,KAAA4H,QAAA,GACAjQ,EAAAiQ,QAAA,GAEJhH,GAAAA,KAOG0Q,EAAAxK,QAAA,SAAAmB,GAAP,IAAAvU,EAAAtB,KACIR,EAAAI,QAAAC,WAAA,WAAAqB,KAAA,WACI1B,EAAAI,QAAAiB,UAAA,CACIC,KAAA,UACAC,WAAA,UACAT,KAAAU,GAAA+W,SACH7W,KAAA,SAAA8W,GACG,IAAApK,EAAA5M,GAAA0W,YAAAM,GACApK,EAAAyJ,OAAA/V,EAAAiV,KAAAL,EAAAnP,OAAAyZ,KACA5S,EAAAkL,YAAA,EAAA,GACAlL,EAAA7H,aAAAiZ,EAAApf,SAAAD,KAAAkW,QApJGqJ,EAAAE,SAAA,KACAF,EAAA/H,UAAA,KAJEpD,EAAAnI,EAAA,CADpBlB,GACoBwU,GAArB,CAAAle,GAAA6K,WAAqB1I,EAAAvD,QAAAsf,+QChBrB,IAAAnL,EAAAxU,EAAA,oBACA2W,EAAA3W,EAAA,gBAEAkhB,EAAA,WAAA,SAAAA,IAaIzgB,KAAA4N,KAAA,KAKA5N,KAAAmS,KAAA,SAKAnS,KAAAwV,QAAA,EAKAxV,KAAAoW,KAAAF,EAAAnP,OAAAsP,OAKArW,KAAAuG,OAAA,KAKAvG,KAAAsW,aAAA,CAAAtW,KAAAuG,QA6BJ,OAhEItD,OAAAgE,eAAAwZ,EAAA,WAAA,CAAAvZ,IAAA,WAII,OAHAlH,KAAAmX,YACInX,KAAAmX,UAAA,IAAAsJ,GAEJzgB,KAAAmX,2CAqCJsJ,EAAA1V,UAAAqC,KAAA,SAAAoB,GACIuF,EAAAnU,QAAAwN,KAAApN,KAAAA,KAAAL,KAAA6O,IASJiS,EAAA1V,UAAApL,KAAA,WAEI,OAAA,GAOJ8gB,EAAA1V,UAAAwO,MAAA,SAAAvD,GACIjC,EAAAnU,QAAA2Z,MAAAvZ,KAAAmS,KAAA6D,IA9DWyK,EAAAtJ,UAAA,KAiEnBsJ,EAnEA,GAAqBtd,EAAAvD,QAAA6gB,uNCHrB,IAAAnhB,EAAAC,EAAA,+BACAE,EAAAF,EAAA,qCACAwU,EAAAxU,EAAA,oBACA2W,EAAA3W,EAAA,gBACAyN,EAAAzN,EAAA,YAEAmhB,EAAA,WAAA,SAAAA,IAaI1gB,KAAA4N,KAAA,KAKA5N,KAAAmS,KAAA,YAKAnS,KAAAwV,QAAA,EAKAxV,KAAAoW,KAAAF,EAAAnP,OAAAsP,OAKArW,KAAAuG,OAAA,KAKAvG,KAAAsW,aAAA,CAAAtW,KAAAuG,QA2CJ,OA9EItD,OAAAgE,eAAAyZ,EAAA,WAAA,CAAAxZ,IAAA,WAII,OAHAlH,KAAAmX,YACInX,KAAAmX,UAAA,IAAAuJ,GAEJ1gB,KAAAmX,2CAqCJuJ,EAAA3V,UAAAqC,KAAA,SAAAoB,GACIuF,EAAAnU,QAAAwN,KAAApN,KAAAA,KAAAL,KAAA6O,IASJkS,EAAA3V,UAAApL,KAAA,WACI,IAAAghB,EAAAlhB,EAAAG,QAAA+C,OAAA+B,WAAAM,UAAAC,UACApB,QAAAC,IAAA,iBAAA6c,GACA,IAAAxM,EAAA7U,EAAAM,QAAAwE,OAAAoD,YAAA+L,MAAA7L,MAAA,SAAAiZ,EAAA,IAKA,OAJA9c,QAAAC,IAAAqQ,GACAA,GACI1U,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAC,WAAA0b,IAEJ,GAGMD,EAAA3V,UAAA0O,mBAAA,WACN/U,WAAAW,SAAA,GACA2H,EAAApN,QAAAuN,SAAAwH,YAAAjQ,WAAAW,SACA5F,EAAAG,QAAA0C,OAAAoC,WAAAM,UAAAG,QAAAT,WAAAW,SACA2H,EAAApN,QAAAuN,SAAAuM,QACA1Z,KAAAuZ,SAOJmH,EAAA3V,UAAAwO,MAAA,SAAAvD,GACIjC,EAAAnU,QAAA2Z,MAAAvZ,KAAAmS,KAAA6D,IA5EW0K,EAAAvJ,UAAA,KA+EnBuJ,EAjFA,GAAqBvd,EAAAvD,QAAA8gB","sourcesContent":["import { IDictSimple } from \"../../Interface\";\nimport ConfigCommon from \"./ConfigCommon\";\nimport LoadCommon from \"./LoadCommon\";\nimport LocalStorageCommon from \"./LocalStorageCommon\";\n\n/** 音乐管理 */\nexport default class AudioCommon {\n\n    /** 是否能播放音乐 */\n    protected static isCanPlayMusic: boolean = null;\n    /** 是否能播放音效 */\n    protected static isCanPlayEffect: boolean = null;\n    /** 最后一次播放的音乐 */\n    protected static lastAudioName: string = \"\";\n    /** 时间记录 */\n    protected static effectLastTime: IDictSimple<number> = Object.create(null);\n    /** 播放中的音效id */\n    protected static effectPlayingIds: IDictSimple<number> = Object.create(null);\n    /** 音乐是否播放中 */\n    protected static isMusicPlaying: boolean = null;\n    /** 配置表缓存 */\n    protected static audios: IDictSimple<table.IAudio> = null;\n\n    /** 初始化 */\n    public static async init() {\n        await LoadCommon.loadBundle(\"audio\");\n        this.audios = ConfigCommon.getTable(\"audio\");\n        return true;\n    }\n\n    /**\n     * 播放根据配置表的music判断是音乐还是音效\n     * @param audioName \n     * @param loop \n     */\n    public static play(audioName: string, loop: boolean = false) {\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        if (audio.type == 1) {\n            this._playMusic(audioName, loop);\n        } else {\n            this._playEffect(audioName, loop);\n        }\n    }\n\n    /**\n     * 播放音乐\n     * @param audioName 音乐资源名\n     * @param loop 是否循环\n     */\n    private static _playMusic(audioName: string, loop: boolean = true) {\n        if (this.isMusicPlaying && this.lastAudioName == audioName) {\n            return;\n        }\n        this.lastAudioName = audioName;\n        /** 不能播放 */\n        if (!this.isMusicOpen()) {\n            return;\n        }\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        LoadCommon.loadAsset({ path: audio.path, bundleName: \"audio\", type: cc.AudioClip }).then((clip: cc.AudioClip) => {\n            cc.audioEngine.playMusic(clip, loop);\n        });\n        this.isMusicPlaying = true;\n    }\n\n    /**\n     * 播放音乐\n     * @param audioName 音乐资源名\n     * @param loop 是否循环\n     */\n    private static _playEffect(audioName: string, loop: boolean = false) {\n        /** 不能播放 */\n        if (!this.isEffectOpen()) {\n            return;\n        }\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        const play = () => {\n            LoadCommon.loadAsset({ path: audio.path, bundleName: \"audio\", type: cc.AudioClip }).then((clip: cc.AudioClip) => {\n                this.effectPlayingIds[audioName] = cc.audioEngine.playEffect(clip, loop);\n                this.effectLastTime[audioName] = new Date().getTime();\n            });\n        };\n        let lastTime = this.effectLastTime[audioName];\n        if (lastTime) {\n            if (new Date().getTime() - lastTime >= audio.interval * 1000) {\n                play();\n            }\n            return;\n        }\n        play();\n    }\n\n    /**\n     * 停止\n     * @param audioName \n     */\n    public static stop(audioName: string) {\n        /** 配置数据 */\n        const audio: table.IAudio = this.audios[audioName];\n        if (audio.type == 1) {\n            cc.audioEngine.stopMusic();\n            this.lastAudioName = \"\";\n            this.isMusicPlaying = false;\n        } else {\n            let audioId = this.effectPlayingIds[audioName];\n            if (audioId == undefined) {\n                return;\n            }\n            cc.audioEngine.stopEffect(audioId);\n        }\n    }\n\n    /** 打开音乐 */\n    public static openMusic() {\n        this._setAudioState(true, true);\n        LocalStorageCommon.setInt(\"AudioCommon_Music_State\", 1);\n    }\n\n    /** 关闭音乐 */\n    public static closeMusic() {\n        this.isMusicPlaying = false;\n        this._setAudioState(true, false);\n        LocalStorageCommon.setInt(\"AudioCommon_Music_State\", 0);\n    }\n\n    /** 打开音效 */\n    public static openEffect() {\n        this._setAudioState(false, true);\n        LocalStorageCommon.setInt(\"AudioCommon_Effect_State\", 1);\n    }\n\n    /** 关闭音效 */\n    public static closeEffect() {\n        this._setAudioState(false, false);\n        LocalStorageCommon.setInt(\"AudioCommon_Effect_State\", 0);\n    }\n\n    /** 音乐是否开启状态 */\n    public static isMusicOpen() {\n        let stage = LocalStorageCommon.getInt(\"AudioCommon_Music_State\", -1);\n        if (stage == -1) {\n            LocalStorageCommon.setInt(\"AudioCommon_Music_State\", 1);\n            stage = 1;\n        }\n        if (this.isCanPlayMusic == null) {\n            this.isCanPlayMusic = stage == 1;\n        }\n        return this.isCanPlayMusic;\n    }\n\n    /** 音效是否开启状态 */\n    public static isEffectOpen() {\n        let stage = LocalStorageCommon.getInt(\"AudioCommon_Effect_State\", -1);\n        if (stage == -1) {\n            LocalStorageCommon.setInt(\"AudioCommon_Effect_State\", 1);\n            stage = 1;\n        }\n        if (this.isCanPlayEffect == null) {\n            this.isCanPlayEffect = stage == 1;\n        }\n        return this.isCanPlayEffect;\n    }\n\n    /**\n     * 设置音乐状态\n     * @param isMusic 音乐还是音效\n     * @param isPlay 是否能播放\n     */\n    private static _setAudioState(isMusic: boolean, isPlay: boolean) {\n        if (isMusic) {\n            this.isCanPlayMusic = isPlay;\n        } else {\n            this.isCanPlayEffect = isPlay;\n        }\n        if (!isPlay) {\n            if (isMusic) {\n                cc.audioEngine.stopMusic();\n            } else {\n                cc.audioEngine.stopAllEffects();\n            }\n            return;\n        }\n        if (isMusic && this.lastAudioName) {\n            this._playMusic(this.lastAudioName);\n        }\n    }\n\n}\n","import { IDictSimple } from \"../../Interface\";\n\n/** 配置管理 */\nexport default class ConfigCommon {\n\n    protected static configs: IDictSimple<any> = Object.create(null);\n\n    /** 初始化 */\n    public static async init() {\n        /** 加载json */\n        await this._loadConfig();\n        return true;\n    }\n\n    /** 加载json */\n    private static _loadConfig(): Promise<any> {\n        return new Promise((resolve: (value) => void, reject: (error?: Error) => void) => {\n            cc.resources.load(\"config/config\", cc.JsonAsset, (error: Error, assets: cc.JsonAsset) => {\n                if (error) {\n                    console.log(\"[ConfigCommon][_loadConfig] load error = \", error);\n                    return;\n                }\n                for (let key in assets.json) {\n                    this.configs[key] = assets.json[key];\n                }\n                resolve(this.configs);\n            });\n        });\n    }\n\n    /**\n     * 是否存在表\n     * @param tableName \n     * @returns \n     */\n    public static isExistTable(tableName: string): boolean {\n        return !!this.configs[tableName];\n    }\n\n    /**\n     * 获取整个表数据\n     * @param tableName \n     * @returns \n     */\n    public static getTable<T>(tableName: string): T {\n        const table: T = this.configs[tableName];\n        if (!table) {\n            console.log(`[ConfigCommon][getTable] Table:[${tableName}] is not exist`);\n            return null;\n        }\n        return table;\n    }\n\n    /**\n     * 获取一条行数据\n     * @param tableName \n     * @param rowName \n     * @returns \n     */\n    public static getRow<T>(tableName: string, rowName: string): T {\n        const table = this.getTable(tableName);\n        if (!table) return null;\n        const row = table[rowName];\n        if (!row) {\n            console.log(`[ConfigCommon][getRow] Table:[${tableName}],Row:[${rowName}] is not exist`);\n            return null;\n        }\n        return row;\n    }\n\n    /**\n     * 获取一条列数据\n     * @param tableName \n     * @param rowName \n     * @param colName \n     */\n    public static getCol<T>(tableName: string, rowName: string, colName: string): T {\n        const row = this.getRow(tableName, rowName);\n        if (!row) return null;\n        const col = row[colName];\n        if (!col) {\n            console.log(`[ConfigCommon][getCol] Table:[${tableName}],Row:[${rowName}],Col:[${colName}] is not exist`);\n            return null;\n        }\n        return col;\n    }\n\n}","\n/** 游戏常规配置 */\nlet GameConfig = new class {\n\n    /** 是否进入关卡编辑模式 0：游戏界面 1：关卡编辑界面 */\n    isEditor = 0;\n\n    /** 道具每日增加次数 */\n    Props = {\n        /** 撤销上一步 */\n        201: 3,\n        /** 完成一组 */\n        202: 3,\n        /** 刷新卡牌 */\n        203: 3,\n    };\n\n    LocalKeys = {\n        /** 当前关卡 */\n        CurLevel: \"CurLevel\",\n        /** 重置时间 */\n        ResetTime: \"ResetTime\",\n        /**/\n        CurCoin:\"CurCoin\",\n        /**/\n        CurTon:\"CurTon\"\n    };\n    CoinNum = 100;\n    TonNum = 10;\n\n};\n\nwindow[\"GameConfig\"] = GameConfig;\n","import { IDictSimple } from \"../../Interface\";\nimport ConfigCommon from \"./ConfigCommon\";\nimport LoadCommon from \"./LoadCommon\";\n\n/** img管理 */\nexport default class ImageCommon {\n\n    protected static images: IDictSimple<table.IImage> = null;\n\n    /** 初始化 */\n    public static async init() {\n        this.images = ConfigCommon.getTable(\"image\");\n        return true;\n    }\n\n    /**\n     * 设置图片到目标\n     * @param target cc.Node不存在cc.Sprite则会添加一个\n     * @param imgId \n     */\n    public static setImageToTarget(target: cc.Node | cc.Sprite, imgId: string): void {\n        if (!target || !imgId) return;\n        let sprite: cc.Sprite = null;\n        if (target instanceof cc.Node) {\n            sprite = target.getComponent(cc.Sprite);\n            if (!sprite) {\n                sprite = target.addComponent(cc.Sprite);\n            }\n        } else if (target instanceof cc.Sprite) {\n            sprite = target;\n        }\n        if (!sprite) return;\n        this.loadImageToSprite(sprite, imgId);\n    }\n\n    /**\n     * 加载图片到精灵\n     * @param sprite \n     * @param imgId \n     * @param loadSuccess \n     * @returns 是否成功\n     */\n    public static loadImageToSprite(sprite: cc.Sprite, imgId: string, loadSuccess?: (sprite: cc.Sprite) => void): boolean {\n        if (!imgId || !cc.isValid(sprite)) {\n            return false;\n        }\n        const bean: table.IImage = this.getById(imgId);\n        if (!bean) {\n            return false;\n        }\n        LoadCommon.loadAsset({ path: bean.path, bundleName: bean.bundle, type: cc.SpriteFrame }).then((res: cc.SpriteFrame) => {\n            sprite.spriteFrame = res;\n            loadSuccess && loadSuccess(sprite);\n        });\n        return true;\n    }\n\n    /**\n     * 加载图片\n     * @param imgId 对应img.json的id\n     * @param loadSuccess \n     */\n    public static loadImg(imgId: string, loadSuccess: (res: cc.SpriteFrame) => void) {\n        const img: table.IImage = this.getById(imgId);\n        LoadCommon.loadAsset({ path: img.path, bundleName: img.bundle, type: cc.SpriteFrame }).then((res: cc.SpriteFrame) => {\n            loadSuccess && loadSuccess(res);\n        });\n    }\n\n    /**\n     * 加载图片并设置到目标\n     * @param imgId \n     * @param target 节点 | 精灵\n     */\n    public static loadImgToTarget(imgId: string, target: cc.Node | cc.Sprite, loadSuccess?: () => void) {\n        if (!imgId) {\n            return;\n        }\n        this.loadImg(imgId, (spf: cc.SpriteFrame) => {\n            if (target instanceof cc.Sprite) {\n                target.spriteFrame = spf;\n            } else if (target instanceof cc.Node) {\n                target = target.getComponent(cc.Sprite);\n                target.spriteFrame = spf;\n            }\n            loadSuccess && loadSuccess();\n        });\n    }\n\n    /**\n     * 获取数据\n     * @param imgId \n     * @returns \n     */\n    public static getById(imgId: string): table.IImage {\n        return this.images[imgId];\n    }\n\n}","\n/** 界面排序 */\nexport enum UISort {\n    /** 背景 */\n    BACKGROUND,\n    /** 常用ui层 */\n    NORMAL,\n    /** 顶层 */\n    TOP,\n    /** 对话框 */\n    DIALOG,\n    /** 引导 */\n    GUIDE,\n}\n\n/** ui初始化回调 */\nexport interface UIInitFunc {\n    (ui: cc.Node, success: boolean): boolean;\n};\n\n/** 成功回调 */\nexport interface SuccessFunc {\n    (success: boolean): void;\n}\n\n/** 界面声明 */\nexport interface IWindow {\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node;\n\n    /**\n     * ui名\n     */\n    name: string;\n\n    /**\n     * 显示状态\n     */\n    active: boolean;\n\n    /**\n     * ui层级\n     */\n    sort: UISort;\n\n    /**\n     * 主分包\n     */\n    bundle: string;\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call: () => void): void;\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void;\n\n    /**\n     * 初始化\n     * @param ui ui节点\n     * @param success 是否成功\n     * @return true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean;\n\n    /**\n     * 帧循环\n     * @param dt \n     */\n    update?(dt: number): void;\n\n}\n\n/** 词典 */\nexport interface IDictSimple<V> {\n    [key: string]: V;\n}\n\n/** 奖励信息 */\nexport interface IRewardInfo {\n    /** 物品id */\n    id: string;\n    /** 物品数量 */\n    count: number;\n}\n\n","import { IDictSimple, IRewardInfo } from \"../../Interface\";\nimport ConfigCommon from \"../common/ConfigCommon\";\nimport LocalStorageCommon from \"../common/LocalStorageCommon\";\n\nexport default class ItemSystem {\n\n    /** 本地存储key */\n    protected static localStorageKey: string = \"ItemSystemDataKey\";\n    /** 本地数据 */\n    protected static localData: {\n        /** 物品数据 */\n        items: IDictSimple<number>;\n    } = null;\n    /** 本地数据 */\n    protected static get localStorage() {\n        if (!this.localData) {\n            this.localData = LocalStorageCommon.getObject(this.localStorageKey, Object.create(null));\n            /** 数据初始化 */\n            if (!this.localData.items) {\n                this.localData.items = Object.create(null);\n            }\n        }\n        return this.localData;\n    }\n\n    /** 配置表 */\n    protected static configs: IDictSimple<table.IItem> = null;\n\n    public static init(): Promise<boolean> {\n        /** 初始化本地配置 */\n        this.initItems();\n        return Promise.resolve(true);\n    }\n\n    /** 初始化本地配置 */\n    protected static initItems(): void {\n        this.configs = ConfigCommon.getTable(TableConfig.Item.TName);\n        let isUpdate: boolean = false;\n        for (let key in this.configs) {\n            /** 已经存在数据 */\n            if (this.localStorage.items[this.configs[key].id]) {\n                continue;\n            }\n            this.localStorage.items[this.configs[key].id] = 0;\n            isUpdate = true;\n        }\n        if (isUpdate) {\n            this.saveData();\n        }\n    }\n\n    /** 保存数据 */\n    protected static saveData() {\n        LocalStorageCommon.setObject(this.localStorageKey, this.localStorage);\n    }\n\n    /**\n     * 添加一组物品\n     * @param list \n     * @param isShowGet 是否显示获得弹窗 \n     */\n    public static addItemByList(list: IRewardInfo[], isShowGet: boolean = true): void {\n        if (!list && list.length <= 0) {\n            return;\n        }\n        let items: IRewardInfo[] = [];\n        let item: IRewardInfo = null;\n        for (let info of list) {\n            item = this.addItem(info.id, info.count);\n            if (!item) {\n                continue;\n            }\n            items.push(item);\n        }\n        /** 保存数据 */\n        this.saveData();\n        /** 显示弹窗 */\n        if (isShowGet) {\n\n        }\n    }\n\n    /**\n     * 添加物品\n     * @param itemId \n     * @param count \n     * @param isShowGet \n     */\n    public static addItem(itemId: string, count: number): IRewardInfo {\n        if (this.isPassMaxLimit(itemId, count) || count <= 0) {\n            return null;\n        }\n        count = Math.min(this.getMaxCountById(itemId) || count, count);\n        this.localStorage.items[itemId] += count;\n        return { id: itemId, count: count };\n    }\n\n    /**\n     * 减少物品\n     * @param itemId \n     * @param count \n     * @param isNotEnoughTip 不足提示 \n     */\n    public static reduceItem(itemId: string, count: number, isNotEnoughTip: boolean = true): void {\n        if (this.isNotEnough(itemId, count, isNotEnoughTip) || count <= 0) {\n            return;\n        }\n        this.localStorage.items[itemId] -= count;\n        this.saveData();\n    }\n\n    /**\n     * 物品是否不足\n     * @param itemId \n     * @param count \n     * @param isTip \n     * @returns \n     */\n    public static isNotEnough(itemId: string, count: number, isTip: boolean = true) {\n        if ((this.getCountById(itemId) - count) < 0) {\n            if (isTip) {\n\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 达到最大数量\n     * @param itemId \n     * @param count \n     * @returns \n     */\n    public static isPassMaxLimit(itemId: string, count: number): boolean {\n        let max: number = this.getMaxCountById(itemId);\n        return max == 0 ? false : max >= count;\n    }\n\n    /**\n     * 获取物品最大数量\n     * @param itemId \n     * @returns \n     */\n    public static getMaxCountById(itemId: string): number {\n        let item: table.IItem = this.getById(itemId);\n        if (!item) {\n            return;\n        }\n        return item.maxCount;\n    }\n\n    /** 获取物品数据 */\n    public static getItems(): IDictSimple<number> {\n        return this.localStorage.items;\n    }\n\n    /**\n     * 获取物品数量\n     * @param itemId \n     * @returns \n     */\n    public static getCountById(itemId: string): number {\n        return this.localStorage.items[itemId] || 0;\n    }\n\n    /**\n     * 获取配置\n     * @param itemId \n     * @returns \n     */\n    public static getById(itemId: string): table.IItem {\n        return this.configs[itemId];\n    }\n\n}\n","\n/** 链表 */\nexport default class LinkedList {\n\n\n\n}\n","import { IDictSimple } from \"../../Interface\";\n\n/** 加载资源 */\nexport default class LoadCommon {\n\n    protected static bundles: IDictSimple<Promise<cc.AssetManager.Bundle>> = Object.create(null);\n\n    /**\n     * 加载分包\n     * @param bundleName \n     * @returns \n     */\n    public static loadBundle(bundleName: string): Promise<cc.AssetManager.Bundle> {\n        let caches = this.bundles;\n        let bundle = cc.assetManager.getBundle(bundleName);\n        if (bundle != null) {\n            return Promise.resolve(bundle);\n        }\n        if (!caches[bundleName]) {\n            caches[bundleName] = new Promise((resolve: (value: any) => void, reject: (reason?: any) => void) => {\n                cc.assetManager.loadBundle(bundleName, (err: Error, bundle: cc.AssetManager.Bundle) => {\n                    delete caches[bundleName];\n                    resolve && resolve(bundle);\n                });\n            });\n        }\n        return caches[bundleName];\n    }\n\n    /**\n     * 加载一组分包\n     * @param bundles \n     * @returns \n     */\n    public static loadBundles(bundles: string[]): Promise<boolean> {\n        return new Promise((resolve: (value: boolean) => void, reject: (reason?: any) => void) => {\n            let count = bundles.length;\n            let success = true;\n            for (let index = 0; index < bundles.length; index++) {\n                const bundleName = bundles[index];\n                if (bundleName != null) {\n                    let bundle = cc.assetManager.getBundle(bundleName);\n                    if (!bundle) {\n                        this.loadBundle(bundleName).then((bundle: cc.AssetManager.Bundle) => {\n                            count--;\n                            if (!bundle) success = false;\n                            if (count == 0 && resolve) resolve(success);\n                        });\n                        continue;\n                    }\n                }\n                count--;\n                if (count == 0 && resolve) resolve(success);\n            }\n        });\n    }\n\n    /**\n     * 根据分包名获取分包，不传则是cc.resources\n     * @param bundleName \n     * @returns \n     */\n    public static getBundle(bundleName?: string) {\n        let bundle: cc.AssetManager.Bundle = null;\n        if (!bundle) {\n            if (!bundleName || \"resources\" == bundleName) {\n                bundle = cc.resources;\n            } else {\n                bundle = cc.assetManager.getBundle(bundleName);\n            }\n        }\n        return bundle;\n    }\n\n    /**\n     * 加载资源\n     * @param option \n     * @returns \n     */\n    public static loadAsset<T extends cc.Asset>(option: { path: string, bundleName?: string, type?: { prototype: cc.Asset; }; }) {\n        const bundle = this.getBundle(option.bundleName);\n        const asset = bundle.get(option.path, option.type);\n        if (asset) {\n            return Promise.resolve(asset);\n        }\n        return new Promise((resolve: (value: any) => void, reject: (reason?: any) => void) => {\n            bundle.load(option.path, option.type, (err: Error, asset: T) => {\n                resolve(asset);\n            });\n        });\n    }\n\n    /**\n     * @description 原生加载资源\n     * @param object {url: 远程地址 option: 参数类型}\n     * @returns \n     */\n    public static loadRemote<T extends cc.Asset>(object: { url: string, option?: any; }) {\n        if (null == object.option) {\n            object.option = {};\n        }\n        const { url, option } = object;\n        return new Promise((resolve: (value: any) => void, reject: (reason?: any) => void) => {\n            cc.assetManager.loadRemote(url, option, (err: Error | null, asset: T) => {\n                resolve && resolve(asset);\n            });\n        });\n    }\n\n}\n","import AudioCommon from \"../core/common/AudioCommon\";\nimport ConfigCommon from \"../core/common/ConfigCommon\";\nimport ImageCommon from \"../core/common/ImageCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport ItemSystem from \"../core/system/ItemSystem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Loading extends cc.Component {\n\n    protected async onLoad() {\n        await ConfigCommon.init();\n        await ImageCommon.init();\n        await AudioCommon.init();\n        await ItemSystem.init();\n        /** 每日重置道具次数 */\n        let time: number = Number(LocalStorageCommon.getInt(GameConfig.LocalKeys.ResetTime)) || 0;\n        if (new Date().getTime() >= time) {\n\n        // if(1 == 1)\n            let props = [\n                TableConfig.Item[201],\n                TableConfig.Item[202],\n                TableConfig.Item[203],\n            ];\n\n            /** 道具 */\n            for (let i = 0; i < props.length; i++) {\n                console.log(\"i==\" + props[i]);\n                ItemSystem.addItem(props[i], GameConfig.Props[props[i]]);\n            }\n            /** 设置下一天时间 */\n            let today = new Date();\n            today.setHours(0);\n            today.setMinutes(0);\n            today.setSeconds(0);\n            today.setMilliseconds(0);\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.ResetTime, today.getTime() + 86400000);\n        }\n        console.log(\"111111111111111111111111\");\n        \n        cc.director.loadScene(\"Main\");\n    }\n\n}\n","\n/** 本地存储管理 */\nexport default class LocalStorageCommon {\n\n    /**\n     * 获取字符串\n     * @param key \n     * @returns \n     */\n    public static getString(key: string, defaultVal: string = \"\"): string {\n        return cc.sys.localStorage.getItem(key) || (defaultVal || null);\n    }\n\n    /**\n     * 设置字符串\n     * @param key \n     * @param val \n     */\n    public static setString(key: string, val: string) {\n        if (!key) {\n            console.warn(`[LocalStorageCommon][setString] Key：[${key}] is null,please check`);\n            return;\n        }\n        cc.sys.localStorage.setItem(key, val);\n    }\n\n    /**\n     * 获取一个对象\n     * @param key \n     */\n    public static getObject<T>(key: string, defaultVal: any = null): T {\n        let obj = null;\n        let str = this.getString(key);\n        if (!str) return defaultVal || null;\n        try {\n            obj = JSON.parse(str);\n        } catch (error) {\n            throw (error);\n        }\n        return obj;\n    }\n\n    /**\n     * 设置对象\n     * @param key \n     * @param obj \n     */\n    public static setObject<T>(key: string, obj: T) {\n        let str = \"\";\n        try {\n            str = JSON.stringify(obj);\n        } catch (error) {\n            throw (error);\n        }\n        this.setString(key, str);\n    }\n\n    /**\n     * 获取一个数字\n     * @param key \n     */\n    public static getInt(key: string, defaultVal: number = 0): number {\n        let str = this.getString(key);\n        if (!str) return defaultVal || 0;\n        let num = Number(str);\n        if (isNaN(num)) {\n            console.error(`[LocalStorageCommon][setString] Key：[${key}],value = [${str}] isNaN`);\n        }\n        return num;\n    }\n\n    /**\n     * 设置一个数字\n     * @param key \n     * @param num \n     */\n    public static setInt(key: string, num: number) {\n        this.setString(key, num.toString());\n    }\n\n}","\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport UIEditor from \"../ui/UIEditor\";\nimport UIMain from \"../ui/UIMain\";\n\nconst { ccclass, property } = cc._decorator;\n\n// import dotenv from \"dotenv\"\n// dotenv.config({ path: \"../../../.env\" });\n\n// import { TonClient } from \"@ton/cocos-sdk\";\n// import { mnemonicToWalletKey } from \"@ton/crypto\";\n// import { WalletContractV5R1 } from \"@ton/ton\";\n\n\n@ccclass\nexport default class Main extends cc.Component {\n\n    protected onLoad(): void {\n\n    }\n\n    protected start() {\n        let level = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurLevel, -1);\n        if (level == -1) {\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.CurLevel, 1);\n        }\n        console.log(\"localkeys ==\"+ GameConfig.LocalKeys.CurLevel);\n        \n        GameConfig.CoinNum = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurCoin,-1);\n        if(GameConfig.CoinNum == -1){\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.CurCoin,100);\n            GameConfig.CoinNum = 100;\n        }\n        console.log(\"coinNum ===\" + GameConfig.CoinNum);\n\n        GameConfig.TonNum = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurTon,-1);\n        if(GameConfig.TonNum == -1){\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.CurTon,10);\n            GameConfig.TonNum = 10;\n        }\n        console.log(\"coinNum ===\" + GameConfig.TonNum);\n\n        GameConfig.isEditor\n            ?\n            UIEditor.instance.open():\n            UIMain.instance.open();\n\n        // this.initTelegram();\n\n        // this.loadTon();\n    }\n\n\n    // async loadTon(){\n    //     const mnemonic =\n    //     'ivory sign medal hen okay until vivid law weapon grit local minimum field vintage slot hire morning danger rare bonus jazz accuse medal enlist';\n    //     const key = await mnemonicToWalletKey(mnemonic!.split(\" \"));\n    //     const wallet = WalletContractV5R1.create({ publicKey: key.publicKey, workchain: 0 });\n      \n      \n    //     console.log(wallet.address.toString({ testOnly: true }));    \n   \n    // }\n\n\n    // loadTelegramSdk(){\n    //     return new Promise<void>((resolve,reject)=>{\n    //         if(window[\"Telegram\"]&&window[\"Telegram\"].WebApp){\n    //             console.log('Telegram Sdk 已经加载：',window['Telegram']);\n    //             window['Telegram'].WebApp.ready();\n    //             resolve();\n    //             return;\n    //         }\n    //         const script = document.createElement('script');\n    //         script.src = 'https://telegram.org/js/telegram-web-app.js';\n    //         script.onload = ()=>{\n    //             console.log(\"SDK加载成功：\",window['Telegram']);\n    //             window['Telegram'].WebApp.ready();\n\n    //             resolve();\n    //         };\n    //         script.onerror = error=>{\n    //             console.log('SDK 加载失败:',error);\n    //             reject(error);\n    //         };\n    //         document.head.appendChild(script);\n    //     })\n    // }\n\n    // processInitData(){\n    //     const initData = window['Telegram']?.WebApp?.initData;\n    //     if(initData){\n    //         const searchParams = new URLSearchParams(initData);\n    //         const WebAppData =  {};\n    //         for(const[key,value] of searchParams.entries()){\n    //             WebAppData[key] = value;\n    //         }\n    //         console.log('WebAppData:',WebAppData);\n    //         const user = window['Telegram'].WebApp.initDataUnsafe;\n    //         console.log('User:',user);\n    //         window['Telegram'].WebApp.onEvent('resize',function(){\n    //             console.log('更新UI:');\n    //         });\n    //         this.tgInitData = initData;\n    //     }\n    //     else{\n    //         console.warn('Telegram WebApp initData is not available.');\n    //     }\n    // }\n\n\n    // async initTelegram(){\n    //     try{\n    //         await this.loadTelegramSdk();\n    //         this.processInitData();\n    //     }\n    //     catch(error){\n    //         console.error('Failed to load Telegram SDK:',Error);\n    //     }\n    // }\n\n}\n","import { IDictSimple } from \"../../Interface\";\n\n/** 栈(后进先出) */\nexport default class Stack {\n\n    private _stacks: IDictSimple<any> = Object.create(null);\n    private _index: number = 0;\n\n    get length(): number {\n        return this._index;\n    }\n\n    push(data: any) {\n        this._stacks[this._index++] = data;\n        return this;\n    }\n\n    pop() {\n        if (this._index <= 0) {\n            throw \"stack length illegal\";\n        }\n        this._index--;\n        let data = this._stacks[this._index];\n        delete this._stacks[this._index];\n        return data;\n    }\n\n}\n","\nexport default class TAction {\n\n    /**\n     * 震动\n     * @param node 震动节点\n     * @param shakeRatio x,y的震动比率\n     */\n    public shake(node: cc.Node, shakeRatio: number = 0.5) {\n        const offset = 10 * shakeRatio;\n        cc.tween(node)\n            .by(0.15, { x: offset, y: offset })\n            .by(0.15, { x: -offset, y: -offset })\n            .by(0.15, { x: offset, y: offset })\n            .by(0.15, { x: -offset, y: -offset })\n            .start();\n    }\n\n    /**\n     * 淡入节点\n     * @param node \n     * @param time \n     * @param callback \n     */\n    public fadeIn(node: cc.Node, time: number = 1, callback?: () => void) {\n        let oldOpacity = node.opacity;\n        node.opacity = 0;\n        cc.tween(node)\n            .to(time, { opacity: oldOpacity })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n    /**\n     * 淡出节点\n     * @param node \n     * @param time \n     */\n    public fadeOut(node: cc.Node, time: number = 1, callback?: () => void) {\n        cc.tween(node)\n            .to(time, { opacity: 0 })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n    /**\n     * 从无到有\n     * @param node \n     * @param time \n     * @param callback \n     * @param easing 缓动\n     */\n    public scaleIn(node: cc.Node, time: number = 0.5, callback?: () => void, easing: string = \"bounceOut\") {\n        let oldScale = node.scale;\n        node.scale = 0;\n        cc.tween(node)\n            .to(time, { scale: oldScale }, { easing: easing })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n    /**\n     * 从有到无\n     * @param node \n     * @param time \n     * @param callback \n     * @param easing 缓动\n     */\n    public scaleOut(node: cc.Node, time: number = 0.5, callback?: () => void, easing: string = \"bounceIn\") {\n        cc.tween(node)\n            .to(time, { scale: 0 }, { easing: easing })\n            .call(() => {\n                callback && callback();\n            })\n            .start();\n    }\n\n}\n","\nexport default class TMath {\n\n    /**\n       * 随机数\n       * @param min \n       * @param max \n       * @param round \n       * @returns \n       */\n    public static random(min: number, max: number, round: boolean = false): number {\n        const random = Math.random() * (max - min);\n        return round ? (Math.round(random) + min) : (random + min);\n    }\n\n    /** 对象转换成数组 */\n    public static objectValToArray(objs: any, array?: any[]): any[] {\n        array = array || [];\n        for (let key in objs) {\n            array.push(objs[key]);\n        }\n        return array;\n    }\n\n    /**\n     * 打乱数组\n     * @param array \n     * @returns \n     */\n    public static shuffleArray<T>(array: T[]): T[] {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    /**\n     * 将一个数组随机打乱并只保留n个\n     * @param array \n     * @param randomCount 随机次数\n     * @returns \n     */\n    public static randomArray<T>(array: T[], randomCount: number): T[] {\n        if (array.length < randomCount) {\n            return array;\n        }\n        const results = [];\n        const arrayCopy = [...array];\n        for (let i = 0; i < randomCount; i++) {\n            const random = this.random(0, arrayCopy.length - 1, true);\n            const randomVal = arrayCopy.splice(random, 1)[0];\n            results.push(randomVal);\n        }\n        return results;\n    }\n\n    /**\n     * 随机生成字符串\n     * @param length 随机n个\n     * @param str 传入字符串\n     * @returns \n     */\n    public static randomStr(length: number, str: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"): string {\n        let result = '';\n        const strLength = str.length;\n        for (let i = 0; i < length; i++) {\n            result += str.charAt(Math.floor(Math.random() * strLength));\n        }\n        return result;\n    }\n\n    /**\n     * 删除数组中指定项\n     * @param array \n     * @param item \n     */\n    public static removeItem(array: any[], item: any): void {\n        const temp = array.concat();\n        for (let i = 0; i < temp.length; i++) {\n            const value = temp[i];\n            if (item == value) {\n                array.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * 权重随机\n     * @param weights 权重数组 \n     * @returns 索引\n     */\n    public static weightRandomIdx(weights: number[]): number {\n        if (weights.length <= 1) {\n            return 0;\n        }\n        let tw: number = 0;\n        for (let i = 0; i < weights.length; i++) {\n            tw += weights[i];\n        }\n        let rw = Math.random() * tw;\n        let sw: number = 0, ew: number = 0;\n        for (let i = 0; i < weights.length; i++) {\n            ew = sw + weights[i];\n            if (sw < rw && rw <= ew) {\n                return i;\n            }\n            sw = ew;\n        }\n        return 0;\n    }\n\n    /**\n     * 按一定的速度从一个角度转向另一个角度\n     * @param current \n     * @param target \n     * @param speed \n     */\n    public static angleTowards(current: number, target: number, speed: number): number {\n        current %= 360;\n        target %= 360;\n        const dAngle: number = target - current;\n        if (dAngle > 180) {\n            target = current - (360 - dAngle);\n        } else if (dAngle < -180) {\n            target = current + (360 + dAngle);\n        }\n        const dir = target - current;\n        if (speed > Math.abs(dir)) {\n            return target;\n        }\n        return ((current + speed * Math.sign(dir)) % 360 + 360) % 360;\n    }\n\n    /**\n     * 创建圆形队伍\n     * @param r 圆形方程半径\n     * @param total 生成的在圆上的点的总数\n     */\n    protected static createQueueCircle(r: number, total: number) {\n        if (total % 4 !== 0) throw \"生成的在圆上的点的总数错误，不是4的倍数\" + total;\n        let quarter = total / 4;\n        let arr: number[][] = [];\n        for (let i = 1; i < quarter; i++) {//第一象限\n            let y = r * Math.sin(Math.PI / 180 * i / quarter * 90);\n            let x = Math.sqrt(r * r - y * y);\n            arr.push([x, y], [x, -y], [-x, y], [-x, -y]);\n        };\n        arr.push([0, r], [0, -r], [r, 0], [-r, 0]);\n        return arr;\n    }\n\n    /**\n     * 创建心形队伍\n     * @param r 心形方程 半径\n     * @param total 生成的在心形上的点的总数\n     * 公式 X=16(sinθ)³  Y=13cosθ-5cos2θ-2cos3θ-cos4θ (0≤θ≤2π)\n     */\n    public static createQueueHeart(r: number, total: number) {\n        if (total < 20) throw \"total过小，无法生成心形方程\";\n        let unit = 2 * Math.PI / total;\n        r /= 16;// X=16(sinθ)³ 推断 x 最大为16；所以对y缩放\n        let arr: number[][] = [];\n        while (total) {\n            let radian = unit * total;\n            let x = 16 * (Math.sin(radian) ** 3);\n            let y = 13 * Math.cos(radian) - 5 * Math.cos(2 * radian) - 2 * Math.cos(3 * radian) - Math.cos(4 * radian);\n            x *= r;\n            y *= r;\n            arr.push([x, y]);\n            total--;\n        }\n        return arr;\n    }\n\n}\n","import ImageCommon from \"../common/ImageCommon\";\n\nexport default class TNode {\n\n    /**\n     * 绑定节点到类下\n     * @param tclass \n     * @param node \n     * @returns \n     */\n    public static bindNodeTreeAndButton(tclass: any, node: cc.Node): void {\n        if (!tclass || !node) {\n            return;\n        }\n        let name: string = \"\";\n        for (let temp of node.children) {\n            name = temp.name;\n            /** 节点名首字不为 \"_\" */\n            if (!name.startsWith(\"_\")) {\n                tclass[name] = temp;\n                /** 按钮组件存在 */\n                if ((temp.getComponent(cc.Button) || temp.getComponent(cc.Toggle)) && tclass[`onClick_${name}`]) {\n                    temp.on(\"click\", tclass[`onClick_${name}`], tclass);\n                }\n            }\n            if (!temp.childrenCount) {\n                continue;\n            }\n            this.bindNodeTreeAndButton(tclass, temp);\n        }\n    }\n\n    /**\n     * 设置图片到目标\n     * @param target \n     * @param imgId \n     */\n    public static setImageToTarget(target: cc.Node | cc.Sprite, imgId: string): void {\n        ImageCommon.setImageToTarget(target, imgId);\n    }\n\n    /**\n     * 设置文本内容\n     * @param target \n     * @param str \n     */\n    public static setLabelValue(target: cc.Node | cc.Label | cc.RichText, str: string) {\n        let lbl: any = null;\n        if (target instanceof cc.Node) {\n            lbl = target.getComponent(cc.Label);\n            if (!lbl) {\n                lbl = target.getComponent(cc.RichText);\n            }\n        } else {\n            lbl = target;\n        }\n        lbl.string = str;\n    }\n\n    /**\n     * 设置图片到目标\n     * @param target \n     * @param imgId \n     */\n    public static setImgToTarget(target: cc.Node | cc.Sprite, imgId: string, loadSuccess?: () => void) {\n        ImageCommon.loadImgToTarget(imgId, target as any, loadSuccess);\n    }\n\n}\n","/** 配置表相关数据 */\nlet TableConfig = new class {\n\n    /** 音乐表.xlsx */\n    Audio = {\n        /** 表名 */\n        \"TName\": \"audio\",\n        /** 背景音乐 */\n        \"Bgm\": \"Bgm\",\n        /** 选中 */\n        \"Selected\": \"Selected\",\n        /** 消除 */\n        \"Eliminate\": \"Eliminate\",\n    };\n\n    /** 图片表.xlsx */\n    Image = {\n        /** 表名 */\n        \"TName\": \"image\",\n    };\n\n    /** 物品表.xlsx */\n    Item = {\n        /** 表名 */\n        \"TName\": \"item\",\n        /** 金币 */\n        \"101\": \"101\",\n        /** 钻石 */\n        \"102\": \"102\",\n        /** 撤销道具 */\n        \"201\": \"201\",\n        /** 完成一组 */\n        \"202\": \"202\",\n        /** 刷新卡牌 */\n        \"203\": \"203\",\n    };\n\n    /** 关卡表.xlsx */\n    Level = {\n        /** 表名 */\n        \"TName\": \"level\",\n        \"Level1\": \"Level1\",\n        \"Level2\": \"Level2\",\n        \"Level3\": \"Level3\",\n        \"Level4\": \"Level4\",\n        \"Level5\": \"Level5\",\n        \"Level6\": \"Level6\",\n    };\n\n};\nwindow[\"TableConfig\"] = TableConfig;","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport LoadCommon from \"../core/common/LoadCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport ItemSystem from \"../core/system/ItemSystem\";\nimport TNode from \"../core/tools/TNode\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport UIMain from \"../ui/UIMain\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TempBtn extends cc.Component {\n\n    private config: table.IItem = null;\n    private SpIcon: cc.Node = null;\n    private LblName: cc.Node = null;\n    private LblCount: cc.Node = null;\n    private curCount: number = 0;\n\n    protected onLoad(): void {\n        TNode.bindNodeTreeAndButton(this, this.node);\n        this.node.on(\"click\", this.use, this);\n    }\n\n    public init(id: string) {\n        // console.log(\"id ====\" + id);\n        this.config = ItemSystem.getById(id);\n        // this.curCount = ItemSystem.getCountById(id);\n        this.curCount = 50;\n        TNode.setLabelValue(this.LblName, this.config.name);\n        TNode.setLabelValue(this.LblCount, `${this.curCount}`);\n        LoadCommon.loadAsset({\n            path: `res/${this.config.icon}`,\n            bundleName: \"ui\",\n            type: cc.SpriteFrame\n        }).then((spf: cc.SpriteFrame) => {\n            this.SpIcon.getComponent(cc.Sprite).spriteFrame = spf;\n        });\n    }\n\n    protected use() {\n        console.log(\"11111111111111111111122222222222222222222\");\n        \n        console.log(\"coin ===\"+GameConfig.CoinNum);\n\n        if (this.curCount > GameConfig.CoinNum) {\n            UIMgr.showTip(\"金币不足\");\n            return;\n        }\n        GameConfig.CoinNum -= this.curCount; \n\n        UIMain.instance.setCoinView(GameConfig.CoinNum);\n        console.log(\"num ====\" + GameConfig.CoinNum);\n        let isCan = false;\n        switch (this.config.id) {\n            case TableConfig.Item[201]:\n                /** 撤销 */\n                isCan = UIMain.instance.revoke();\n                break;\n            case TableConfig.Item[202]:\n                /** 完成一组 */\n                isCan = UIMain.instance.help();\n                break;\n            case TableConfig.Item[203]:\n                /** 刷新卡牌 */\n                isCan = UIMain.instance.refreshChange();\n                break;\n        }\n        if (isCan) {\n            this.curCount--;\n            ItemSystem.reduceItem(this.config.id, 1);\n            // TNode.setLabelValue(this.LblCount, `${this.curCount}`);\n        }\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport LoadCommon from \"../core/common/LoadCommon\";\nimport TNode from \"../core/tools/TNode\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TempGrid extends cc.Component {\n\n    private SpShadow: cc.Node = null;\n    private SpIcon: cc.Node = null;\n    public id: number = 0;\n    public row: number = 0;\n    public col: number = 0;\n    public order: number = 0;\n    public isLock: boolean = false;\n    public isSelected: boolean = false;\n\n    protected onLoad(): void {\n        TNode.bindNodeTreeAndButton(this, this.node);\n    }\n\n    public init(id: number, row: number, col: number, order: number) {\n        this.id = id;\n        this.row = row;\n        this.col = col;\n        this.order = order;\n        LoadCommon.loadAsset({\n            path: `res/imgs/img${id}`,\n            bundleName: \"prefabs\",\n            type: cc.SpriteFrame\n        }).then((spf: cc.SpriteFrame) => {\n            this.SpIcon.getComponent(cc.Sprite).spriteFrame = spf;\n        });\n    }\n\n    public setShadow(isShow: boolean) {\n        this.isLock = isShow;\n        this.SpShadow.active = isShow;\n    }\n\n    public selected(isSelected: boolean) {\n        this.isSelected = isSelected;\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n/** 提示框 */\n@ccclass\nexport default class Tip extends cc.Component {\n\n    @property({\n        type: cc.Node,\n        displayName: \"背景\"\n    })\n    protected bg: cc.Node = null;\n\n    @property({\n        type: cc.Label,\n        displayName: \"内容\"\n    })\n    protected lblContent: cc.Label = null;\n\n    /**\n     * 显示内容\n     * @param content \n     */\n    public init(content: string) {\n        this.lblContent.string = content;\n        if (this.lblContent[\"_forceUpdateRenderData\"]) {\n            this.lblContent[\"_forceUpdateRenderData\"]();\n        }\n        this.bg.height = this.lblContent.node.height + 20;\n        for (let node of this.bg.children) {\n            node.height = this.bg.height;\n        }\n        this.node.scale = 0;\n        cc.tween(this.node)\n            .to(0.3, { scale: 1 })\n            .delay(0.2)\n            .by(0.8, { opacity: -100, y: 120 })\n            .call(() => {\n                this.node.destroy();\n            })\n            .start();\n    }\n\n}\n","import LoadCommon from \"../core/common/LoadCommon\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\n\nexport default class UIEditor implements IWindow {\n\n    private static _instance: UIEditor = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIEditor();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIEditor\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    private Root: cc.Node = null;\n    private SpDot: cc.Node = null;\n    private EditBoxOrder: cc.Node = null;\n    private EditBoxLevel: cc.Node = null;\n    /** 当前写入数据 */\n    private curCards: any[] = [];\n    /** 当前写入数据 */\n    private curNodes: cc.Node[] = [];\n    /** 是否创建模式 */\n    private isCreate: boolean = false;\n    /** 是否删除模式 */\n    private isDelete: boolean = false;\n    private editBoxOrder: cc.EditBox = null;\n    private editBoxLevel: cc.EditBox = null;\n    private isCanCreate: boolean = false;\n    private interval: number = 0;\n    private tempPrefab: cc.Prefab = null;\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n        this.isCreate = true;\n        this.isCanCreate = true;\n        this.editBoxLevel = this.EditBoxLevel.getComponent(cc.EditBox);\n        this.editBoxOrder = this.EditBoxOrder.getComponent(cc.EditBox);\n        this.SpDot.parent = null;\n        const contentSize = this.Root.getContentSize();\n        const size = cc.size((100 / 4), (125 / 4));\n        /** 行 */\n        let row = Math.floor(contentSize.width / size.width) - 1;\n        /** 列 */\n        let col = Math.floor(contentSize.height / size.height) - 1;\n        /** 根据行列创建点 */\n        for (let i = 1; i <= row; i++) {\n            for (let j = 1; j <= col; j++) {\n                let node = cc.instantiate(this.SpDot);\n                node.parent = this.Root;\n                node.x = i * size.width;\n                node.y = -(j * size.height);\n                node[\"row\"] = i;\n                node[\"col\"] = j;\n                node.zIndex = cc.macro.MAX_ZINDEX;\n            }\n        }\n        this.checkCardOrder();\n        LoadCommon.loadBundle(\"prefabs\").then(() => {\n            LoadCommon.loadAsset({\n                path: \"res/Grid\",\n                bundleName: \"prefabs\",\n                type: cc.Prefab\n            }).then((prefab: cc.Prefab) => {\n                this.tempPrefab = prefab;\n                this.Root.on(cc.Node.EventType.TOUCH_START, this.createCard, this);\n                this.Root.on(cc.Node.EventType.TOUCH_MOVE, this.createCard, this);\n            });\n        });\n        return true;\n    }\n\n    /** 创建卡牌 */\n    protected createCard(event: cc.Event.EventTouch) {\n        if (this.isDelete || !this.isCreate || !this.isCanCreate) {\n            return;\n        }\n        this.isCanCreate = false;\n        let list = [...this.Root.children];\n        for (let i = 0; i < list.length; i++) {\n            const point = list[i];\n            if (point.name != this.SpDot.name) {\n                continue;\n            }\n            /** 当前点是否包含触摸坐标  可以修改Point的size让包围盒更大 */\n            if (point.getBoundingBoxToWorld().contains(event.getLocation())) {\n                /** 卡牌信息 */\n                const card = {\n                    row: point[\"row\"],\n                    col: point[\"col\"],\n                    order: Number(this.editBoxOrder.string)\n                };\n                const node = cc.instantiate(this.tempPrefab);\n                node.parent = this.Root;\n                node.setPosition(point.getPosition());\n                /** 点击后删除 */\n                node.on(cc.Node.EventType.TOUCH_START, () => {\n                    if (!node.isValid || !cc.isValid(node, true) || !this.isDelete) {\n                        return;\n                    }\n                    this.curCards.splice(this.curCards.indexOf(card), 1);\n                    this.curNodes.splice(this.curNodes.indexOf(node), 1);\n                    node.destroy();\n                    this.checkCardOrder();\n                }, this);\n                node.zIndex = Number(this.editBoxOrder.string);\n                this.curCards.push(card);\n                this.curNodes.push(node);\n                this.checkCardOrder();\n            }\n        }\n    };\n\n    update(dt: number): void {\n        if (!this.isCanCreate) {\n            this.interval += dt;\n            if (this.interval >= 0.2) {\n                this.interval = 0;\n                this.isCanCreate = true;\n            }\n        }\n    }\n\n    /** 检测卡牌排序 */\n    protected checkCardOrder() {\n        for (let i = 0; i < this.curCards.length; i++) {\n            let isUnlock: boolean = true;\n            for (let j = 0; j < this.curCards.length; j++) {\n                if (i == j) {\n                    continue;\n                }\n                /** 判断卡片间层级关系,并判断卡片距离 */\n                if (this.curCards[i].order < this.curCards[j].order) {\n                    // console.log(\"row:\", this.curCards[i].row, this.curCards[j].row);\n                    // console.log(\"col:\", this.curCards[i].col, this.curCards[j].col);\n                    if (Math.abs(this.curCards[i].row - this.curCards[j].row) <= 2\n                        && Math.abs(this.curCards[i].col - this.curCards[j].col) <= 2) {\n                        isUnlock = false;\n                    }\n                }\n            }\n            if (isUnlock) {\n                this.curNodes[i].getChildByName(\"SpShadow\").active = false;\n            } else {\n                this.curNodes[i].getChildByName(\"SpShadow\").active = true;\n            }\n        }\n        let str = JSON.stringify(this.curCards);\n        if (this.curCards.length == 0) {\n            str = \"快来编辑关卡吧！\";\n        }\n        if (this.curCards.length % 3 != 0) {\n            str = `卡牌不足三的倍数！目前数量：${this.curCards.length}`;\n        }\n        this.editBoxLevel.string = str;\n    }\n\n    protected onClick_ToggleCreate() {\n        this.isCreate = true;\n        this.isDelete = false;\n    }\n\n    protected onClick_ToggleDelete() {\n        this.isCreate = false;\n        this.isDelete = true;\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","import UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\nimport UIMain from \"./UIMain\";\n\nexport default class UIFail implements IWindow {\n\n    private static _instance: UIFail = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIFail();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIFail\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n\n        return true;\n    }\n\n    protected onClick_BtnConfirm() {\n        UIMain.instance.reset();\n        this.close();\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","import AudioCommon from \"../core/common/AudioCommon\";\nimport ConfigCommon from \"../core/common/ConfigCommon\";\nimport LoadCommon from \"../core/common/LoadCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport TMath from \"../core/tools/TMath\";\nimport TNode from \"../core/tools/TNode\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport { IDictSimple, IWindow, SuccessFunc, UISort } from \"../Interface\";\nimport TempBtn from \"../prefab/TempBtn\";\nimport TempGrid from \"../prefab/TempGrid\";\nimport UIFail from \"./UIFail\";\nimport UIVictory from \"./UIVictory\";\n\n// import { GameFi, TonConnectUI, Address, toNano } from '@ton/cocos-sdk';\nexport interface TonAddressConfig {\n    tonAddress: string,\n    jettonAddress?: string;\n}\nexport default class UIMain implements IWindow {\n\n    private static _instance: UIMain = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIMain();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIMain\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    private Root: cc.Node = null;\n    private cards: TempGrid[] = [];\n    private selectedCards: TempGrid[] = [];\n    private isEliminate: boolean = false;\n    private steps: TempGrid[] = [];\n    private LayoutContent: cc.Node = null;\n    private tempPrefab: cc.Prefab = null;\n    private isRevoke: boolean = false;\n    private props: string[] = null;\n    private TempBtn: cc.Node = null;\n    private LayoutProp: cc.Node = null;\n    private isRefresh: boolean = false;\n    private LblLevel: cc.Node = null;\n    private BackGround: cc.Node = null;\n    public CoinNode:cc.Node = null;\n\n\n    private tonBtn:cc.Node = null;\n    private tonNum:cc.Node = null;\n    private tonView:cc.Node = null;\n\n\n    private BuyBtn_1:cc.Node = null;\n    private BuyBtn_2:cc.Node = null;\n    private BuyBtn_3:cc.Node = null;\n    private BuyBtn_4:cc.Node = null;\n\n\n    //-------------------------ton ------------------\n\n\n    private _bTonInit: boolean = false;\n\n    // private _cocosGameFi: GameFi;\n\n    private _connectUI;\n\n    private closeTonBtn:cc.Node = null;\n\n\n    protected loadTelegram(){\n        // TelegramWebApp.Instance.init().then(res => {\n        //     console.log(\"telegram web app init : \", res.success);\n        // });\n\n        // fetch(\"https://tg-cc.image-bot.com/config\", { method: 'GET' }).then(response => {\n        //     return response.json();\n        // }).then(value => {\n        //     console.log(\"config : \", value);\n        //     if (value.ok) {\n\n        //         const addressConfig = {\n        //             tonAddress: value.tokenRecipient,\n        //             jettonAddress: value.jettonMaster\n        //         } as TonAddressConfig;\n        //         // this.toolView.setTonAddressConfig(addressConfig);\n\n        //     } else {\n        //         console.error('request config failed!');\n        //     }\n        // });\n    }\n\n\n    async _initTonUI() {\n\n        // this.toolView.node.active = false;\n\n        // let uiconnector = new TonConnectUI({\n        //     manifestUrl: 'https://ton-connect.github.io/demo-dapp-with-wallet/tonconnect-manifest.json'\n        // });\n        // this._cocosGameFi = await GameFi.create({\n        //     connector: uiconnector\n        // });\n        // this._connectUI = this._cocosGameFi.walletConnector;\n\n        // const unsubscribeModal = this._connectUI.onModalStateChange(state => {\n        //     console.log(\"model state changed! : \", state);\n\n        //     this.updateConnect();\n        // });\n\n        // const unsubscribeConnectUI = this._connectUI.onStatusChange(info => {\n        //     console.log(\"wallet info status changed : \", info);\n\n        //     this.updateConnect();\n        // });\n\n        // this._bTonInit = true;\n        // this.updateConnect();\n    }\n\n\n    public isConnected(): boolean {\n        if (!this._connectUI) {\n            console.error(\"ton ui not inited!\");\n            return false;\n        }\n        return this._connectUI.connected;\n    }\n\n    private updateConnect() {\n        if (this.isConnected()) {\n            const address = this._connectUI.account.address;\n            // this.connectLabel.string = Address.parseRaw(address).toString({ testOnly: true, bounceable: false }).substring(0, 6) + '...';\n        } else {\n            // this.connectLabel.string = \"Connect\";\n        }\n    }\n\n    public async openModal() {\n        if (!this._bTonInit) return;\n\n        if (this.isConnected()) {\n            this._connectUI.disconnect();\n        } else {\n            this._connectUI.openModal();\n        }\n    }\n\n\n\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n        AudioCommon.play(TableConfig.Audio.Bgm, true);\n        this.props = [\n            TableConfig.Item[201],\n            TableConfig.Item[202],\n            TableConfig.Item[203],\n        ];\n        this.TempBtn.parent = null;\n        LoadCommon.loadBundle(\"prefabs\").then(() => {\n            LoadCommon.loadAsset({\n                path: \"res/Grid\",\n                bundleName: \"prefabs\",\n                type: cc.Prefab\n            }).then((prefab: cc.Prefab) => {\n                this.tempPrefab = prefab;\n                this.reset();\n            });\n        });\n        for (let node of this.BackGround.children) {\n            cc.tween(node)\n                .repeatForever(\n                    cc.tween(node)\n                        .to(0.2, { scaleY: 0.8 })\n                        .to(0.2, { scaleY: 1 })\n                ).start();\n        }\n        TNode.setLabelValue(this.CoinNode, `${GameConfig.CoinNum}`);\n        TNode.setLabelValue(this.tonNum,`${GameConfig.TonNum}`)\n        var self = this;\n        this.tonBtn.on('click',function(button){\n            self.OnTonClick();\n        });\n\n        \n        this.BuyBtn_1.on(\"click\",function(button){\n            console.log(\"buyBtnClick\");\n            this.tonView.active = false;\n            UIMgr.showTip(\"购买成功\");\n            GameConfig.CoinNum += 50; \n            GameConfig.TonNum -= 0.1;\n            self.setCoinView(GameConfig.CoinNum);\n            self.setTonNumView(GameConfig.TonNum);\n        },this);\n\n        this.BuyBtn_2.on(\"click\",function(button){\n            console.log(\"buyBtnClick\");\n            this.tonView.active = false;\n            UIMgr.showTip(\"购买成功\");\n            GameConfig.CoinNum += 100; \n            GameConfig.TonNum -= 0.2;\n            self.setCoinView(GameConfig.CoinNum);\n            self.setTonNumView(GameConfig.TonNum);\n        },this);\n\n        this.BuyBtn_3.on(\"click\",function(button){\n            console.log(\"buyBtnClick\");\n            this.tonView.active = false;\n            UIMgr.showTip(\"购买成功\");\n            GameConfig.CoinNum += 200; \n            GameConfig.TonNum -= 0.35;\n            self.setCoinView(GameConfig.CoinNum);\n            self.setTonNumView(GameConfig.TonNum);\n        },this);\n\n        this.BuyBtn_4.on(\"click\",function(button){\n            console.log(\"buyBtnClick\");\n            this.tonView.active = false;\n            UIMgr.showTip(\"购买成功\");\n            GameConfig.CoinNum += 500; \n            GameConfig.TonNum -= 0.5;\n            self.setCoinView(GameConfig.CoinNum);\n            self.setTonNumView(GameConfig.TonNum);\n        },this);\n\n        this.closeTonBtn.on(\"click\",function(button){\n            this.tonView.active = false;\n        },this);\n        return true;\n    }\n\n\n\n\n    protected OnTonClick(){\n        console.log(\"connect ......\");\n        this.tonView.active = true;\n    }\n    \n\n    public setCoinView(num:number):void{\n        TNode.setLabelValue(this.CoinNode, `${num}`);\n        LocalStorageCommon.setInt(GameConfig.LocalKeys.CurCoin, GameConfig.CoinNum);\n    }\n\n\n    public setTonNumView(num:number):void{\n        TNode.setLabelValue(this.tonNum, `${num}`);\n        LocalStorageCommon.setInt(GameConfig.LocalKeys.CurTon, GameConfig.TonNum);\n    }\n\n\n    public reset() {\n        this.LayoutProp.destroyAllChildren();\n        this.Root.destroyAllChildren();\n        this.selectedCards.length = 0;\n        this.isEliminate = false;\n        this.cards.length = 0;\n        this.steps.length = 0;\n        this.LayoutContent.destroyAllChildren();\n        /** 初始化卡牌 */\n        this.initCard(this.tempPrefab);\n        this.initProp();\n    }\n\n    protected initProp() {\n        for (let i = 0; i < this.props.length; i++) {\n            let node = cc.instantiate(this.TempBtn);\n            node.parent = this.LayoutProp;\n            node.getComponent(TempBtn).init(this.props[i]);\n        }\n    }\n\n    /** 刷新所有卡牌 */\n    public refreshChange() {\n        if (this.isRevoke || this.isRefresh) {\n            return false;\n        }\n        this.isRefresh = true;\n        let cardIds: number[] = [];\n        for (let i = 0; i < this.cards.length; i++) {\n            cardIds.push(this.cards[i].id);\n        }\n        /** 打乱卡牌排序 */\n        TMath.shuffleArray(cardIds);\n        for (let i = 0; i < this.cards.length; i++) {\n            let card = this.cards[i];\n            let node = card.node;\n            const size = cc.size((100 / 4), (125 / 4));\n            const pos = cc.v2(card.row * size.width, -(card.col * size.height));\n            /** 动画效果 */\n            cc.tween(node)\n                .to(0.5, { position: cc.v3(this.Root.width / 2, -this.Root.height / 2, 0) })\n                .call(() => {\n                    for (let i = 0; i < cardIds.length; i++) {\n                        let card = this.cards[i];\n                        card.init(cardIds[i], card.row, card.col, card.order);\n                    }\n                })\n                .delay(0.2)\n                .to(0.5, { x: pos.x, y: pos.y })\n                .call(() => {\n                    if (i == this.cards.length - 1) {\n                        this.isRefresh = false;\n                    }\n                })\n                .start();\n        }\n        return true;\n    }\n\n    /** 撤销上一步 */\n    public revoke() {\n        if (this.isRevoke || this.isRefresh) {\n            return false;\n        }\n        if (this.steps.length <= 0) {\n            return false;\n        }\n        this.isRevoke = true;\n        let step = this.steps.pop();\n        let originPos = step.node.convertToWorldSpaceAR(cc.v2(0, 0));\n        step.node.setPosition(this.Root.convertToNodeSpaceAR(originPos));\n        step.node.parent = this.Root;\n        const size = cc.size((100 / 4), (125 / 4));\n        let pos = cc.v2(step.row * size.width, -(step.col * size.height));\n        cc.tween(step.node)\n            .to(0.2, { x: pos.x, y: pos.y })\n            .call(() => {\n                step.selected(false);\n                /** 加入全部卡牌库中 */\n                this.cards.push(step);\n                /** 从选择库中删除 */\n                this.selectedCards.splice(this.selectedCards.indexOf(step), 1);\n                /** 检测卡牌排序 */\n                this.checkCardOrder();\n                this.isRevoke = false;\n            })\n            .start();\n        return true;\n    }\n\n    /** 完成一组 */\n    public help() {\n        if (this.isRevoke || this.isRefresh) {\n            return false;\n        }\n        const index: number = TMath.random(0, this.cards.length - 1, true);\n        const id: number = this.cards[index].id;\n        let card: TempGrid = null;\n        let delIndex: number = 0;\n        for (let i = 0; i < this.cards.length; i++) {\n            card = this.cards[i];\n            if (card.id != id) {\n                continue;\n            }\n            this.cards.splice(i, 1);\n            i--;\n            /** 消除特效... */\n            card.node.destroy();\n            delIndex++;\n            if (delIndex >= 3) {\n                /** 检测卡牌排序 */\n                this.checkCardOrder();\n                break;\n            }\n        }\n        if (delIndex < 3) {\n            for (let i = 0; i < this.selectedCards.length; i++) {\n                card = this.selectedCards[i];\n                if (card.id != id) {\n                    continue;\n                }\n                this.selectedCards.splice(i, 1);\n                i--;\n                /** 消除特效... */\n                card.node.destroy();\n                delIndex++;\n                if (delIndex >= 3) {\n                    break;\n                }\n            }\n        }\n        AudioCommon.play(TableConfig.Audio.Eliminate);\n        if (this.cards.length == 0) {\n            UIVictory.instance.open();\n        }\n        return true;\n    }\n\n    /** 初始化卡牌 */\n    protected async initCard(prefab: cc.Prefab) {\n        let level: number = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurLevel);\n        let config: table.ILevel = ConfigCommon.getRow(TableConfig.Level.TName, `Level${level}`);\n        TNode.setLabelValue(this.LblLevel, config.id);\n        const cards = config.data;\n        /** 随机图标个数 */\n        const randomCount = cards.length / 3;\n        /** 卡牌id */\n        const cardIds: number[] = [];\n        for (let i = 0; i < randomCount; i++) {\n            let id = TMath.random(1, 29, true);\n            cardIds.push(id, id, id);\n        }\n        /** 打乱卡牌排序 */\n        TMath.shuffleArray(cardIds);\n        const size = cc.size((100 / 4), (125 / 4));\n        /** 创建卡牌 */\n        for (let i = 0; i < cards.length; i++) {\n            const card = cards[i];\n            const node = cc.instantiate(prefab);\n            this.Root.addChild(node, card.order);\n            const comp = node.getComponent(TempGrid);\n            /** 计算坐标 */\n            const pos = cc.v2(card.row * size.width, -(card.col * size.height));\n            node.setPosition(pos);\n            comp.init(cardIds[i], card.row, card.col, card.order);\n            this.cards.push(comp);\n            /** 动画效果 */\n            cc.tween(node)\n                .to(0.5, { position: cc.v3(this.Root.width / 2, -this.Root.height / 2, 0) })\n                .delay(0.2)\n                .to(0.5, { x: pos.x, y: pos.y })\n                .call(() => {\n                    node.on(cc.Node.EventType.TOUCH_START, this.onSelectCard.bind(this, comp), this);\n                    if (i == cards.length - 1) {\n                        /** 检测卡牌排序 */\n                        this.checkCardOrder();\n                    }\n                })\n                .start();\n        }\n    }\n\n    /**\n     * 选择卡牌\n     * @param card 选择的卡牌\n     */\n    protected onSelectCard(card: TempGrid) {\n        /** 锁住 */\n        if (card.isLock || card.isSelected || this.selectedCards.length == 7 || this.isEliminate) {\n            return;\n        }\n        /** 从全部卡牌库中删除 */\n        this.cards.splice(this.cards.indexOf(card), 1);\n        /** 加入选择库中 */\n        this.selectedCards.push(card);\n        /** 设置选中 */\n        card.selected(true);\n        /** 执行消除 */\n        this.doEliminate(card);\n        this.steps.push(card);\n        AudioCommon.play(TableConfig.Audio.Selected);\n    }\n\n    /** 检测卡牌排序 */\n    protected checkCardOrder() {\n        for (let i = 0; i < this.cards.length; i++) {\n            let isUnlock: boolean = true;\n            for (let j = 0; j < this.cards.length; j++) {\n                if (i == j) {\n                    continue;\n                }\n                /** 判断卡片间层级关系,并判断卡片距离 */\n                if (this.cards[i].order < this.cards[j].order) {\n                    if (Math.abs(this.cards[i].row - this.cards[j].row) <= 2\n                        && Math.abs(this.cards[i].col - this.cards[j].col) <= 2) {\n                        isUnlock = false;\n                    }\n                }\n            }\n            this.cards[i].setShadow(!isUnlock);\n        }\n    }\n\n    /**\n     * 执行消除\n     * @param selectCard \n     * @returns \n     */\n    protected doEliminate(selectCard: TempGrid) {\n        this.isEliminate = true;\n        this.LayoutContent.getComponent(cc.Layout).enabled = false;\n        /** 相同的最近的卡牌 */\n        let card: TempGrid = this.findEqualCard(selectCard);\n        const halfWidth = selectCard.node.width / 2;\n        cc.Tween.stopAllByTarget(selectCard.node);\n        /** 世界坐标 */\n        let worldPos: cc.Vec2 = null;\n        /** 有相同的卡牌 */\n        if (card) {\n            worldPos = card.node.convertToWorldSpaceAR(cc.v2());\n            /** 当前最后一个相同的所在索引 */\n            const index: number = this.selectedCards.indexOf(card);\n            for (let i = 0; i < this.selectedCards.length; i++) {\n                const temp: TempGrid = this.selectedCards[i];\n                temp.node.zIndex = i;\n                /** 前置位不判断 */\n                if (i <= index) {\n                    continue;\n                }\n                temp.node.zIndex = i + 1;\n                /** 将卡牌向后移动 */\n                cc.tween(temp.node)\n                    /** 相同则不偏移 */\n                    .by(0.1, { x: (selectCard.uuid == temp.uuid) ? 0 : halfWidth * 2 + 5 })\n                    .call(() => {\n                        /** 最后一个 */\n                        if (i == this.selectedCards.length - 1) {\n                            /** 将选中卡牌插入 */\n                            this.insertAction(selectCard, cc.v2(worldPos.x + (halfWidth * 2) + 5, worldPos.y), index + 1);\n                        }\n                    })\n                    .start();\n            }\n        } else {\n            let last = this.LayoutContent.children[this.LayoutContent.childrenCount - 1];\n            let x = -this.LayoutContent.width / 2 + halfWidth;\n            let y = 5;\n            if (last) {\n                x = last.x + 5 + halfWidth;\n            }\n            /** 没有卡牌按计算的坐标点插入 */\n            worldPos = this.LayoutContent.convertToWorldSpaceAR(cc.v2(x, y));\n            /** 执行动作 */\n            this.insertAction(selectCard, cc.v2(worldPos.x, worldPos.y));\n        }\n    }\n\n    /**\n     * 执行插入卡牌动作\n     * @param selectCard 选中的卡牌\n     * @param pos 插入坐标\n     * @param zIndex \n     */\n    protected insertAction(selectCard: TempGrid, pos: cc.Vec2, zIndex: number = null) {\n        let worldPos = selectCard.node.convertToWorldSpaceAR(cc.v2());\n        selectCard.node.parent = this.node;\n        selectCard.node.setPosition(selectCard.node.parent.convertToNodeSpaceAR(worldPos));\n        selectCard.node.zIndex = cc.macro.MAX_ZINDEX;\n        pos = selectCard.node.parent.convertToNodeSpaceAR(pos);\n        cc.tween(selectCard.node)\n            .to(0.2, { position: cc.v3(pos.x, pos.y, 0), })\n            .call(async () => {\n                (zIndex != null) && (selectCard.node.zIndex = zIndex);\n                selectCard.node.parent = this.LayoutContent;\n                selectCard.node.y = 5;\n                if (zIndex != null) {\n                    /** 检测是否能消除 */\n                    await this.checkEqual(selectCard.id);\n                    /** 从小到大排序 */\n                    this.selectedCards.sort((a, b) => {\n                        return a.node.zIndex - b.node.zIndex;\n                    });\n                }\n                this.LayoutContent.getComponent(cc.Layout).enabled = true;\n                /** 检测卡牌排序 */\n                this.checkCardOrder();\n                /** 消除结束 */\n                this.isEliminate = false;\n                /** 失败了 */\n                if (this.selectedCards.length == 7) {\n                    UIFail.instance.open();\n                    return;\n                }\n                /** 胜利 */\n                if (this.cards.length == 0) {\n                    UIVictory.instance.open();\n                }\n            })\n            .start();\n    };\n\n    /**\n     * 查找相同的\n     * @param selectCard 选中卡牌\n     * @returns \n     */\n    protected findEqualCard(selectCard: TempGrid) {\n        let card: TempGrid = null;\n        /** 逆序遍历 找到最近的一个相同卡牌 */\n        for (let i = this.selectedCards.length - 1; i >= 0; i--) {\n            card = this.selectedCards[i];\n            if (card.uuid != selectCard.uuid && card.id == selectCard.id) {\n                break;\n            }\n            card = null;\n        }\n        return card;\n    }\n\n    /**\n     * 检测相同\n     * @param id \n     * @returns \n     */\n    protected checkEqual(id: number): Promise<unknown> {\n        return new Promise((resolve, rejects) => {\n            let cards: TempGrid[] = [];\n            /** id相同则放入数组 */\n            for (let card of this.selectedCards) {\n                if (card.id == id) {\n                    cards.push(card);\n                }\n            }\n            /** 足够消除了 */\n            if (cards.length == 3) {\n                for (let card of cards) {\n                    let node: cc.Node = card.node;\n                    cc.Tween.stopAllByTarget(node);\n                    cc.tween(node)\n                        .to(0.1, { scale: 0 })\n                        .call(() => {\n                            const index = this.selectedCards.indexOf(card);\n                            /** 从选择库中删除 */\n                            this.selectedCards.splice(index, 1);\n                            /** 合成后的步骤删掉 */\n                            this.steps.splice(this.steps.indexOf(card), 1);\n                            node.destroy();\n                            cards.pop();\n                            if (cards.length == 0) {\n                                resolve(true);\n                            }\n                        })\n                        .start();\n                }\n                AudioCommon.play(TableConfig.Audio.Eliminate);\n            } else {\n                resolve(false);\n            }\n        });\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport { IDictSimple, IWindow, SuccessFunc, UIInitFunc, UISort } from \"../../Interface\";\nimport Tip from \"../../prefab/Tip\";\nimport LoadCommon from \"../common/LoadCommon\";\nimport TNode from \"../tools/TNode\";\n\nconst { ccclass, property } = cc._decorator;\n\nlet TempWindow: IWindow = null;\n@ccclass\nexport default class UIMgr extends cc.Component {\n\n    private _layers: cc.Node[] = null;\n    private static _windows: IDictSimple<IWindow> = null;\n    private static _instance: UIMgr = null;\n    public static get instance() {\n        return UIMgr._instance;\n    }\n\n    public static Root(sort: UISort): cc.Node {\n        return UIMgr.instance._layers[sort];\n    }\n\n    protected onLoad(): void {\n        this._layers = [];\n        UIMgr._instance = this;\n        UIMgr._windows = Object.create(null);\n\n        let layers = Object.keys(UISort);\n        for (let i = layers.length >> 1; i < layers.length; i++) {\n            const node = new cc.Node(layers[i]);\n            node.parent = this.node;\n            let widget = node.addComponent(cc.Widget);\n            widget.isAlignBottom = true;\n            widget.isAlignTop = true;\n            widget.isAlignLeft = true;\n            widget.isAlignRight = true;\n            widget.top = 0;\n            widget.bottom = 0;\n            widget.left = 0;\n            widget.right = 0;\n            this._layers.push(node);\n        }\n    }\n\n    protected update(dt: number): void {\n        for (let key in UIMgr._windows) {\n            TempWindow = UIMgr._windows[key];\n            if (!TempWindow || !TempWindow.active || !TempWindow.update) {\n                continue;\n            }\n            TempWindow.update(dt);\n        }\n    }\n\n    /**\n     * 打开界面\n     * @param window \n     * @param init \n     * @param call \n     */\n    public static async open(window: IWindow, init: UIInitFunc, call?: SuccessFunc) {\n        let winName = window.name;\n        if (this._windows[winName]) {\n            this.__open(this._windows[winName], init, call);\n        } else {\n            this._windows[winName] = window;\n            /** 加载依赖分包资源 */\n            let dependencies = window.dependencies;\n            let bundleName = window.bundle || 'ui';\n            if (dependencies) {\n                LoadCommon.loadBundles(dependencies).then((success: boolean) => {\n                    LoadCommon.loadAsset({ path: `prefabs/${winName}`, bundleName: bundleName, type: cc.Prefab }).then((prefab: cc.Prefab) => {\n                        if (!prefab) {\n                            console.log(`[UIMgr][open] window：[${winName}]，load filed`);\n                            return;\n                        }\n                        this._open(window, prefab, init, call);\n                    });\n                });\n            }\n        }\n    }\n\n    /**\n     * 创建ui并打开\n     * @param window \n     * @param prefab \n     * @param init \n     * @param call \n     * @returns \n     */\n    private static _open(window: IWindow, prefab: cc.Prefab, init: UIInitFunc, call?: SuccessFunc) {\n        if (prefab == null) {\n            if (call != null) call(false);\n            return;\n        }\n        let root = this.Root(window.sort);\n        let winNode = cc.instantiate(prefab);\n        window.node = winNode;\n        root.addChild(winNode);\n        winNode.setParent(root);\n        TNode.bindNodeTreeAndButton(window, winNode);\n        this.__open(window, init, call);\n    }\n\n    /**\n     * 打开界面\n     * @param window \n     * @param winNode \n     * @param init \n     * @param call \n     */\n    private static __open(window: IWindow, init: UIInitFunc, call?: SuccessFunc) {\n        let success: boolean = window.node != null;\n        if (success) {\n            success = init.call(window, window.node, true);\n        }\n        if (success) {\n            window.node && (window.node.active = true);\n            window.active = true;\n        } else {\n            window.node && window.node.destroy();\n            window.active = false;\n        }\n        call && call(success);\n    }\n\n    /**\n     * 关闭界面\n     * @param winName \n     * @param destroy \n     * @param call \n     */\n    static close(winName: string, destroy: boolean, call?: () => void): void {\n        let window: IWindow = this._windows[winName];\n        if (destroy) {\n            window.node && window.node.destroy();\n            window.active = false;\n            delete this._windows[winName];\n        } else {\n            window.node && (window.node.active = false);\n            window.active = false;\n        }\n        call && call();\n    }\n\n    /**\n     * 提示\n     * @param content 内容\n     */\n    static showTip(content: string): void {\n        LoadCommon.loadBundle(\"prefabs\").then(() => {\n            LoadCommon.loadAsset({\n                path: \"res/Tip\",\n                bundleName: \"prefabs\",\n                type: cc.Prefab\n            }).then((prefab: cc.Prefab) => {\n                const node = cc.instantiate(prefab);\n                node.parent = this.Root(UISort.TOP);\n                node.setPosition(0, 0);\n                node.getComponent(Tip).init(content);\n            });\n        });\n    }\n\n}\n","import UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\n\nexport default class UITemp implements IWindow {\n\n    private static _instance: UITemp = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UITemp();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UITemp\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n\n        return true;\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n","import ConfigCommon from \"../core/common/ConfigCommon\";\nimport LocalStorageCommon from \"../core/common/LocalStorageCommon\";\nimport UIMgr from \"../core/ui/UIMgr\";\nimport { IWindow, SuccessFunc, UISort } from \"../Interface\";\nimport UIMain from \"./UIMain\";\n\nexport default class UIVictory implements IWindow {\n\n    private static _instance: UIVictory = null;\n    public static get instance() {\n        if (!this._instance) {\n            this._instance = new UIVictory();\n        }\n        return this._instance;\n    }\n\n    /**\n     * ui节点\n     */\n    node?: cc.Node = null;\n\n    /**\n     * ui名\n     */\n    name: string = \"UIVictory\";\n\n    /**\n     * 显示状态\n     */\n    active: boolean = false;\n\n    /**\n     * ui层级\n     */\n    sort: UISort = UISort.NORMAL;\n\n    /**\n     * 主分包\n     */\n    bundle: string = 'ui';\n\n    /**\n     * ui依赖分包\n     */\n    dependencies: string[] = [this.bundle];\n\n    /**\n     * 显示ui\n     * @param call \n     */\n    open(call?: SuccessFunc): void {\n        UIMgr.open(this, this.init, call);\n    }\n\n    /**\n     * 初始化\n     * @param ui \n     * @param success \n     * @returns true才会显示界面\n     */\n    init(ui: cc.Node, success: boolean): boolean {\n        let curLevel = LocalStorageCommon.getInt(GameConfig.LocalKeys.CurLevel);\n        console.log(\"curlevel =====\"+curLevel);\n        let config: table.ILevel = ConfigCommon.getRow(TableConfig.Level.TName, `Level${curLevel + 1}`);\n        console.log(config);\n        if (config) {\n            LocalStorageCommon.setInt(GameConfig.LocalKeys.CurLevel, ++curLevel);\n        }\n        return true;\n    }\n\n    protected onClick_BtnConfirm() {\n        GameConfig.CoinNum += 50;\n        UIMain.instance.setCoinView(GameConfig.CoinNum);\n        LocalStorageCommon.setInt(GameConfig.LocalKeys.CurCoin, GameConfig.CoinNum);\n        UIMain.instance.reset();\n        this.close();\n    }\n\n    /**\n     * 隐藏ui\n     * @param destroy 是否销毁\n     */\n    close(destroy?: boolean): void {\n        UIMgr.close(this.name, destroy);\n    }\n\n}\n"],"file":"index.js"}